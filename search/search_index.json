{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheatsheets for Developers","text":"<p><code>Cheat-Sheets</code> Your go-to reference developer guide for learning <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code>, and more!</p> <p> </p>"},{"location":"#contribute","title":"Contribute","text":"<p>We're always looking to expand and improve Cheatsheets! If you have a cheat sheet to share or see something that could be improved, feel free to submit a pull request. Let's build a valuable resource for developers together.  </p>"},{"location":"clean-code/","title":"Clean Code","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"community/contributing/","title":"Contributing","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"quick-ref/","title":"Quick Reference","text":"<p><code>Cheat-Sheets</code> Your go-to reference developer guide for learning <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code>, and more!</p>"},{"location":"quick-ref/#programming","title":"Programming","text":"<ul> <li> Python</li> </ul>"},{"location":"quick-ref/#clean-code","title":"Clean Code","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"quick-ref/python/","title":"Python","text":"<p>Abstract</p> <p>A concise and practical Python cheat sheet covering key syntax, core concepts, and useful features for quick reference.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Built-in Data Types</li> <li>Advanced Data Types</li> <li>Strings</li> <li>F-Strings</li> <li>Lists</li> <li>Flow Control</li> <li>Loops</li> <li>Functions</li> <li>Modules</li> <li>File Handling</li> <li>Classes and Inheritance</li> <li>Type Hints</li> <li>Operators</li> <li>Miscellaneous</li> </ul>","tags":["script","interpret"]},{"location":"quick-ref/python/advanced-data-types/","title":"Advanced Data Types","text":""},{"location":"quick-ref/python/advanced-data-types/#heaps","title":"Heaps","text":"<pre><code>import heapq\n\nmyList = [9, 5, 4, 1, 3, 2]\nheapq.heapify(myList) # turn myList into a Min Heap\nprint(myList)    # =&gt; [1, 3, 2, 5, 9, 4]\nprint(myList[0]) # first value is always the smallest in the heap\n\nheapq.heappush(myList, 10) # insert 10\nx = heapq.heappop(myList)  # pop and return smallest item\nprint(x)                   # =&gt; 1\n</code></pre>"},{"location":"quick-ref/python/advanced-data-types/#negate-all-values-to-use-min-heap-as-max-heap","title":"Negate all values to use Min Heap as Max Heap","text":"<pre><code>myList = [9, 5, 4, 1, 3, 2]\nmyList = [-val for val in myList] # multiply by -1 to negate\nheapq.heapify(myList)\n\nx = heapq.heappop(myList)\nprint(-x) # =&gt; 9 (making sure to multiply by -1 again)\n</code></pre> <p>Heaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for accessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See: Heapq</p>"},{"location":"quick-ref/python/advanced-data-types/#stacks-and-queues","title":"Stacks and Queues","text":"<pre><code>from collections import deque\n\nq = deque()          # empty\nq = deque([1, 2, 3]) # with values\n\nq.append(4)     # append to right side\nq.appendleft(0) # append to left side\nprint(q)    # =&gt; deque([0, 1, 2, 3, 4])\n\nx = q.pop() # remove &amp; return from right\ny = q.popleft() # remove &amp; return from left\nprint(x)    # =&gt; 4\nprint(y)    # =&gt; 0\nprint(q)    # =&gt; deque([1, 2, 3])\n\nq.rotate(1) # rotate 1 step to the right\nprint(q)    # =&gt; deque([3, 1, 2])\n</code></pre> <p>Deque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See: Deque</p>"},{"location":"quick-ref/python/built-in-data-types/","title":"Built-in Data Types","text":""},{"location":"quick-ref/python/built-in-data-types/#strings","title":"Strings","text":"<pre><code>hello = \"Hello World\"\nhello = 'Hello World'\n\nmulti_string = \"\"\"Multiline Strings\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit \"\"\"\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#numbers","title":"Numbers","text":"<pre><code>x = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n&gt;&gt;&gt; print(type(x))\n&lt;class 'int'&gt;\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#booleans","title":"Booleans","text":"<pre><code>my_bool = True\nmy_bool = False\n\nbool(0)     # =&gt; False\nbool(1)     # =&gt; True\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#lists","title":"Lists","text":"<pre><code>list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [True, False, False]\nlist3 = [1, 5, 7, 9, 3]\nlist4 = list((1, 5, 7, 9, 3))\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#tuple","title":"Tuple","text":"<pre><code>my_tuple = (1, 2, 3)\nmy_tuple = tuple((1, 2, 3))\n</code></pre> <p>Similar to List but immutable</p>"},{"location":"quick-ref/python/built-in-data-types/#set","title":"Set","text":"<pre><code>set1 = {\"a\", \"b\", \"c\"}\nset2 = set((\"a\", \"b\", \"c\"))\n</code></pre> <p>Set of unique items/objects</p>"},{"location":"quick-ref/python/built-in-data-types/#dictionary","title":"Dictionary","text":"<pre><code>&gt;&gt;&gt; empty_dict = {}\n&gt;&gt;&gt; a = {\"one\": 1, \"two\": 2, \"three\": 3}\n&gt;&gt;&gt; a[\"one\"]\n1\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three'])\n&gt;&gt;&gt; a.values()\ndict_values([1, 2, 3])\n&gt;&gt;&gt; a.update({\"four\": 4})\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three', 'four'])\n&gt;&gt;&gt; a['four']\n4\n</code></pre> <p>Key: Value pair, JSON like object</p>"},{"location":"quick-ref/python/built-in-data-types/#casting","title":"Casting","text":""},{"location":"quick-ref/python/built-in-data-types/#integers","title":"Integers","text":"<pre><code>x = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#floats","title":"Floats","text":"<pre><code>x = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#strings_1","title":"Strings","text":"<pre><code>x = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/","title":"Classes and Inheritance","text":""},{"location":"quick-ref/python/classes-and-inheritance/#defining","title":"Defining","text":"<pre><code>class MyNewClass:\n    pass\n\n# Class Instantiation\nmy = MyNewClass()\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#constructors","title":"Constructors","text":"<pre><code>class Animal:\n    def __init__(self, voice):\n        self.voice = voice\n\ncat = Animal('Meow')\nprint(cat.voice)    # =&gt; Meow\n\ndog = Animal('Woof')\nprint(dog.voice)    # =&gt; Woof\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#method","title":"Method","text":"<pre><code>class Dog:\n\n    # Method of the class\n    def bark(self):\n        print(\"Ham-Ham\")\n\ncharlie = Dog()\ncharlie.bark()   # =&gt; \"Ham-Ham\"\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#class-variables","title":"Class Variables","text":"<pre><code>class MyClass:\n    class_variable = \"A class variable!\"\n\n# =&gt; A class variable!\nprint(MyClass.class_variable)\n\nx = MyClass()\n\n# =&gt; A class variable!\nprint(x.class_variable)\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#super-function","title":"Super() Function","text":"<pre><code>class ParentClass:\n    def print_test(self):\n        print(\"Parent Method\")\n\nclass ChildClass(ParentClass):\n    def print_test(self):\n        print(\"Child Method\")\n        # Calls the parent's print_test()\n        super().print_test()\n</code></pre> <pre><code>&gt;&gt;&gt; child_instance = ChildClass()\n&gt;&gt;&gt; child_instance.print_test()\nChild Method\nParent Method\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#repr-method","title":"repr() method","text":"<pre><code>class Employee:\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n\njohn = Employee('John')\nprint(john)  # =&gt; John\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#user-defined-exceptions","title":"User-defined exceptions","text":"<pre><code>class CustomError(Exception):\n    pass\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#polymorphism","title":"Polymorphism","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print('A')\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print('B')\n\nobj_A = ParentClass()\nobj_B = ChildClass()\n\nobj_A.print_self() # =&gt; A\nobj_B.print_self() # =&gt; B\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#overriding","title":"Overriding","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print(\"Parent\")\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print(\"Child\")\n\nchild_instance = ChildClass()\nchild_instance.print_self() # =&gt; Child\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#inheritance","title":"Inheritance","text":"<pre><code>class Animal:\n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nYoki = Dog(\"Yoki\", 4)\nprint(Yoki.name) # =&gt; YOKI\nprint(Yoki.legs) # =&gt; 4\nYoki.sound()     # =&gt; Woof!\n</code></pre>"},{"location":"quick-ref/python/f-strings/","title":"F-Strings","text":""},{"location":"quick-ref/python/f-strings/#f-strings-usage","title":"f-Strings usage","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n\n&gt;&gt;&gt; f\"\"\"He said {\"I'm John\"}\"\"\"\n\"He said I'm John\"\n\n&gt;&gt;&gt; f'5 {\"{stars}\"}'\n'5 {stars}'\n&gt;&gt;&gt; f'5 {\"stars\"}'\n'{5} stars'\n\n&gt;&gt;&gt; name = 'Eric'\n&gt;&gt;&gt; age = 27\n&gt;&gt;&gt; f\"\"\"Hello!\n...     I'm {name}.\n...     I'm {age}.\"\"\"\n\"Hello!\\n    I'm Eric.\\n    I'm 27.\"\n</code></pre> <p>It is available since Python 3.6, also see: Formatted string literals</p>"},{"location":"quick-ref/python/f-strings/#f-strings-fill-align","title":"f-Strings Fill Align","text":"<pre><code>&gt;&gt;&gt; f'{\"text\":10}'     # [width]\n'text      '\n&gt;&gt;&gt; f'{\"test\":*&gt;10}'   # fill left\n'******test'\n&gt;&gt;&gt; f'{\"test\":*&lt;10}'   # fill right\n'test******'\n&gt;&gt;&gt; f'{\"test\":*^10}'   # fill center\n'***test***'\n&gt;&gt;&gt; f'{12345:0&gt;10}'    # fill with numbers\n'0000012345'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-type","title":"f-Strings Type","text":"<pre><code>&gt;&gt;&gt; f'{10:b}'        # binary type\n'1010'\n&gt;&gt;&gt; f'{10:o}'        # octal type\n'12'\n&gt;&gt;&gt; f'{200:x}'       # hexadecimal type\n'c8'\n&gt;&gt;&gt; f'{200:X}'\n'C8'\n&gt;&gt;&gt; f'{345600000000:e}' # scientific notation\n'3.456000e+11'\n&gt;&gt;&gt; f'{65:c}'       # character type\n'A'\n&gt;&gt;&gt; f'{10:#b}'      # [type] with notation (base)\n'0b1010'\n&gt;&gt;&gt; f'{10:#o}'\n'0o12'\n&gt;&gt;&gt; f'{10:#x}'\n'0xa'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-others","title":"F-Strings Others","text":"<pre><code>&gt;&gt;&gt; f'{-12345:0=10}'  # negative numbers\n'-000012345'\n&gt;&gt;&gt; f'{12345:010}'    # [0] shortcut (no align)\n'0000012345'\n&gt;&gt;&gt; f'{-12345:010}'\n'-000012345'\n&gt;&gt;&gt; import math       # [.precision]\n&gt;&gt;&gt; math.pi\n3.141592653589793\n&gt;&gt;&gt; f'{math.pi:.2f}'\n'3.14'\n&gt;&gt;&gt; f'{1000000:,.2f}' # [grouping_option]\n'1,000,000.00'\n&gt;&gt;&gt; f'{1000000:_.2f}'\n'1_000_000.00'\n&gt;&gt;&gt; f'{0.25:0%}'      # percentage\n'25.000000%'\n&gt;&gt;&gt; f'{0.25:.0%}'\n'25%'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-sign","title":"F-Strings Sign","text":"<pre><code>&gt;&gt;&gt; f'{12345:+}'      # [sign] (+/-)\n'+12345'\n&gt;&gt;&gt; f'{-12345:+}'\n'-12345'\n&gt;&gt;&gt; f'{-12345:+10}'\n'    -12345'\n&gt;&gt;&gt; f'{-12345:+010}'\n'-000012345'\n</code></pre>"},{"location":"quick-ref/python/file-handling/","title":"File Handling","text":""},{"location":"quick-ref/python/file-handling/#read-file","title":"Read file","text":""},{"location":"quick-ref/python/file-handling/#line-by-line","title":"Line by line","text":"<pre><code>with open(\"myfile.txt\") as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#with-line-number","title":"With line number","text":"<pre><code>file = open('myfile.txt', 'r')\nfor i, line in enumerate(file, start=1):\n    print(\"Number %s: %s\" % (i, line))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#string","title":"String","text":""},{"location":"quick-ref/python/file-handling/#write-a-string","title":"Write a string","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-a-string","title":"Read a string","text":"<pre><code>with open('myfile1.txt', \"r+\") as file:\n    contents = file.read()\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#object","title":"Object","text":""},{"location":"quick-ref/python/file-handling/#write-an-object","title":"Write an object","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-an-object","title":"Read an object","text":"<pre><code>with open('myfile2.txt', \"r+\") as file:\n    contents = json.load(file)\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-a-file","title":"Delete a File","text":"<pre><code>import os\nos.remove(\"myfile.txt\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#check-and-delete","title":"Check and Delete","text":"<pre><code>import os\nif os.path.exists(\"myfile.txt\"):\n    os.remove(\"myfile.txt\")\nelse:\n    print(\"The file does not exist\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-folder","title":"Delete Folder","text":"<pre><code>import os\nos.rmdir(\"myfolder\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/","title":"Flow control","text":""},{"location":"quick-ref/python/flow-control/#basic","title":"Basic","text":"<pre><code>num = 5\nif num &gt; 10:\n    print(\"num is totally bigger than 10.\")\nelif num &lt; 10:\n    print(\"num is smaller than 10.\")\nelse:\n    print(\"num is indeed 10.\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#one-line-ternary-operator","title":"One line (ternary operator)","text":"<pre><code>&gt;&gt;&gt; a = 330\n&gt;&gt;&gt; b = 200\n&gt;&gt;&gt; r = \"a\" if a &gt; b else \"b\"\n&gt;&gt;&gt; print(r)\na\n</code></pre>"},{"location":"quick-ref/python/flow-control/#else-if","title":"else if","text":"<pre><code>value = True\nif not value:\n    print(\"Value is False\")\nelif value is None:\n    print(\"Value is None\")\nelse:\n    print(\"Value is True\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#match-case","title":"match case","text":"<pre><code>x = 1\nmatch x:\n  case 0:\n    print(\"zero\")\n  case 1:\n    print(\"one\")\n  case _:\n    print(\"multiple\")\n</code></pre>"},{"location":"quick-ref/python/functions/","title":"Functions","text":""},{"location":"quick-ref/python/functions/#basic","title":"Basic","text":"<pre><code>def hello_world():\n    print('Hello, World!')\n</code></pre>"},{"location":"quick-ref/python/functions/#return","title":"Return","text":"<pre><code>def add(x, y):\n    print(\"x is %s, y is %s\" %(x, y))\n    return x + y\n\nadd(5, 6)    # =&gt; 11\n</code></pre>"},{"location":"quick-ref/python/functions/#positional-arguments","title":"Positional arguments","text":"<pre><code>def varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # =&gt; (1, 2, 3)\n</code></pre> <p>Type of \"args\" is tuple.</p>"},{"location":"quick-ref/python/functions/#keyword-arguments","title":"Keyword arguments","text":"<pre><code>def keyword_args(**kwargs):\n    return kwargs\n\n# =&gt; {\"big\": \"foot\", \"loch\": \"ness\"}\nkeyword_args(big=\"foot\", loch=\"ness\")\n</code></pre> <p>Type of \"kwargs\" is dict.</p>"},{"location":"quick-ref/python/functions/#returning-multiple","title":"Returning multiple","text":"<pre><code>def swap(x, y):\n    return y, x\n\nx = 1\ny = 2\nx, y = swap(x, y)  # =&gt; x = 2, y = 1\n</code></pre>"},{"location":"quick-ref/python/functions/#default-value","title":"Default Value","text":"<pre><code>def add(x, y=10):\n    return x + y\n\nadd(5)      # =&gt; 15\nadd(5, 20)  # =&gt; 25\n</code></pre>"},{"location":"quick-ref/python/functions/#anonymous-functions","title":"Anonymous functions","text":"<pre><code># =&gt; True\n(lambda x: x &gt; 2)(3)\n\n# =&gt; 5\n(lambda x, y: x ** 2 + y ** 2)(2, 1)\n</code></pre>"},{"location":"quick-ref/python/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/python/getting-started/#introduction","title":"Introduction","text":"<ul> <li>Python (python.org)</li> <li>Python Document (docs.python.org)</li> <li>Learn X in Y minutes (learnxinyminutes.com)</li> <li>Regex in python (cheatsheets.zip)</li> </ul>"},{"location":"quick-ref/python/getting-started/#hello-world","title":"Hello World","text":"<pre><code>&gt;&gt;&gt; print(\"Hello, World!\")\nHello, World!\n</code></pre> <p>The famous \"Hello World\" program in Python</p>"},{"location":"quick-ref/python/getting-started/#variables","title":"Variables","text":"<pre><code>age = 18      # age is of type int\nname = \"John\" # name is now of type str\nprint(name)\n</code></pre> <p>Python can't declare a variable without assignment.</p>"},{"location":"quick-ref/python/getting-started/#data-types","title":"Data Types","text":"<code>str</code> Text <code>int</code>, <code>float</code>, <code>complex</code> Numeric <code>list</code>, <code>tuple</code>, <code>range</code> Sequence <code>dict</code> Mapping <code>set</code>, <code>frozenset</code> Set <code>bool</code> Boolean <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code> Binary"},{"location":"quick-ref/python/getting-started/#slicing-string","title":"Slicing String","text":"<pre><code>&gt;&gt;&gt; msg = \"Hello, World!\"\n&gt;&gt;&gt; print(msg[2:5])\nllo\n</code></pre>"},{"location":"quick-ref/python/getting-started/#lists","title":"Lists","text":"<pre><code>mylist = []\nmylist.append(1)\nmylist.append(2)\nfor item in mylist:\n    print(item) # prints out 1,2\n</code></pre>"},{"location":"quick-ref/python/getting-started/#if-else","title":"If Else","text":"<pre><code>num = 200\nif num &gt; 0:\n    print(\"num is greater than 0\")\nelse:\n    print(\"num is not greater than 0\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#loops","title":"Loops","text":"<pre><code>for item in range(6):\n    if item == 3: break\n    print(item)\nelse:\n    print(\"Finally finished!\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#functions","title":"Functions","text":"<pre><code>&gt;&gt;&gt; def my_function():\n...     print(\"Hello from a function\")\n...\n&gt;&gt;&gt; my_function()\nHello from a function\n</code></pre>"},{"location":"quick-ref/python/getting-started/#file-handling","title":"File Handling","text":"<pre><code>with open(\"myfile.txt\", \"r\", encoding='utf8') as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/getting-started/#arithmetic","title":"Arithmetic","text":"<pre><code>result = 10 + 30 # =&gt; 40\nresult = 40 - 10 # =&gt; 30\nresult = 50 * 5  # =&gt; 250\nresult = 16 / 4  # =&gt; 4.0 (Float Division)\nresult = 16 // 4 # =&gt; 4 (Integer Division)\nresult = 25 % 2  # =&gt; 1\nresult = 5 ** 3  # =&gt; 125\n</code></pre> <p>The <code>/</code> means quotient of x and y, and the <code>//</code> means floored quotient of x and y, also see StackOverflow</p>"},{"location":"quick-ref/python/getting-started/#plus-equals","title":"Plus-Equals","text":"<pre><code>counter = 0\ncounter += 10           # =&gt; 10\ncounter = 0\ncounter = counter + 10  # =&gt; 10\n\nmessage = \"Part 1.\"\n\n# =&gt; Part 1.Part 2.\nmessage += \"Part 2.\"\n</code></pre>"},{"location":"quick-ref/python/getting-started/#f-strings-python-36","title":"f-Strings (Python 3.6+)","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n</code></pre>"},{"location":"quick-ref/python/lists/","title":"Lists","text":""},{"location":"quick-ref/python/lists/#defining","title":"Defining","text":"<pre><code>&gt;&gt;&gt; li1 = []\n&gt;&gt;&gt; li1\n[]\n&gt;&gt;&gt; li2 = [4, 5, 6]\n&gt;&gt;&gt; li2\n[4, 5, 6]\n&gt;&gt;&gt; li3 = list((1, 2, 3))\n&gt;&gt;&gt; li3\n[1, 2, 3]\n&gt;&gt;&gt; li4 = list(range(1, 11))\n&gt;&gt;&gt; li4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/python/lists/#generate","title":"Generate","text":"<pre><code>&gt;&gt;&gt; list(filter(lambda x : x % 2 == 1, range(1, 20)))\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n&gt;&gt;&gt; [x ** 2 for x in range (1, 11) if  x % 2 == 1]\n[1, 9, 25, 49, 81]\n\n&gt;&gt;&gt; [x for x in [3, 4, 5, 6, 7] if x &gt; 5]\n[6, 7]\n\n&gt;&gt;&gt; list(filter(lambda x: x &gt; 5, [3, 4, 5, 6, 7]))\n[6, 7]\n</code></pre>"},{"location":"quick-ref/python/lists/#append","title":"Append","text":"<pre><code>&gt;&gt;&gt; li = []\n&gt;&gt;&gt; li.append(1)\n&gt;&gt;&gt; li\n[1]\n&gt;&gt;&gt; li.append(2)\n&gt;&gt;&gt; li\n[1, 2]\n&gt;&gt;&gt; li.append(4)\n&gt;&gt;&gt; li\n[1, 2, 4]\n&gt;&gt;&gt; li.append(3)\n&gt;&gt;&gt; li\n[1, 2, 4, 3]\n</code></pre>"},{"location":"quick-ref/python/lists/#list-slicing","title":"List Slicing","text":"<p>Syntax of list slicing:</p> <pre><code>a_list[start:end]\na_list[start:end:step]\n</code></pre>"},{"location":"quick-ref/python/lists/#slicing","title":"Slicing","text":"<pre><code>&gt;&gt;&gt; a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:5]\n['bacon', 'tomato', 'ham']\n&gt;&gt;&gt; a[-5:-2]\n['egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[1:4]\n['egg', 'bacon', 'tomato']\n</code></pre>"},{"location":"quick-ref/python/lists/#omitting-index","title":"Omitting index","text":"<pre><code>&gt;&gt;&gt; a[:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[0:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[2:]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:len(a)]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[:]\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n</code></pre>"},{"location":"quick-ref/python/lists/#with-a-stride","title":"With a stride","text":"<pre><code>['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[0:6:2]\n['spam', 'bacon', 'ham']\n&gt;&gt;&gt; a[1:6:2]\n['egg', 'tomato', 'lobster']\n&gt;&gt;&gt; a[6:0:-2]\n['lobster', 'tomato', 'egg']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[::-1]\n['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']\n</code></pre>"},{"location":"quick-ref/python/lists/#remove","title":"Remove","text":"<pre><code>&gt;&gt;&gt; li = ['bread', 'butter', 'milk']\n&gt;&gt;&gt; li.pop()\n'milk'\n&gt;&gt;&gt; li\n['bread', 'butter']\n&gt;&gt;&gt; del li[0]\n&gt;&gt;&gt; li\n['butter']\n</code></pre>"},{"location":"quick-ref/python/lists/#access","title":"Access","text":"<pre><code>&gt;&gt;&gt; li = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; li[0]\n'a'\n&gt;&gt;&gt; li[-1]\n'd'\n&gt;&gt;&gt; li[4]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre>"},{"location":"quick-ref/python/lists/#concatenating","title":"Concatenating","text":"<pre><code>&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd.extend([9, 11, 13])\n&gt;&gt;&gt; odd\n[1, 3, 5, 9, 11, 13]\n&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd + [9, 11, 13]\n[1, 3, 5, 9, 11, 13]\n</code></pre>"},{"location":"quick-ref/python/lists/#sort-reverse","title":"Sort &amp; Reverse","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.sort()\n&gt;&gt;&gt; li\n[1, 2, 3, 3, 5]\n&gt;&gt;&gt; li.reverse()\n&gt;&gt;&gt; li\n[5, 3, 3, 2, 1]\n</code></pre>"},{"location":"quick-ref/python/lists/#count","title":"Count","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.count(3)\n2\n</code></pre>"},{"location":"quick-ref/python/lists/#repeating","title":"Repeating","text":"<pre><code>&gt;&gt;&gt; li = [\"re\"] * 3\n&gt;&gt;&gt; li\n['re', 're', 're']\n</code></pre>"},{"location":"quick-ref/python/loops/","title":"Loops","text":""},{"location":"quick-ref/python/loops/#basic","title":"Basic","text":"<pre><code>primes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n</code></pre> <p>Prints: 2 3 5 7</p>"},{"location":"quick-ref/python/loops/#with-index","title":"With index","text":"<pre><code>animals = [\"dog\", \"cat\", \"mouse\"]\n# enumerate() adds counter to an iterable\nfor i, value in enumerate(animals):\n    print(i, value)\n</code></pre> <p>Prints: 0 dog 1 cat 2 mouse</p>"},{"location":"quick-ref/python/loops/#while","title":"While","text":"<pre><code>x = 0\nwhile x &lt; 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n</code></pre> <p>Prints: 0 1 2 3</p>"},{"location":"quick-ref/python/loops/#break","title":"Break","text":"<pre><code>x = 0\nfor index in range(10):\n    x = index * 10\n    if index == 5:\n     break\n    print(x)\n</code></pre> <p>Prints: 0 10 20 30 40</p>"},{"location":"quick-ref/python/loops/#continue","title":"Continue","text":"<pre><code>for index in range(3, 8):\n    x = index * 10\n    if index == 5:\n     continue\n    print(x)\n</code></pre> <p>Prints: 30 40 60 70</p>"},{"location":"quick-ref/python/loops/#range","title":"Range","text":"<pre><code>for i in range(4):\n    print(i) # Prints: 0 1 2 3\n\nfor i in range(4, 8):\n    print(i) # Prints: 4 5 6 7\n\nfor i in range(4, 10, 2):\n    print(i) # Prints: 4 6 8\n</code></pre>"},{"location":"quick-ref/python/loops/#with-zip","title":"With zip()","text":"<pre><code>words = ['Mon', 'Tue', 'Wed']\nnums = [1, 2, 3]\n# Use zip to pack into a tuple list\nfor w, n in zip(words, nums):\n    print('%d:%s, ' %(n, w))\n</code></pre> <p>Prints: 1:Mon, 2:Tue, 3:Wed,</p>"},{"location":"quick-ref/python/loops/#forelse","title":"for/else","text":"<pre><code>nums = [60, 70, 30, 110, 90]\nfor n in nums:\n    if n &gt; 100:\n        print(\"%d is bigger than 100\" %n)\n        break\nelse:\n    print(\"Not found!\")\n</code></pre> <p>Also see: Python Tips</p>"},{"location":"quick-ref/python/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/python/miscellaneous/#comments","title":"Comments","text":"<pre><code># This is a single line comments.\n</code></pre> <pre><code>\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n</code></pre> <pre><code>''' Multiline strings can be written\n    using three 's, and are often used\n    as documentation.\n'''\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#generators","title":"Generators","text":"<pre><code>def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n</code></pre> <p>Generators help you make lazy code.</p>"},{"location":"quick-ref/python/miscellaneous/#generator-to-list","title":"Generator to list","text":"<pre><code>values = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\n\n# =&gt; [-1, -2, -3, -4, -5]\nprint(gen_to_list)\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#handle-exceptions","title":"Handle exceptions","text":"<pre><code>try:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be handled together, if required.\nelse:                    # Optional clause to the try/except block. Must follow all except blocks\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n</code></pre>"},{"location":"quick-ref/python/modules/","title":"Modules","text":""},{"location":"quick-ref/python/modules/#import-modules","title":"Import modules","text":"<pre><code>import math\nprint(math.sqrt(16))  # =&gt; 4.0\n</code></pre>"},{"location":"quick-ref/python/modules/#from-a-module","title":"From a module","text":"<pre><code>from math import ceil, floor\nprint(ceil(3.7))   # =&gt; 4.0\nprint(floor(3.7))  # =&gt; 3.0\n</code></pre>"},{"location":"quick-ref/python/modules/#import-all","title":"Import all","text":"<pre><code>from math import *\n</code></pre>"},{"location":"quick-ref/python/modules/#shorten-module","title":"Shorten module","text":"<pre><code>import math as m\n\n# =&gt; True\nmath.sqrt(16) == m.sqrt(16)\n</code></pre>"},{"location":"quick-ref/python/modules/#functions-and-attributes","title":"Functions and attributes","text":"<pre><code>import math\ndir(math)\n</code></pre>"},{"location":"quick-ref/python/operators/","title":"Operators","text":""},{"location":"quick-ref/python/operators/#walrus","title":"Walrus","text":"<pre><code>values = [1, \"text\", True, \"\", 2]\ni = 0\n\n# It assigns a value to a variable and compares it in a boolean expression\nwhile (data := values[i]):\n\n    print(data, end=\",\")\n    i = i + 1\n\n# Expected result: 1, \"text\", True\n</code></pre>"},{"location":"quick-ref/python/strings/","title":"Strings","text":""},{"location":"quick-ref/python/strings/#array-like","title":"Array-like","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World\"\n&gt;&gt;&gt; print(hello[1])\ne\n&gt;&gt;&gt; print(hello[-1])\nd\n</code></pre> <p>Get the character at position 1 or last</p>"},{"location":"quick-ref/python/strings/#looping","title":"Looping","text":"<pre><code>&gt;&gt;&gt; for char in \"foo\":\n...     print(char)\nf\no\no\n</code></pre> <p>Loop through the letters in the word \"foo\"</p>"},{"location":"quick-ref/python/strings/#slicing-string","title":"Slicing string","text":"<pre><code> \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n | m | y | b | a | c | o | n |\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n 0   1   2   3   4   5   6   7\n-7  -6  -5  -4  -3  -2  -1\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[2:5]\n'bac'\n&gt;&gt;&gt; s[0:2]\n'my'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[:2]\n'my'\n&gt;&gt;&gt; s[2:]\n'bacon'\n&gt;&gt;&gt; s[:2] + s[2:]\n'mybacon'\n&gt;&gt;&gt; s[:]\n'mybacon'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[-5:-1]\n'baco'\n&gt;&gt;&gt; s[2:6]\n'baco'\n</code></pre>"},{"location":"quick-ref/python/strings/#with-a-stride","title":"With a stride","text":"<pre><code>&gt;&gt;&gt; s = '12345' * 5\n&gt;&gt;&gt; s\n'1234512345123451234512345'\n&gt;&gt;&gt; s[::5]\n'11111'\n&gt;&gt;&gt; s[4::5]\n'55555'\n&gt;&gt;&gt; s[::-5]\n'55555'\n&gt;&gt;&gt; s[::-1]\n'5432154321543215432154321'\n</code></pre>"},{"location":"quick-ref/python/strings/#string-length","title":"String Length","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World!\"\n&gt;&gt;&gt; print(len(hello))\n13\n</code></pre> <p>The len() function returns the length of a string</p>"},{"location":"quick-ref/python/strings/#multiple-copies","title":"Multiple copies","text":"<pre><code>&gt;&gt;&gt; s = '===+'\n&gt;&gt;&gt; n = 8\n&gt;&gt;&gt; s * n\n'===+===+===+===+===+===+===+===+'\n</code></pre>"},{"location":"quick-ref/python/strings/#check-string","title":"Check String","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; s in 'I saw spamalot!'\nTrue\n&gt;&gt;&gt; s not in 'I saw The Holy Grail!'\nTrue\n</code></pre>"},{"location":"quick-ref/python/strings/#concatenates","title":"Concatenates","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; t = 'egg'\n&gt;&gt;&gt; s + t\n'spamegg'\n&gt;&gt;&gt; 'spam' 'egg'\n'spamegg'\n</code></pre>"},{"location":"quick-ref/python/strings/#formatting","title":"Formatting","text":"<pre><code>name = \"John\"\nprint(\"Hello, %s!\" % name)\n</code></pre> <pre><code>name = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\n</code></pre>"},{"location":"quick-ref/python/strings/#format-method","title":"format() Method","text":"<pre><code>txt1 = \"My name is {fname}, I'm {age}\".format(fname=\"John\", age=36)\ntxt2 = \"My name is {0}, I'm {1}\".format(\"John\", 36)\ntxt3 = \"My name is {}, I'm {}\".format(\"John\", 36)\n</code></pre>"},{"location":"quick-ref/python/strings/#input","title":"Input","text":"<pre><code>&gt;&gt;&gt; name = input(\"Enter your name: \")\nEnter your name: Tom\n&gt;&gt;&gt; name\n'Tom'\n</code></pre> <p>Get input data from console</p>"},{"location":"quick-ref/python/strings/#join","title":"Join","text":"<pre><code>&gt;&gt;&gt; \"#\".join([\"John\", \"Peter\", \"Vicky\"])\n'John#Peter#Vicky'\n</code></pre>"},{"location":"quick-ref/python/strings/#endswith","title":"Endswith","text":"<pre><code>&gt;&gt;&gt; \"Hello, world!\".endswith(\"!\")\nTrue\n</code></pre>"},{"location":"quick-ref/python/type-hints/","title":"Type Hints","text":"<p><code>Type hints</code> was introduced in <code>Python 3.5</code>, and it is a way to specify the type of a variable or an argument.</p>"},{"location":"quick-ref/python/type-hints/#variable-parameter","title":"Variable &amp; Parameter","text":"<pre><code>string: str = \"ha\"\ntimes: int = 3\n\n\n# wrong hit, but run correctly\nresult: str = 1 + 2\nprint(result)  # =&gt; 3\n\n\ndef say(name: str, start: str = \"Hi\"):\n    return start + \", \" + name\n\nprint(say(\"Python\"))  # =&gt; Hi, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type","title":"Built-in date type","text":"<pre><code>from typing import Dict, Tuple, List\n\nbill: Dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: Tuple[str] = (\"DONE\",)\nsucceeded: Tuple[int, str] = (1, \"SUCCESS\")\nstatuses: Tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: List[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type-310","title":"Built-in date type (3.10+)","text":"<pre><code>bill: dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: tuple[str] = (\"DONE\",)\nsucceeded: tuple[int, str] = (1, \"SUCCESS\")\nstatuses: tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: list[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#positional-argument","title":"Positional argument","text":"<pre><code>def calc_summary(*args: int):\n    return sum(args)\n\nprint(calc_summary(3, 1, 4))  # =&gt; 8\n</code></pre> <p>Indicate all arguments' type is int.</p>"},{"location":"quick-ref/python/type-hints/#returned","title":"Returned","text":"<pre><code>def say_hello(name) -&gt; str:\n    return \"Hello, \" + name\n\nvar = \"Python\"\nprint(say_hello(var))  # =&gt; Hello, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned","title":"Union returned","text":"<pre><code>from typing import Union\n\ndef resp200(meaningful) -&gt; Union[int, str]:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Means returned value type may be int or str.</p>"},{"location":"quick-ref/python/type-hints/#keyword-argument","title":"Keyword argument","text":"<pre><code>def calc_summary(**kwargs: int):\n    return sum(kwargs.values())\n\nprint(calc_summary(a=1, b=2))  # =&gt; 3\n</code></pre> <p>Indicate all parameters' value type is int.</p>"},{"location":"quick-ref/python/type-hints/#multiple-returns","title":"Multiple returns","text":"<pre><code>def resp200() -&gt; (int, str):\n    return 200, \"OK\"\n\nreturns = resp200()\nprint(returns)  # =&gt; (200, 'OK')\nprint(type(returns))  # tuple\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned-310","title":"Union returned (3.10+)","text":"<pre><code>def resp200(meaningful) -&gt; int | str:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Since Python 3.10</p>"},{"location":"quick-ref/python/type-hints/#property","title":"Property","text":"<pre><code>class Employee:\n    name: str\n    age: int\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.graduated: bool = False\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance","title":"Self instance","text":"<pre><code>class Employee:\n    name: str\n\n    def set_name(self, name) -&gt; \"Employee\":\n        self.name = name\n        return self\n\n    def copy(self) -&gt; 'Employee':\n        return type(self)(self.name)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance-311","title":"Self instance (3.11+)","text":"<pre><code>from typing import Self\n\nclass Employee:\n    name: str\n    age: int\n\n    def set_name(self: Self, name) -&gt; Self:\n        self.name = name\n        return self\n</code></pre>"},{"location":"quick-ref/python/type-hints/#type-generic","title":"Type &amp; Generic","text":"<pre><code>from typing import TypeVar, Type\n\nT = TypeVar(\"T\")\n\n# \"mapper\" is a type, like int, str, MyClass and so on.\n# \"default\" is an instance of type T, such as 314, \"string\", MyClass() and so on.\n# returned is an instance of type T too.\ndef converter(raw, mapper: Type[T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\nraw: str = input(\"Enter an integer: \")\nresult: int = converter(raw, mapper=int, default=0)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#function","title":"Function","text":"<pre><code>from typing import TypeVar, Callable, Any\n\nT = TypeVar(\"T\")\n\ndef converter(raw, mapper: Callable[[Any], T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\n# Callable[[Any], ReturnType] means a function declare like:\n# def func(arg: Any) -&gt; ReturnType:\n#     pass\n\n# Callable[[str, int], ReturnType] means a function declare like:\n# def func(string: str, times: int) -&gt; ReturnType:\n#     pass\n\n# Callable[..., ReturnType] means a function declare like:\n# def func(*args, **kwargs) -&gt; ReturnType:\n#     pass\n\ndef is_success(value) -&gt; bool:\n    return value in (0, \"OK\", True, \"success\")\n\nresp = dict(code=0, message=\"OK\", data=[])\nsuccessed: bool = converter(resp[\"message\"], mapper=is_success, default=False)\n</code></pre>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheatsheets for Developers","text":"<p><code>Cheat-Sheets</code> Your go-to reference developer guide for learning <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code>, and more!</p> <p> </p>"},{"location":"#quick-reference","title":"Quick Reference","text":""},{"location":"#programming","title":"Programming","text":"<ul> <li>  Python</li> <li>  JavaScript</li> <li>  C</li> <li>  C++</li> <li>  Java</li> <li>  TypeScript</li> <li>  Go</li> <li>  Rust</li> <li>  PHP</li> <li>  Swift</li> <li>  Dart</li> <li>  Git</li> <li>  Ruby</li> </ul>"},{"location":"#database","title":"Database","text":"<ul> <li>  PostgreSQL</li> </ul>"},{"location":"#toolkit","title":"Toolkit","text":"<ul> <li>  Vim</li> </ul>"},{"location":"#clean-code","title":"Clean Code","text":"<ul> <li>  Python</li> </ul> <p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"#contribute","title":"Contribute","text":"<p>We're always looking to expand and improve Cheatsheets! If you have a cheat sheet to share or see something that could be improved, feel free to submit a pull request. Let's build a valuable resource for developers together. Feel free to open an issue if you have any questions or suggestions. For consistency, please follow the contributing guidelines when creating or editing a cheat sheet.  </p>"},{"location":"#thanks","title":"Thanks","text":"<p>This project is based on the Fechin/reference project. The main focus of this project is to improve organization, enhance readability, and introduce new features to make it more accessible for everyone.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the GNU General Public License v3.0.</p>"},{"location":"clean-code/","title":"Clean Code","text":"<ul> <li>  Python</li> </ul> <p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"clean-code/python/","title":"Python","text":"<p>Abstract</p> <p>A concise and practical Python cheat sheet focused on Clean Code principles, covering best practices, readability, and maintainability for writing high-quality Python code.</p> <p>Contents:</p> <ul> <li>Introduction</li> <li>Variables</li> <li>Functions</li> <li>Classes</li> <li>Don't repeat yourself</li> </ul> <p>Credits</p> <p>This content is adapted from zedr/clean-code-python</p>","tags":["script","interpret","python","clean-code","python-clean-code"]},{"location":"clean-code/python/classes/","title":"Classes","text":""},{"location":"clean-code/python/classes/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Robert C. Martin writes:</p> <p>A class should have only one reason to change.</p> <p>\"Reasons to change\" are, in essence, the responsibilities managed by a class or function.</p> <p>In the following example, we create an HTML element that represents a comment with the version of the document:</p> <p>Bad</p> <pre><code>from importlib import metadata\n\n\nclass VersionCommentElement:\n     \"\"\"An element that renders an HTML comment with the program's version number\n     \"\"\"\n\n     def get_version(self) -&gt; str:\n          \"\"\"Get the package version\"\"\"\n          return metadata.version(\"pip\")\n\n     def render(self) -&gt; None:\n          print(f'&lt;!-- Version: {self.get_version()} --&gt;')\n\n\nVersionCommentElement().render()\n</code></pre> <p>This class has two responsibilities:</p> <ul> <li>Retrieve the version number of the Python package</li> <li>Render itself as an HTML element</li> </ul> <p>Any change to one or the other carries the risk of impacting the other.</p> <p>We can rewrite the class and decouple these responsibilities:</p> <p>Good</p> <pre><code>from importlib import metadata\n\n\ndef get_version(pkg_name: str) -&gt; str:\n     \"\"\"Retrieve the version of a given package\"\"\"\n     return metadata.version(pkg_name)\n\n\nclass VersionCommentElement:\n     \"\"\"An element that renders an HTML comment with the program's version number\n     \"\"\"\n\n     def __init__(self, version: str):\n          self.version = version\n\n     def render(self) -&gt; None:\n          print(f'&lt;!-- Version: {self.version} --&gt;')\n\n\nVersionCommentElement(get_version(\"pip\")).render()\n</code></pre> <p>The result is that the class only needs to take care of rendering itself. It receives the version text during instantiation and this text is generated by calling a separate function, <code>get_version()</code>. Changing the class has no impact on the other, and vice-versa, as long as the contract between them does not change, i.e. the function provides a string and the class <code>__init__</code> method accepts a string.</p> <p>As an added bonus, the <code>get_version()</code> is now reusable elsewhere.</p>"},{"location":"clean-code/python/classes/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<p>\u201cIncorporate new features  by extending the system, not by making modifications (to it)\u201d, Uncle Bob.</p> <p>Objects should be open for extension, but closed to modification. It should be possible to augment the functionality provided by an object (for example, a class) without changing its internal contracts. An object can enable this when it is designed to be extended cleanly.</p> <p>In the following example, we try to implement a simple web framework that handles HTTP requests and returns responses. The <code>View</code> class has a single method <code>.get()</code> that will be called when the HTTP server will receive a GET request from a client.</p> <p><code>View</code> is intentionally simple and returns <code>text/plain</code> responses. We would also like to return HTML responses based on a template file, so we subclass it using the <code>TemplateView</code> class.</p> <p>Bad</p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"An HTTP response\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"A simple view that returns plain text responses\"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Handle a GET request and return a message in the response\"\"\"\n          return Response(\n               status=200,\n               content_type='text/plain',\n               body=\"Welcome to my web site\"\n          )\n\n\nclass TemplateView(View):\n     \"\"\"A view that returns HTML responses based on a template file.\"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Handle a GET request and return an HTML document in the response\"\"\"\n          with open(\"index.html\") as fd:\n               return Response(\n                    status=200,\n                    content_type='text/html',\n                    body=fd.read()\n               )\n</code></pre> <p>The <code>TemplateView</code> class has modified the internal behaviour of its parent class in order to enable the more advanced functionality. In doing so, it now relies on the <code>View</code> to not change the implementation of the <code>.get()</code> method, which now needs to be frozen in time. We cannot introduce, for example, some additional checks in all our <code>View</code>-derived classes because the behaviour is overridden in at least one subtype and we will need to update it.</p> <p>Let's redesign our classes to fix this problem and let the <code>View</code> class be extended (not modified) cleanly:</p> <p>Good</p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"An HTTP response\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"A simple view that returns plain text responses\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Render the message body of the response\"\"\"\n          return \"Welcome to my web site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Handle a GET request and return a message in the response\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateView(View):\n     \"\"\"A view that returns HTML responses based on a template file.\"\"\"\n\n     content_type = \"text/html\"\n     template_file = \"index.html\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Render the message body as HTML\"\"\"\n          with open(self.template_file) as fd:\n               return fd.read()\n</code></pre> <p>Note that we did need to override the <code>render_body()</code> in order to change the source of the body, but this method has a single, well defined responsibility that invites subtypes to override it. It is designed to be extended by its subtypes.</p> <p>Another good way to use the strengths of both object inheritance and object composition is to use Mixins .</p> <p>Mixins are bare-bones classes that are meant to be used exclusively with other related classes. They are \"mixed-in\" with the target class using multiple inheritance, in order to change the target's behaviour.</p> <p>A few rules:</p> <ul> <li>Mixins should always inherit from <code>object</code></li> <li>Mixins always come before the target class,   e.g. <code>class Foo(MixinA, MixinB, TargetClass): ...</code></li> </ul> <p>Also good</p> <pre><code>from dataclasses import dataclass, field\nfrom typing import Protocol\n\n\n@dataclass\nclass Response:\n     \"\"\"An HTTP response\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n     headers: dict = field(default_factory=dict)\n\n\nclass View:\n     \"\"\"A simple view that returns plain text responses\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Render the message body of the response\"\"\"\n          return \"Welcome to my web site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Handle a GET request and return a message in the response\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateRenderMixin:\n     \"\"\"A mixin class for views that render HTML documents using a template file\n\n     Not to be used by itself!\n     \"\"\"\n     template_file: str = \"\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Render the message body as HTML\"\"\"\n          if not self.template_file:\n               raise ValueError(\"The path to a template file must be given.\")\n\n          with open(self.template_file) as fd:\n               return fd.read()\n\n\nclass ContentLengthMixin:\n     \"\"\"A mixin class for views that injects a Content-Length header in the\n     response\n\n     Not to be used by itself!\n     \"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Introspect and amend the response to inject the new header\"\"\"\n          response = super().get(request)  # type: ignore\n          response.headers['Content-Length'] = len(response.body)\n          return response\n\n\nclass TemplateView(TemplateRenderMixin, ContentLengthMixin, View):\n     \"\"\"A view that returns HTML responses based on a template file.\"\"\"\n\n     content_type = \"text/html\"\n     template_file = \"index.html\"\n</code></pre> <p>As you can see, Mixins make object composition easier by packaging together related functionality into a highly reusable class with a single responsibility, allowing clean decoupling. Class extension is achieved by \" mixing-in\" the additional classes.</p> <p>The popular Django project makes heavy use of Mixins to compose its class-based views.</p> <p>FIXME: re-enable typechecking for the line above once it's clear how to use <code>typing.Protocol</code> to make the type checker work with Mixins.</p>"},{"location":"clean-code/python/classes/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>\u201cFunctions that use pointers or references to base classes must be able to use objects of derived classes without knowing it\u201d, Uncle Bob.</p> <p>This principle is named after Barbara Liskov, who collaborated with fellow computer scientist Jeannette Wing on the seminal paper *\"A behavioral notion of subtyping\" (1994). A core tenet of the paper is that \"a subtype (must) preserve the behaviour of the supertype methods and also all invariant and history properties of its supertype\".</p> <p>In essence, a function accepting a supertype should also accept all its subtypes with no modification.</p> <p>Can you spot the problem with the following code?</p> <p>Bad</p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"An HTTP response\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"A simple view that returns plain text responses\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Render the message body of the response\"\"\"\n          return \"Welcome to my web site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Handle a GET request and return a message in the response\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateView(View):\n     \"\"\"A view that returns HTML responses based on a template file.\"\"\"\n\n     content_type = \"text/html\"\n\n     def get(self, request, template_file: str) -&gt; Response:  # type: ignore\n          \"\"\"Render the message body as HTML\"\"\"\n          with open(template_file) as fd:\n               return Response(\n                    status=200,\n                    content_type=self.content_type,\n                    body=fd.read()\n               )\n\n\ndef render(view: View, request) -&gt; Response:\n     \"\"\"Render a View\"\"\"\n     return view.get(request)\n</code></pre> <p>The expectation is that <code>render()</code> function will be able to work with <code>View</code> and its subtype <code>TemplateView</code>, but the latter has broken compatibility by modifying the signature of the <code>.get()</code> method. The function will raise a <code>TypeError</code> exception when used with <code>TemplateView</code>.</p> <p>If we want the <code>render()</code> function to work with any subtype of <code>View</code>, we must pay attention not to break its public-facing protocol. But how do we know what constitutes it for a given class? Type hinters like mypy will raise an error when it detects mistakes like this:</p> <pre><code>error: Signature of \"get\" incompatible with supertype \"View\"\n&lt;string&gt;:36: note:      Superclass:\n&lt;string&gt;:36: note:          def get(self, request: Any) -&gt; Response\n&lt;string&gt;:36: note:      Subclass:\n&lt;string&gt;:36: note:          def get(self, request: Any, template_file: str) -&gt; Response\n</code></pre>"},{"location":"clean-code/python/classes/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>\u201cKeep interfaces small so that users don\u2019t end up depending on things they don\u2019t need.\u201d, Uncle Bob.</p> <p>Several well known object oriented programming languages, like Java and Go, have a concept called interfaces. An interface defines the public methods and properties of an object without implementing them. They are useful when we don't want to couple the signature of a function to a concrete object; we'd rather say \"I don't care what object you give me, as long as it has certain methods and attributes I expect to make use of\".</p> <p>Python does not have interfaces. We have Abstract Base Classes instead, which are a little different, but can serve the same purpose.</p> <p>Good</p> <pre><code>from abc import ABCMeta, abstractmethod\n\n\n# Define the Abstract Class for a generic Greeter object\nclass Greeter(metaclass=ABCMeta):\n     \"\"\"An object that can perform a greeting action.\"\"\"\n\n     @staticmethod\n     @abstractmethod\n     def greet(name: str) -&gt; None:\n          \"\"\"Display a greeting for the user with the given name\"\"\"\n\n\nclass FriendlyActor(Greeter):\n     \"\"\"An actor that greets the user with a friendly salutation\"\"\"\n\n     @staticmethod\n     def greet(name: str) -&gt; None:\n          \"\"\"Greet a person by name\"\"\"\n          print(f\"Hello {name}!\")\n\n\ndef welcome_user(user_name: str, actor: Greeter):\n     \"\"\"Welcome a user with a given name using the provided actor\"\"\"\n     actor.greet(user_name)\n\n\nwelcome_user(\"Barbara\", FriendlyActor())\n</code></pre> <p>Now imagine the following scenario: we have a certain number of PDF documents that we author and want to serve to our web site visitors. We are using a Python web framework and we might be tempted to design a class to manage these documents, so we go ahead and design a comprehensive abstract base class for our document.</p> <p>Error</p> <pre><code>import abc\n\n\nclass Persistable(metaclass=abc.ABCMeta):\n     \"\"\"Serialize a file to data and back\"\"\"\n\n     @property\n     @abc.abstractmethod\n     def data(self) -&gt; bytes:\n          \"\"\"The raw data of the file\"\"\"\n\n     @classmethod\n     @abc.abstractmethod\n     def load(cls, name: str):\n          \"\"\"Load the file from disk\"\"\"\n\n     @abc.abstractmethod\n     def save(self) -&gt; None:\n          \"\"\"Save the file to disk\"\"\"\n\n\n# We just want to serve the documents, so our concrete PDF document\n# implementation just needs to implement the `.load()` method and have\n# a public attribute named `data`.\n\nclass PDFDocument(Persistable):\n     \"\"\"A PDF document\"\"\"\n\n     @property\n     def data(self) -&gt; bytes:\n          \"\"\"The raw bytes of the PDF document\"\"\"\n          ...  # Code goes here - omitted for brevity\n\n     @classmethod\n     def load(cls, name: str):\n          \"\"\"Load the file from the local filesystem\"\"\"\n          ...  # Code goes here - omitted for brevity\n\n\ndef view(request):\n     \"\"\"A web view that handles a GET request for a document\"\"\"\n     requested_name = request.qs['name']  # We want to validate this!\n     return PDFDocument.load(requested_name).data\n</code></pre> <p>But we can't! If we don't implement the <code>.save()</code> method, an exception will be raised:</p> <pre><code>Can't instantiate abstract class PDFDocument with abstract method save.\n</code></pre> <p>That's annoying. We don't really need to implement <code>.save()</code> here. We could implement a dummy method that does nothing or raises <code>NotImplementedError</code>, but that's useless code that we will need to maintain.</p> <p>At the same time, if we remove <code>.save()</code> from the abstract class now we will need to add it back when we will later implement a way for users to submit their documents, bringing us back to the same situation as before.</p> <p>The problem is that we have written an interface that has features we don't need right now as we are not using them.</p> <p>The solution is to decompose the interface into smaller and composable interfaces that segregate each feature.</p> <p>Good</p> <pre><code>import abc\n\n\nclass DataCarrier(metaclass=abc.ABCMeta):\n     \"\"\"Carries a data payload\"\"\"\n\n     @property\n     def data(self):\n          ...\n\n\nclass Loadable(DataCarrier):\n     \"\"\"Can load data from storage by name\"\"\"\n\n     @classmethod\n     @abc.abstractmethod\n     def load(cls, name: str):\n          ...\n\n\nclass Saveable(DataCarrier):\n     \"\"\"Can save data to storage\"\"\"\n\n     @abc.abstractmethod\n     def save(self) -&gt; None:\n          ...\n\n\nclass PDFDocument(Loadable):\n     \"\"\"A PDF document\"\"\"\n\n     @property\n     def data(self) -&gt; bytes:\n          \"\"\"The raw bytes of the PDF document\"\"\"\n          ...  # Code goes here - omitted for brevity\n\n     @classmethod\n     def load(cls, name: str) -&gt; None:\n          \"\"\"Load the file from the local filesystem\"\"\"\n          ...  # Code goes here - omitted for brevity\n\n\ndef view(request):\n     \"\"\"A web view that handles a GET request for a document\"\"\"\n     requested_name = request.qs['name']  # We want to validate this!\n     return PDFDocument.load(requested_name).data\n</code></pre>"},{"location":"clean-code/python/classes/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>\u201cDepend upon abstractions, not concrete details\u201d, Uncle Bob.</p> <p>Imagine we wanted to write a web view that returns an HTTP response that streams rows of a CSV file we create on the fly. We want to use the CSV writer that is provided by the standard library.</p> <p>Bad</p> <pre><code>import csv\nfrom io import StringIO\n\n\nclass StreamingHttpResponse:\n     \"\"\"A streaming HTTP response\"\"\"\n     ...  # implementation code goes here\n\n\ndef some_view(request):\n     rows = (\n          ['First row', 'Foo', 'Bar', 'Baz'],\n          ['Second row', 'A', 'B', 'C', '\"Testing\"', \"Here's a quote\"]\n     )\n\n     # Define a generator to stream data directly to the client\n     def stream():\n          buffer_ = StringIO()\n          writer = csv.writer(buffer_, delimiter=';', quotechar='\"')\n          for row in rows:\n               writer.writerow(row)\n               buffer_.seek(0)\n               data = buffer_.read()\n               buffer_.seek(0)\n               buffer_.truncate()\n               yield data\n\n     # Create the streaming response  object with the appropriate CSV header.\n     response = StreamingHttpResponse(stream(), content_type='text/csv')\n     response[\n          'Content-Disposition'] = 'attachment; filename=\"somefilename.csv\"'\n\n     return response\n</code></pre> <p>Our first implementation works around the CSV's writer interface by manipulating a <code>StringIO</code> object (which is file-like) and performing several low level operations in order to farm out the rows from the writer. It's a lot of work and not very elegant.</p> <p>A better way is to leverage the fact that the writer just needs an object with a <code>.write()</code> method to do our bidding. Why not pass it a dummy object that immediately returns the newly assembled row, so that the <code>StreamingHttpResponse</code> class can immediate stream it back to the client?</p> <p>Good</p> <pre><code>import csv\n\n\nclass Echo:\n     \"\"\"An object that implements just the write method of the file-like\n     interface.\n     \"\"\"\n\n     def write(self, value):\n          \"\"\"Write the value by returning it, instead of storing in a buffer.\"\"\"\n          return value\n\n\ndef some_streaming_csv_view(request):\n     \"\"\"A view that streams a large CSV file.\"\"\"\n     rows = (\n          ['First row', 'Foo', 'Bar', 'Baz'],\n          ['Second row', 'A', 'B', 'C', '\"Testing\"', \"Here's a quote\"]\n     )\n     writer = csv.writer(Echo(), delimiter=';', quotechar='\"')\n     return StreamingHttpResponse(\n          (writer.writerow(row) for row in rows),\n          content_type=\"text/csv\",\n          headers={\n               'Content-Disposition': 'attachment; filename=\"somefilename.csv\"'},\n     )\n</code></pre> <p>Much better, and it works like a charm! The reason it's superior to the previous implementation should be obvious: less code (and more performant) to achieve the same result. We decided to leverage the fact that the writer class depends on the <code>.write()</code> abstraction of the object it receives, without caring about the low level, concrete details of what the method actually does.</p> <p>This example was taken from a submission made to the Django documentation by this author.</p>"},{"location":"clean-code/python/dry/","title":"N\u00e3o se repita (DRY)","text":"<p>Mais informa\u00e7\u00f5es sobre o pr\u00edncipio DRY.</p> <p>Como programador, voc\u00ea deve evitar c\u00f3digo duplicado. A duplica\u00e7\u00e3o \u00e9 ruim porque isso significa que h\u00e1 mais de um lugar para alterar algo, se precisar mudar alguma l\u00f3gica</p> <p>Imagine que voc\u00ea \u00e9 dono de um restaurante e voc\u00ea toma conta do seu estoque: todos os seus tomates, cebolas, alhos, temperos, etc. Se voc\u00ea tem multiplas listas onde guarda estas informa\u00e7\u00f5es, ent\u00e3o voc\u00ea ter\u00e1 que atualizar todas elas quando servir um prato que tenha tomates. Se voc\u00ea tivesse apenas uma lista, teria apenas um lugar para atualizar!</p> <p>Frequentemente, voc\u00ea possui c\u00f3digo duplicado porque voc\u00ea tem duas ou mais coisas levemente diferentes, que possuem muito em comum, mas suas diferen\u00e7as lhe for\u00e7am a ter mais duas ou tr\u00eas fun\u00e7\u00f5es que fazem muito das mesmas coisas. Remover c\u00f3digo duplicado significa criar uma abstra\u00e7\u00e3o que seja capaz de lidar com este conjunto de coisas diferentes com apenas uma fun\u00e7\u00e3o/m\u00f3dulo/classe.</p> <p>Conseguir a abstra\u00e7\u00e3o correta \u00e9 cr\u00edtico, por isso que voc\u00ea deveria seguir os princ\u00edpios SOLID descritos na se\u00e7\u00e3o Classes. Abstra\u00e7\u00f5es ruins podem ser piores do que c\u00f3digo duplicado, ent\u00e3o tome cuidado! Dito isto, se voc\u00ea puder fazer uma boa abstra\u00e7\u00e3o, fa\u00e7a-a! N\u00e3o repita a si mesmo, caso contr\u00e1rio voc\u00ea se pegar\u00e1 atualizando muitos lugares toda vez que precisar mudar qualquer coisinha.</p> <p>Ruim:</p> <pre><code>from typing import List, Text, Dict\nfrom dataclasses import dataclass\n\n@dataclass\nclass Developer:\n    def __init__(self, experience: float, github_link: Text) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; Text:\n        return self._github_link\n\n@dataclass\nclass Manager:\n    def __init__(self, experience: float, github_link: Text) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; Text:\n        return self._github_link\n\n\ndef get_developer_list(developers: List[Developer]) -&gt; List[Dict]:\n    developers_list = []\n    for developer in developers:\n        developers_list.append({\n        'experience' : developer.experience,\n        'github_link' : developer.github_link\n            })\n    return developers_list\n\ndef get_manager_list(managers: List[Manager]) -&gt; List[Dict]:\n    managers_list = []\n    for manager in managers:\n        managers_list.append({\n        'experience' : manager.experience,\n        'github_link' : manager.github_link\n            })\n    return managers_list\n\n## create list objects of developers\ncompany_developers = [\n    Developer(experience=2.5, github_link='https://github.com/1'),\n    Developer(experience=1.5, github_link='https://github.com/2')\n]\ncompany_developers_list = get_developer_list(developers=company_developers)\n\n## create list objects of managers\ncompany_managers = [\n    Manager(experience=4.5, github_link='https://github.com/3'),\n    Manager(experience=5.7, github_link='https://github.com/4')\n]\ncompany_managers_list = get_manager_list(managers=company_managers)\n</code></pre> <p>Bom:</p> <pre><code>from typing import List, Text, Dict\nfrom dataclasses import dataclass\n\n@dataclass\nclass Employee:\n    def __init__(self, experience: float, github_link: Text) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; Text:\n        return self._github_link\n\n\n\ndef get_employee_list(employees: List[Employee]) -&gt; List[Dict]:\n    employees_list = []\n    for employee in employees:\n        employees_list.append({\n        'experience' : employee.experience,\n        'github_link' : employee.github_link\n            })\n    return employees_list\n\n## create list objects of developers\ncompany_developers = [\n    Employee(experience=2.5, github_link='https://github.com/1'),\n    Employee(experience=1.5, github_link='https://github.com/2')\n]\ncompany_developers_list = get_employee_list(employees=company_developers)\n\n## create list objects of managers\ncompany_managers = [\n    Employee(experience=4.5, github_link='https://github.com/3'),\n    Employee(experience=5.7, github_link='https://github.com/4')\n]\ncompany_managers_list = get_employee_list(employees=company_managers)\n</code></pre>"},{"location":"clean-code/python/functions/","title":"Functions","text":""},{"location":"clean-code/python/functions/#functions-should-do-one-thing","title":"Functions should do one thing","text":"<p>This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, they can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you'll be ahead of many developers.</p> <p>Bad:</p> <pre><code>from typing import List\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client) -&gt; None:\n    pass\n\n\ndef email_clients(clients: List[Client]) -&gt; None:\n    \"\"\"Filter active clients and send them an email.\n    \"\"\"\n    for client in clients:\n        if client.active:\n            email(client)\n</code></pre> <p>Good:</p> <pre><code>from typing import List\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client) -&gt; None:\n    pass\n\n\ndef get_active_clients(clients: List[Client]) -&gt; List[Client]:\n    \"\"\"Filter active clients.\n    \"\"\"\n    return [client for client in clients if client.active]\n\n\ndef email_clients(clients: List[Client]) -&gt; None:\n    \"\"\"Send an email to a given list of clients.\n    \"\"\"\n    for client in get_active_clients(clients):\n        email(client)\n</code></pre> <p>Do you see an opportunity for using generators now?</p> <p>Even better</p> <pre><code>from typing import Generator, Iterator\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client):\n    pass\n\n\ndef active_clients(clients: Iterator[Client]) -&gt; Generator[Client, None, None]:\n    \"\"\"Only active clients\"\"\"\n    return (client for client in clients if client.active)\n\n\ndef email_client(clients: Iterator[Client]) -&gt; None:\n    \"\"\"Send an email to a given list of clients.\n    \"\"\"\n    for client in active_clients(clients):\n        email(client)\n</code></pre>"},{"location":"clean-code/python/functions/#function-arguments-2-or-fewer-ideally","title":"Function arguments (2 or fewer ideally)","text":"<p>A large amount of parameters is usually the sign that a function is doing too much (has more than one responsibility). Try to decompose it into smaller functions having a reduced set of parameters, ideally less than three.</p> <p>If the function has a single responsibility, consider if you can bundle some or all parameters into a specialized object that will be passed as an argument to the function. These parameters might be attributes of a single entity that you can represent with a dedicated data structure. You may also be able to reuse this entity elsewhere in your program. The reason why this is a better arrangement is than having multiple parameters is that we may be able to move some computations, done with those parameters inside the function, into methods belonging to the new object, therefore reducing the complexity of the function.</p> <p>Bad:</p> <pre><code>def create_menu(title, body, button_text, cancellable):\n    pass\n</code></pre> <p>Java-esque:</p> <pre><code>class Menu:\n    def __init__(self, config: dict):\n        self.title = config[\"title\"]\n        self.body = config[\"body\"]\n        # ...\n\n\nmenu = Menu(\n    {\n        \"title\": \"My Menu\",\n        \"body\": \"Something about my menu\",\n        \"button_text\": \"OK\",\n        \"cancellable\": False\n    }\n)\n</code></pre> <p>Also good</p> <pre><code>class MenuConfig:\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: str\n    body: str\n    button_text: str\n    cancellable: bool = False\n\n\ndef create_menu(config: MenuConfig) -&gt; None:\n    title = config.title\n    body = config.body\n    # ...\n\n\nconfig = MenuConfig()\nconfig.title = \"My delicious menu\"\nconfig.body = \"A description of the various items on the menu\"\nconfig.button_text = \"Order now!\"\n# The instance attribute overrides the default class attribute.\nconfig.cancellable = True\n\ncreate_menu(config)\n</code></pre> <p>Fancy</p> <pre><code>from typing import NamedTuple\n\n\nclass MenuConfig(NamedTuple):\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: str\n    body: str\n    button_text: str\n    cancellable: bool = False\n\n\ndef create_menu(config: MenuConfig):\n    title, body, button_text, cancellable = config\n    # ...\n\n\ncreate_menu(\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\"\n    )\n)\n</code></pre> <p>Even fancier</p> <pre><code>from dataclasses import astuple, dataclass\n\n\n@dataclass\nclass MenuConfig:\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: str\n    body: str\n    button_text: str\n    cancellable: bool = False\n\n\ndef create_menu(config: MenuConfig):\n    title, body, button_text, cancellable = astuple(config)\n    # ...\n\n\ncreate_menu(\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\"\n    )\n)\n</code></pre> <p>Even fancier, Python3.8+ only</p> <pre><code>from typing import TypedDict\n\n\nclass MenuConfig(TypedDict):\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: str\n    body: str\n    button_text: str\n    cancellable: bool\n\n\ndef create_menu(config: MenuConfig):\n    title = config[\"title\"]\n    # ...\n\n\ncreate_menu(\n    # You need to supply all the parameters\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\",\n        cancellable=True\n    )\n)\n</code></pre>"},{"location":"clean-code/python/functions/#function-names-should-say-what-they-do","title":"Function names should say what they do","text":"<p>Bad:</p> <pre><code>class Email:\n    def handle(self) -&gt; None:\n        pass\n\n\nmessage = Email()\n# What is this supposed to do again?\nmessage.handle()\n</code></pre> <p>Good:</p> <pre><code>class Email:\n    def send(self) -&gt; None:\n        \"\"\"Send this message\"\"\"\n\n\nmessage = Email()\nmessage.send()\n</code></pre>"},{"location":"clean-code/python/functions/#functions-should-only-be-one-level-of-abstraction","title":"Functions should only be one level of abstraction","text":"<p>When you have more than one level of abstraction, your function is usually doing too much. Splitting up functions leads to reusability and easier testing.</p> <p>Bad:</p> <pre><code># type: ignore\n\ndef parse_better_js_alternative(code: str) -&gt; None:\n    regexes = [\n        # ...\n    ]\n\n    statements = code.split('\\n')\n    tokens = []\n    for regex in regexes:\n        for statement in statements:\n            pass\n\n    ast = []\n    for token in tokens:\n        pass\n\n    for node in ast:\n        pass\n</code></pre> <p>Good:</p> <pre><code>from typing import Tuple, List, Dict\n\nREGEXES: Tuple = (\n    # ...\n)\n\n\ndef parse_better_js_alternative(code: str) -&gt; None:\n    tokens: List = tokenize(code)\n    syntax_tree: List = parse(tokens)\n\n    for node in syntax_tree:\n        pass\n\n\ndef tokenize(code: str) -&gt; List:\n    statements = code.split()\n    tokens: List[Dict] = []\n    for regex in REGEXES:\n        for statement in statements:\n            pass\n\n    return tokens\n\n\ndef parse(tokens: List) -&gt; List:\n    syntax_tree: List[Dict] = []\n    for token in tokens:\n        pass\n\n    return syntax_tree\n</code></pre>"},{"location":"clean-code/python/functions/#dont-use-flags-as-function-parameters","title":"Don't use flags as function parameters","text":"<p>Flags tell your user that this function does more than one thing. Functions should do one thing. Split your functions if they are following different code paths based on a boolean.</p> <p>Bad:</p> <pre><code>from tempfile import gettempdir\nfrom pathlib import Path\n\n\ndef create_file(name: str, temp: bool) -&gt; None:\n    if temp:\n        (Path(gettempdir()) / name).touch()\n    else:\n        Path(name).touch()\n</code></pre> <p>Good:</p> <pre><code>from tempfile import gettempdir\nfrom pathlib import Path\n\n\ndef create_file(name: str) -&gt; None:\n    Path(name).touch()\n\n\ndef create_temp_file(name: str) -&gt; None:\n    (Path(gettempdir()) / name).touch()\n</code></pre>"},{"location":"clean-code/python/functions/#avoid-side-effects","title":"Avoid side effects","text":"<p>A function produces a side effect if it does anything other than take a value in and return another value or values. For example, a side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.</p> <p>Now, you do need to have side effects in a program on occasion - for example, like in the previous example, you might need to write to a file. In these cases, you should centralize and indicate where you are incorporating side effects. Don't have several functions and classes that write to a particular file - rather, have one (and only one) service that does it.</p> <p>The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, or using an instance of a class, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.</p> <p>Bad:</p> <pre><code># type: ignore\n\n# This is a module-level name.\n# It's good practice to define these as immutable values, such as a string.\n# However...\nfullname = \"Ryan McDermott\"\n\n\ndef split_into_first_and_last_name() -&gt; None:\n    # The use of the global keyword here is changing the meaning of the\n    # the following line. This function is now mutating the module-level\n    # state and introducing a side-effect!\n    global fullname\n    fullname = fullname.split()\n\n\nsplit_into_first_and_last_name()\n\n# MyPy will spot the problem, complaining about 'Incompatible types in\n# assignment: (expression has type \"List[str]\", variable has type \"str\")'\nprint(fullname)  # [\"Ryan\", \"McDermott\"]\n\n# OK. It worked the first time, but what will happen if we call the\n# function again?\n</code></pre> <p>Good:</p> <pre><code>from typing import List, AnyStr\n\n\ndef split_into_first_and_last_name(name: AnyStr) -&gt; List[AnyStr]:\n    return name.split()\n\n\nfullname = \"Ryan McDermott\"\nname, surname = split_into_first_and_last_name(fullname)\n\nprint(name, surname)  # =&gt; Ryan McDermott\n</code></pre> <p>Also good</p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Person:\n    name: str\n\n    @property\n    def name_as_first_and_last(self) -&gt; list:\n        return self.name.split()\n\n\n# The reason why we create instances of classes is to manage state!\nperson = Person(\"Ryan McDermott\")\nprint(person.name)  # =&gt; \"Ryan McDermott\"\nprint(person.name_as_first_and_last)  # =&gt; [\"Ryan\", \"McDermott\"]\n</code></pre>"},{"location":"clean-code/python/introduction/","title":"Introduction","text":"<p>Software engineering principles, from Robert C. Martin's book Clean Code , adapted for Python. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in Python.</p> <p>Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of Clean Code.</p> <p>Adapted from clean-code-javascript</p> <p>Targets Python3.7+</p>"},{"location":"clean-code/python/variables/","title":"Variables","text":""},{"location":"clean-code/python/variables/#use-meaningful-and-pronounceable-variable-names","title":"Use meaningful and pronounceable variable names","text":"<p>Bad:</p> <pre><code>import datetime\n\nymdstr = datetime.date.today().strftime(\"%y-%m-%d\")\n</code></pre> <p>Additionally, there's no need to add the type of the variable (str) to its name.</p> <p>Good:</p> <pre><code>import datetime\n\ncurrent_date: str = datetime.date.today().strftime(\"%y-%m-%d\")\n</code></pre>"},{"location":"clean-code/python/variables/#use-the-same-vocabulary-for-the-same-type-of-variable","title":"Use the same vocabulary for the same type of variable","text":"<p>Bad: Here we use three different names for the same underlying entity:</p> <pre><code>def get_user_info(): pass\n\n\ndef get_client_data(): pass\n\n\ndef get_customer_record(): pass\n</code></pre> <p>Good: If the entity is the same, you should be consistent in referring to it in your functions:</p> <pre><code>def get_user_info(): pass\n\n\ndef get_user_data(): pass\n\n\ndef get_user_record(): pass\n</code></pre> <p>Even better Python is (also) an object oriented programming language. If it makes sense, package the functions together with the concrete implementation of the entity in your code, as instance attributes, property methods, or methods:</p> <pre><code>from typing import Union, Dict\n\n\nclass Record:\n    pass\n\n\nclass User:\n    info: str\n\n    @property\n    def data(self) -&gt; Dict[str, str]:\n        return {}\n\n    def get_record(self) -&gt; Union[Record, None]:\n        return Record()\n</code></pre>"},{"location":"clean-code/python/variables/#use-searchable-names","title":"Use searchable names","text":"<p>We will read more code than we will ever write. It's important that the code we do write is readable and searchable. By not naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.</p> <p>Bad:</p> <pre><code>import time\n\n# What is the number 86400 for again?\ntime.sleep(86400)\n</code></pre> <p>Good:</p> <pre><code>import time\n\n# Declare them in the global namespace for the module.\nSECONDS_IN_A_DAY = 60 * 60 * 24\ntime.sleep(SECONDS_IN_A_DAY)\n</code></pre>"},{"location":"clean-code/python/variables/#use-explanatory-variables","title":"Use explanatory variables","text":"<p>Bad:</p> <pre><code>import re\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$\"\n\nmatches = re.match(city_zip_code_regex, address)\nif matches:\n    print(f\"{matches[1]}: {matches[2]}\")\n</code></pre> <p>Not bad:</p> <p>It's better, but we are still heavily dependent on regex.</p> <pre><code>import re\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$\"\nmatches = re.match(city_zip_code_regex, address)\n\nif matches:\n    city, zip_code = matches.groups()\n    print(f\"{city}: {zip_code}\")\n</code></pre> <p>Good:</p> <p>Decrease dependence on regex by naming subpatterns.</p> <pre><code>import re\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(?P&lt;city&gt;.+?)\\s*(?P&lt;zip_code&gt;\\d{5})?$\"\n\nmatches = re.match(city_zip_code_regex, address)\nif matches:\n    print(f\"{matches['city']}, {matches['zip_code']}\")\n</code></pre>"},{"location":"clean-code/python/variables/#avoid-mental-mapping","title":"Avoid Mental Mapping","text":"<p>Don\u2019t force the reader of your code to translate what the variable means. Explicit is better than implicit.</p> <p>Bad:</p> <pre><code>seq = (\"Austin\", \"New York\", \"San Francisco\")\n\nfor item in seq:\n    # do_stuff()\n    # do_some_other_stuff()\n\n    # Wait, what's `item` again?\n    print(item)\n</code></pre> <p>Good:</p> <pre><code>locations = (\"Austin\", \"New York\", \"San Francisco\")\n\nfor location in locations:\n    # do_stuff()\n    # do_some_other_stuff()\n    # ...\n    print(location)\n</code></pre>"},{"location":"clean-code/python/variables/#dont-add-unneeded-context","title":"Don't add unneeded context","text":"<p>If your class/object name tells you something, don't repeat that in your variable name.</p> <p>Bad:</p> <pre><code>class Car:\n    car_make: str\n    car_model: str\n    car_color: str\n</code></pre> <p>Good:</p> <pre><code>class Car:\n    make: str\n    model: str\n    color: str\n</code></pre>"},{"location":"clean-code/python/variables/#use-default-arguments-instead-of-short-circuiting-or-conditionals","title":"Use default arguments instead of short circuiting or conditionals","text":"<p>Tricky</p> <p>Why write:</p> <pre><code>import hashlib\n\n\ndef create_micro_brewery(name):\n    name = \"Hipster Brew Co.\" if name is None else name\n    slug = hashlib.sha1(name.encode()).hexdigest()\n    # etc.\n</code></pre> <p>... when you can specify a default argument instead? This also makes it clear that you are expecting a string as the argument.</p> <p>Good:</p> <pre><code>import hashlib\n\n\ndef create_micro_brewery(name: str = \"Hipster Brew Co.\"):\n    slug = hashlib.sha1(name.encode()).hexdigest()\n    # etc.\n</code></pre>"},{"location":"community/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to this project. Your support is essential to improving and expanding it. We appreciate your interest and value your contributions.</p> <p>We're always looking to expand and improve Cheatsheets! If you have a cheat sheet to share or see something that could be improved, feel free to submit a pull request. Let's build a valuable resource for developers together.</p>"},{"location":"community/contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are several ways you can contribute to this project:</p> <ul> <li>Reporting a bug</li> <li>Suggesting a feature</li> <li>Improving documentation</li> <li>Sharing your knowledge</li> <li>Giving feedback</li> <li>Contributing to translations</li> <li>and more...</li> </ul>"},{"location":"community/contributing/#contribution-requirements","title":"Contribution Requirements","text":"<p>To get started with development, please follow these steps:</p> <p>1. Fork the repository.</p> <p>2. Clone your forked repository.</p> <p>3. Install the project dependencies.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>4. Start the development server.</p> <pre><code>mkdocs serve -f src/en/mkdocs.yml\n</code></pre> <p>Once running, visit http://127.0.0.1:8000 to preview your changes.</p>"},{"location":"community/contributing/#adding-a-new-cheat-sheet","title":"Adding a New Cheat Sheet","text":"<p>Each cheat sheet should be placed inside either the <code>quick-ref</code> or <code>clean-code</code> directory. If you're adding a new cheat sheet for Python, for example, create a <code>python</code> folder inside <code>quick-ref</code>:</p> <pre><code>\u251c\u2500\u2500 quick-ref\n    \u251c\u2500\u2500 python\n        \u251c\u2500\u2500 .toc.md\n        \u251c\u2500\u2500 index.md \n        \u251c\u2500\u2500 getting-started.md\n        \u251c\u2500\u2500 ...\n</code></pre> <p>The <code>index.md</code> file is the landing page for the cheatsheet. It should contain a table of contents for the cheatsheet.</p> index.md<pre><code>---\ntitle: Python\nicon: appicons/python # (1)!\ndescription: A concise and practical ...\n\ntags:\n  - script\n  - interpret\ncategories:\n  - programming\n---\n</code></pre> <ol> <li>The <code>icon</code> field should be the name of the icon file in the <code>material/overrides/.icons/appicons</code> directory. For example, if the icon file is <code>python.svg</code>, the <code>icon</code> field should be <code>appicons/python</code>.</li> </ol> <p>Required Fields</p> <p>Only the <code>title</code>, <code>icon</code>, and <code>description</code> are required. The <code>tags</code>, <code>cover</code>, and <code>categories</code> fields are optional.</p> <p>The <code>.toc.md</code> file is used to generate the navigation menu for the cheat sheet.</p> <pre><code>- [Python](index.md) # (1)!\n- [Getting Started](getting-started.md) # (2)!\n...\n</code></pre> <ol> <li>The <code>[Python](index.md)</code> link should point to the <code>index.md</code> file in the <code>python</code> directory.</li> <li>The <code>[Getting Started](getting-started.md)</code> link should point to the <code>getting-started.md</code> file in the <code>python</code> directory.</li> </ol> <p>The <code>getting-started.md</code> file is the first page of the cheat sheet. It should contain a brief introduction to the topic and a table of contents for the rest of the cheat sheet.</p> <p>Additional Markdowns files (<code>getting-started.md</code>, etc.) containing the content of the cheat sheet.</p>"},{"location":"community/contributing/#contributing-to-translations","title":"Contributing to Translations","text":"<p>We welcome contributions to the documentation in other languages. If you'd like to contribute to translations, please follow these steps:</p> <p>1. Duplicate the <code>src/en/</code> folder and rename it using a supported language code. Each language directory contains the following files:</p> <pre><code>\u251c\u2500\u2500 docs\n    \u251c\u2500\u2500 quick-ref\n        \u251c\u2500\u2500 index.md\n        \u251c\u2500\u2500 python\n            \u251c\u2500\u2500 index.md\n            \u251c\u2500\u2500 getting-started.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre> <p>2. Edit the <code>mkdocs.yml</code> file in the language directory to set the <code>language</code> field.</p> <p>For example, if you want to translate the cheat sheet to Portuguese Brazil, you should set the <code>language</code> field to <code>pt-BR</code>.</p> src/pt-BR/mkdocs.yml<pre><code>INHERIT: ../../mkdocs.yml\n\n# Project information\nsite_dir: ../../site\nsite_description: Share quick ... # (1)!\nedit_uri: edit/master/src/en/docs/ # (2)!\n\n# Configuration\ntheme:\n  name: material\n  language: en  # (3)!\n</code></pre> <ol> <li>Translate the <code>site_description</code> field to your language.</li> <li>Edit the <code>edit_uri</code> field to point to the correct language (e.g., <code>edit/master/src/pt-BR/docs/</code>).</li> <li>Set the <code>language</code> field (e.g., <code>language: pt-BR</code>).</li> </ol> <p>3. Add the new language to the <code>languages</code> field in the main <code>mkdocs.yml</code> file that is located in the root directory.</p> mkdocs.yml<pre><code>extra:\n  alternate:\n    - name: English\n      link: https://ivansaul.github.io/cheatsheets\n      lang: en\n    - name: Portuguese (BR) # (1)!\n      link: https://ivansaul.github.io/cheatsheets/pt-BR/ # (2)!\n      lang: pt-BR # (3)!\n</code></pre> <ol> <li>This field will be used to display the language name in the language selector.</li> <li>This field will be used to redirect users to the correct language version of the cheat sheet.</li> <li>This field will be used to set the <code>language</code> field in the <code>mkdocs.yml</code> file in the language directory.</li> </ol> <p>4. Start the development server.</p> <pre><code>mkdocs serve -f src/pt-BR/mkdocs.yml\n</code></pre> <p>5.  Add new jobs to the <code>deploy.yml</code> workflow file to build the documentation for the new language.</p> .github/workflows/deploy.yml<pre><code>- name: Build English Documentation\n    run: mkdocs build -f src/en/mkdocs.yml\n\n- name: Build Portuguese (BR) Documentation\n    run: mkdocs build -f src/pt-BR/mkdocs.yml\n</code></pre> <p>Build and Deploy Workflow</p> <p>The new jobs should be added after the <code>Build English Documentation</code> job.</p> <p>6. Once your translation is complete, commit your changes and submit a pull request.</p>"},{"location":"quick-ref/","title":"Quick Reference","text":""},{"location":"quick-ref/#programming","title":"Programming","text":"<ul> <li>  Python</li> <li>  JavaScript</li> <li>  C</li> <li>  C++</li> <li>  Java</li> <li>  TypeScript</li> <li>  Go</li> <li>  Rust</li> <li>  PHP</li> <li>  Swift</li> <li>  Dart</li> <li>  Git</li> <li>  Ruby</li> </ul>"},{"location":"quick-ref/#database","title":"Database","text":"<ul> <li>  PostgreSQL</li> </ul>"},{"location":"quick-ref/#toolkit","title":"Toolkit","text":"<ul> <li>  Vim</li> </ul>"},{"location":"quick-ref/c/","title":"C","text":"<p>Abstract</p> <p>C quick reference cheat sheet that provides basic syntax and methods.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Operators</li> <li>Data Types</li> <li>C Preprocessor</li> <li>Functions</li> <li>Structures</li> <li>File Processing</li> </ul>","tags":["c","c++","cpp"]},{"location":"quick-ref/c/c-preprocessor/","title":"C Preprocessor","text":""},{"location":"quick-ref/c/c-preprocessor/#preprocessor-directives","title":"Preprocessor Directives","text":"Directive Description <code>#define</code> define a macro <code>#include</code> include a source code file <code>#undef</code> undefined macro <code>#ifdef</code> Returns true if the macro is defined <code>#ifndef</code> Returns true if the macro is not defined <code>#if</code> Compile the following code if the given condition is true <code>#else</code> Alternative to <code>#if</code> <code>#elif</code> If the <code>#if</code> condition is false, the current condition is <code>true</code> <code>#endif</code> End a <code>#if...#else</code> conditional compilation block <code>#error</code> Print an error message when standard error is encountered <code>#pragma</code> Issue special commands to the compiler using the standardized method <pre><code>// replace all MAX_ARRAY_LENGTH with 20\n#define MAX_ARRAY_LENGTH 20\n// Get stdio.h from the system library\n#include &lt;stdio.h&gt;\n// Get myheader.h in the local directory\n#include \"myheader.h\"\n#undef FILE_SIZE\n#define FILE_SIZE 42 // undefine and define to 42\n</code></pre>"},{"location":"quick-ref/c/c-preprocessor/#predefined-macros","title":"Predefined macros","text":"Macro Description <code>__DATE__</code> The current date, a character constant in the format \"MMM DD YYYY\" <code>__TIME__</code> The current time, a character constant in the format \"HH:MM:SS\" <code>__FILE__</code> This will contain the current filename, a string constant <code>__LINE__</code> This will contain the current line number, a decimal constant <code>__STDC__</code> Defined as <code>1</code> when the compiler compiles against the <code>ANSI</code> standard <p><code>ANSI C</code> defines a number of macros that you can use, but you cannot directly modify these predefined macros</p>"},{"location":"quick-ref/c/c-preprocessor/#predefined-macro-example","title":"Predefined macro example","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"File: %s\\n\", __FILE__);\n  printf(\"Date: %s\\n\", __DATE__);\n  printf(\"Time: %s\\n\", __TIME__);\n  printf(\"Line: %d\\n\", __LINE__);\n  printf(\"ANSI: %d\\n\", __STDC__);\n}\n</code></pre>"},{"location":"quick-ref/c/c-preprocessor/#macro-continuation-operator","title":"Macro continuation operator (\\)","text":"<p>A macro is usually written on a single line.</p> <pre><code>#define message_for(a, b) \\\n    printf(#a \" and \" #b \": We love you!\\n\")\n</code></pre> <p>If the macro is too long to fit on a single line, use the macro continuation operator <code>\\</code></p>"},{"location":"quick-ref/c/c-preprocessor/#string-constantization-operator","title":"String Constantization Operator (#)","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#define message_for(a, b) \\\n  printf(#a \" and \" #b \": We love you!\\n\")\n\nint main(void) {\n  message_for(Carole, Debra);\n\n  return 0;\n}\n</code></pre> <p>When the above code is compiled and executed, it produces the following result:</p> <pre><code>Carole and Debra: We love you!\n</code></pre> <p>When you need to convert a macro parameter to a string constant, use the string constant operator <code>#</code></p>"},{"location":"quick-ref/c/c-preprocessor/#tag-paste-operator","title":"tag paste operator (##)","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#define tokenpaster(n) printf (\"Token \" #n \" = %d\\n\", token##n)\n\nint main(void) {\n  int token34 = 40;\n  tokenpaster(34);\n\n  return 0;\n}\n</code></pre>"},{"location":"quick-ref/c/c-preprocessor/#defined-operator","title":"defined() operator","text":"<pre><code>#include &lt;stdio.h&gt;\n\n#if !defined (MESSAGE)\n   #define MESSAGE \"You wish!\"\n#endif\n\nint main(void) {\n  printf(\"Here is the message: %s\\n\", MESSAGE);\n\n  return 0;\n}\n</code></pre>"},{"location":"quick-ref/c/c-preprocessor/#parameterized-macros","title":"Parameterized macros","text":"<pre><code>int square(int x) {\n  return x * x;\n}\n</code></pre> <p>The macro rewrites the above code as follows:</p> <pre><code>#define square(x) ( (x) * (x) )\n</code></pre> <p>No spaces are allowed between the macro name and the opening parenthesis</p> <pre><code>#include &lt;stdio.h&gt;\n#define MAX(x,y) ( (x) &gt; (y) ? (x) : (y) )\n\nint main(void) {\n  printf(\"Max between 20 and 10 is %d\\n\", MAX(10, 20));\n\n  return 0;\n}\n</code></pre>"},{"location":"quick-ref/c/data-types/","title":"Data Types","text":""},{"location":"quick-ref/c/data-types/#basic-data-types","title":"Basic data types","text":"Data Type Size Range Description <code>char</code> 1 byte <code>\u2212128</code> ~ <code>127</code> single character/alphanumeric/ASCII <code>signed char</code> 1 byte <code>\u2212128</code> ~ <code>127</code> <code>unsigned char</code> 1 byte <code>0</code> ~ <code>255</code> <code>int</code> <code>2</code> to <code>4</code> bytes <code>\u221232,768</code> ~ <code>32,767</code> store integers <code>signed int</code> 2 bytes <code>\u221232,768</code> ~ <code>32,767</code> <code>unsigned int</code> 2 bytes <code>0</code> ~ <code>65,535</code> <code>short int</code> 2 bytes <code>\u221232,768</code> ~ <code>32,767</code> <code>signed short int</code> 2 bytes <code>\u221232,768</code> ~ <code>32,767</code> <code>unsigned short int</code> 2 bytes <code>0</code> ~ <code>65,535</code> <code>long int</code> 4 bytes <code>-2,147,483,648</code> ~ <code>2,147,483,647</code> <code>signed long int</code> 4 bytes <code>-2,147,483,648</code> ~ <code>2,147,483,647</code> <code>unsigned long int</code> 4 bytes <code>0</code> ~ <code>4,294,967,295</code> <code>float</code> 4 bytes <code>3.4E-38</code> ~ <code>3.4E+38</code> <code>double</code> 8 bytes <code>1.7E-308</code> ~ <code>1.7E+308</code> <code>long double</code> 10 bytes <code>3.4E-4932</code> ~ <code>1.1E+4932</code>"},{"location":"quick-ref/c/data-types/#data-types_1","title":"Data types","text":"<pre><code>// create variables\nint myNum = 5; // integer\nfloat myFloatNum = 5.99; // floating point number\nchar myLetter = 'D'; // string\n// High precision floating point data or numbers\ndouble myDouble = 3.2325467;\n// print output variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\nprintf(\"%lf\\n\", myDouble);\n</code></pre> Data Type Description <code>char</code> character type <code>short</code> short integer <code>int</code> integer type <code>long</code> long integer <code>float</code> single-precision floating-point type <code>double</code> double-precision floating-point type <code>void</code> no type"},{"location":"quick-ref/c/data-types/#basic-format-specifiers","title":"Basic format specifiers","text":"Format Specifier Data Type <code>%d</code> or <code>%i</code> <code>int</code> integer <code>%f</code> <code>float</code> single-precision decimal type <code>%lf</code> <code>double</code> high precision floating point data or number <code>%c</code> <code>char</code> character <code>%s</code> for <code>strings</code> strings"},{"location":"quick-ref/c/data-types/#separate-base-format-specifiers","title":"Separate base format specifiers","text":"Format Short Int Long Octal <code>%ho</code> <code>%o</code> <code>%lo</code> Decimal <code>%hd</code> <code>%d</code> <code>%ld</code> Hexadecimal <code>%hx</code> / <code>%hX</code> <code>%x</code> / <code>%X</code> <code>%lx</code> / <code>%lX</code>"},{"location":"quick-ref/c/data-types/#data-format-example","title":"Data format example","text":"<pre><code>int myNum = 5;\nfloat myFloatNum = 5.99; // floating point number\nchar myLetter = 'D';     // string\n// print output variables\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\n</code></pre>"},{"location":"quick-ref/c/file-processing/","title":"File Processing","text":""},{"location":"quick-ref/c/file-processing/#file-processing-function","title":"File processing function","text":"Function Description <code>fopen()</code> <code>open</code> a new or existing file <code>fprintf()</code> write data to <code>file</code> <code>fscanf()</code> <code>read</code> data from a file <code>fputc()</code> write a character to <code>file</code> <code>fgetc()</code> <code>read</code> a character from a file <code>fclose()</code> <code>close</code> the file <code>fseek()</code> set the file pointer to <code>the given position</code> <code>fputw()</code> Write an integer <code>to</code> a file <code>fgetw()</code> <code>read</code> an integer from a file <code>ftell()</code> returns the current <code>position</code> <code>rewind()</code> set the file pointer to the beginning of the file <p>There are many functions in the C library to <code>open</code>/<code>read</code>/<code>write</code>/<code>search</code> and <code>close</code> files</p>"},{"location":"quick-ref/c/file-processing/#open-mode-parameter","title":"Open mode parameter","text":"Mode Description <code>r</code> Open a text file in <code>read</code> mode, allowing the file to be read <code>w</code> Open a text file in <code>write</code> mode, allowing writing to the file <code>a</code> Open a text file in <code>append</code> modeIf the file does not exist, a new one will be created <code>r+</code> Open a text file in <code>read-write</code> mode, allowing reading and writing of the file <code>w+</code> Open a text file in <code>read-write</code> mode, allowing reading and writing of the file <code>a+</code> Open a text file in <code>read-write</code> mode, allowing reading and writing of the file <code>rb</code> Open a binary file in <code>read</code> mode <code>wb</code> Open binary file in <code>write</code> mode <code>ab</code> Open a binary file in <code>append</code> mode <code>rb+</code> open binary file in <code>read-write</code> mode <code>wb+</code> Open binary file in <code>read-write</code> mode <code>ab+</code> open binary file in <code>read-write</code> mode"},{"location":"quick-ref/c/file-processing/#open-the-file-fopen","title":"Open the file: fopen()","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  char ch;\n\n  fp = fopen(\"file_handle.c\", \"r\");\n\n  while (1) {\n    ch = fgetc(fp);\n    if (ch == EOF)\n      break;\n    printf(\"%c\", ch);\n  }\n  fclose(fp);\n}\n</code></pre> <p>After performing all operations on the file, the file must be closed with <code>fclose()</code></p>"},{"location":"quick-ref/c/file-processing/#write-to-file-fprintf","title":"Write to file: fprintf()","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  fp = fopen(\"file.txt\", \"w\"); // open the file\n\n  // write data to file\n  fprintf(fp, \"Hello file for fprintf..\\n\");\n  fclose(fp); // close the file\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#read-the-file-fscanf","title":"Read the file: fscanf()","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid main() {\n  FILE *fp;\n\n  char buff[255]; // Create a char array to store file data\n  fp = fopen(\"file.txt\", \"r\");\n\n  while(fscanf(fp, \"%s\", buff) != EOF) {\n    printf(\"%s \", buff);\n  }\n  fclose(fp);\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#write-to-file-fputc","title":"Write to file: fputc()","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  fp = fopen(\"file1.txt\", \"w\"); // open the file\n  fputc('a',fp); // write a single character to the file\n  fclose(fp); // close the file\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#read-the-file-fgetc","title":"Read the file: fgetc()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  char c;\n\n  clrscr();\n\n  fp = fopen(\"myfile.txt\", \"r\");\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n  fclose(fp);\n\n  getch();\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#write-to-file-fputs","title":"Write to file: fputs()","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nvoid main() {\n  FILE *fp;\n\n  clrscr();\n\n  fp = fopen(\"myfile2.txt\",\"w\");\n  fputs(\"hello c programming\",fp);\n  fclose(fp);\n\n  getch();\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#read-files-fgets","title":"Read files: fgets()","text":"<pre><code>#include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  char text[300];\n\n  clrscr();\n\n  fp = fopen(\"myfile2.txt\", \"r\");\n  printf(\"%s\", fgets(text, 200, fp));\n  fclose(fp);\n\n  getch();\n}\n</code></pre>"},{"location":"quick-ref/c/file-processing/#fseek","title":"fseek()","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid main(void) {\n  FILE *fp;\n\n  fp = fopen(\"myfile.txt\",\"w+\");\n  fputs(\"This is Book\", fp);\n\n  // Set file pointer to the given position\n  fseek(fp, 7, SEEK_SET);\n\n  fputs(\"Kenny Wong\", fp);\n  fclose(fp);\n}\n</code></pre> <p>Set the file pointer to the given position</p>"},{"location":"quick-ref/c/file-processing/#rewind","title":"rewind()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n\nvoid main() {\n  FILE *fp;\n  char c;\n\n  clrscr();\n\n  fp = fopen(\"file.txt\", \"r\");\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n\n  rewind(fp); // move the file pointer to the beginning of the file\n\n  while( (c = fgetc(fp) ) != EOF) {\n    printf(\"%c\", c);\n  }\n  fclose(fp);\n\n  getch();\n}\n// output\n// Hello World! Hello World!\n</code></pre>"},{"location":"quick-ref/c/file-processing/#ftell","title":"ftell()","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;conio.h&gt;\n\nvoid main () {\n   FILE *fp;\n   int length;\n\n   clrscr();\n\n   fp = fopen(\"file.txt\", \"r\");\n\n   fseek(fp, 0, SEEK_END);\n   length = ftell(fp); // return current position\n   fclose(fp);\n\n   printf(\"File size: %d bytes\", length);\n\n   getch();\n}\n// output\n// file size: 18 bytes\n</code></pre>"},{"location":"quick-ref/c/functions/","title":"Functions","text":""},{"location":"quick-ref/c/functions/#function-declaration-and-definition","title":"Function declaration and definition","text":"<pre><code>int main(void) {\n  printf(\"Hello World!\\n\");\n\n  return 0;\n}\n</code></pre> <p>The function consists of two parts</p> <pre><code>void myFunction() { // declaration declaration\n  // function body (code to be executed) (definition)\n}\n</code></pre> <ul> <li><code>Declaration</code> declares the function name, return type and parameters (if any)</li> <li><code>Definition</code> function body (code to execute)</li> </ul> <pre><code>// function declaration\nvoid myFunction();\n// main method\nint main() {\n  myFunction(); // --&gt; call the function\n\n  return 0;\n}\n\nvoid myFunction() {// Function definition\n  printf(\"Good evening!\\n\");\n}\n</code></pre>"},{"location":"quick-ref/c/functions/#call-function","title":"Call function","text":"<pre><code>// create function\nvoid myFunction() {\n  printf(\"Good evening!\\n\");\n}\n\nint main() {\n  myFunction(); // call the function\n  myFunction(); // can be called multiple times\n\n  return 0;\n}\n// Output -&gt; \"Good evening!\"\n// Output -&gt; \"Good evening!\"\n</code></pre>"},{"location":"quick-ref/c/functions/#function-parameters","title":"Function parameters","text":"<pre><code>void myFunction(char name[]) {\n  printf(\"Hello %s\\n\", name);\n}\n\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n\n  return 0;\n}\n// Hello Liam\n// Hello Jenny\n</code></pre>"},{"location":"quick-ref/c/functions/#multiple-parameters","title":"Multiple parameters","text":"<pre><code>void myFunction(char name[], int age) {\n  printf(\"Hi %s, you are %d years old.\\n\",name,age);\n}\nint main() {\n  myFunction(\"Liam\", 3);\n  myFunction(\"Jenny\", 14);\n\n  return 0;\n}\n// Hi Liam you are 3 years old.\n// Hi Jenny you are 14 years old.\n</code></pre>"},{"location":"quick-ref/c/functions/#return-value","title":"Return value","text":"<pre><code>int myFunction(int x) {\n  return 5 + x;\n}\n\nint main() {\n  printf(\"Result: %d\\n\", myFunction(3));\n  return 0;\n}\n// output 8 (5 + 3)\n</code></pre> <p>Two parameters</p> <pre><code>int myFunction(int x, int y) {\n  return x + y;\n}\n\nint main() {\n  printf(\"Result: %d\\n\", myFunction(5, 3));\n  // store the result in a variable\n  int result = myFunction(5, 3);\n  printf(\"Result = %d\\n\", result);\n\n  return 0;\n}\n// result: 8 (5 + 3)\n// result = 8 (5 + 3)\n</code></pre>"},{"location":"quick-ref/c/functions/#recursive-example","title":"Recursive example","text":"<pre><code>int sum(int k);\n\nint main() {\n  int result = sum(10);\n  printf(\"%d\\n\", result);\n\n  return 0;\n}\n\nint sum(int k) {\n  if (k &gt; 0) {\n    return k + sum(k -1);\n  } else {\n    return 0;\n  }\n}\n</code></pre>"},{"location":"quick-ref/c/functions/#mathematical-functions","title":"Mathematical functions","text":"<pre><code>#include &lt;math.h&gt;\n\nvoid main(void) {\n  printf(\"%f\\n\", sqrt(16)); // square root\n  printf(\"%f\\n\", ceil(1.4)); // round up (round)\n  printf(\"%f\\n\", floor(1.4)); // round down (round)\n  printf(\"%f\\n\", pow(4, 3)); // x(4) to the power of y(3)\n}\n</code></pre> <ul> <li><code>abs(x)</code> absolute value</li> <li><code>acos(x)</code> arc cosine value</li> <li><code>asin(x)</code> arc sine</li> <li><code>atan(x)</code> arc tangent</li> <li><code>cbrt(x)</code> cube root</li> <li><code>cos(x)</code> cosine</li> <li>the value of <code>exp(x)</code> Ex</li> <li><code>sin(x)</code> the sine of x</li> <li>tangent of <code>tan(x)</code> angle</li> </ul>"},{"location":"quick-ref/c/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/c/getting-started/#helloc","title":"hello.c","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello World!\\n\");\n\n  return 0;\n}\n</code></pre> <p>Compile <code>hello.c</code> file with <code>gcc</code></p> <pre><code>gcc -Wall -g hello.c -o hello\n</code></pre> <p>Run the compiled binary <code>hello</code></p> <pre><code>./hello\n</code></pre> <p>Output =&gt; Hello World!</p>"},{"location":"quick-ref/c/getting-started/#variables","title":"Variables","text":"<pre><code>int myNum = 15;\n\nint myNum2; // do not assign, then assign\nmyNum2 = 15;\n\nint myNum3 = 15; // myNum3 is 15\nmyNum3 = 10;     // myNum3 is now 10\n\nfloat myFloat = 5.99; // floating point number\nchar myLetter = 'D';  // character\n\nint x = 5;\nint y = 6;\nint sum = x + y; // add variables to sum\n\n// declare multiple variables\nint a = 5, b = 6, c = 50;\n</code></pre>"},{"location":"quick-ref/c/getting-started/#constants","title":"Constants","text":"<pre><code>const int minutesPerHour = 60;\nconst float PI = 3.14;\n</code></pre> <p>Best Practices</p> <pre><code>const int BIRTHYEAR = 1980;\n</code></pre>"},{"location":"quick-ref/c/getting-started/#comment","title":"Comment","text":"<pre><code>// this is a comment\nprintf(\"Hello World!\\n\"); // Can comment anywhere in file\n\n/*Multi-line comment, print Hello World!\nto the screen, it's awesome */\n</code></pre>"},{"location":"quick-ref/c/getting-started/#print-text","title":"Print text","text":"<pre><code>printf(\"I am learning C.\\n\");\nint testInteger = 5;\nprintf(\"Number = %d\\n\", testInteger);\n\nfloat f = 5.99; // floating point number\nprintf(\"Value = %f\\n\", f);\n\nshort a = 0b1010110; // binary number\nint b = 02713; // octal number\nlong c = 0X1DAB83; // hexadecimal number\n\n// output in octal form\nprintf(\"a=%ho, b=%o, c=%lo\\n\", a, b, c);\n// output =&gt; a=126, b=2713, c=7325603\n\n// Output in decimal form\nprintf(\"a=%hd, b=%d, c=%ld\\n\", a, b, c);\n// output =&gt; a=86, b=1483, c=1944451\n\n// output in hexadecimal form (letter lowercase)\nprintf(\"a=%hx, b=%x, c=%lx\\n\", a, b, c);\n// output =&gt; a=56, b=5cb, c=1dab83\n\n// Output in hexadecimal (capital letters)\nprintf(\"a=%hX, b=%X, c=%lX\\n\", a, b, c);\n// output =&gt; a=56, b=5CB, c=1DAB83\n</code></pre>"},{"location":"quick-ref/c/getting-started/#control-the-number-of-spaces","title":"Control the number of spaces","text":"<pre><code>int a1 = 20, a2 = 345, a3 = 700;\nint b1 = 56720, b2 = 9999, b3 = 20098;\nint c1 = 233, c2 = 205, c3 = 1;\nint d1 = 34, d2 = 0, d3 = 23;\n\nprintf(\"%-9d %-9d %-9d\\n\", a1, a2, a3);\nprintf(\"%-9d %-9d %-9d\\n\", b1, b2, b3);\nprintf(\"%-9d %-9d %-9d\\n\", c1, c2, c3);\nprintf(\"%-9d %-9d %-9d\\n\", d1, d2, d3);\n</code></pre> <p>output result</p> <pre><code>20        345       700\n56720     9999      20098\n233       205       1\n34        0         23\n</code></pre> <p>In <code>%-9d</code>, <code>d</code> means to output in <code>10</code> base, <code>9</code> means to occupy at least <code>9</code> characters width, and the width is not enough to fill with spaces, <code>-</code> means left alignment</p>"},{"location":"quick-ref/c/getting-started/#strings","title":"Strings","text":"<pre><code>char greetings[] = \"Hello World!\";\nprintf(\"%s\", greetings);\n</code></pre> <p>Access string</p> <pre><code>char greetings[] = \"Hello World!\";\nprintf(\"%c\", greetings[0]);\n</code></pre> <p>Modify string</p> <pre><code>char greetings[] = \"Hello World!\";\ngreetings[0] = 'J';\n\nprintf(\"%s\", greetings);\n// prints \"Jello World!\"\n</code></pre> <p>Another way to create a string</p> <pre><code>char greetings[] = {'H','e','l','l','\\0'};\n\nprintf(\"%s\", greetings);\n// print \"Hell!\"\n</code></pre> <p>Creating String using character pointer (String Literals)</p> <pre><code>char *greetings = \"Hello\";\nprintf(\"%s\", greetings);\n// print \"Hello!\"\n</code></pre> <p>NOTE: String literals might be stored in read-only section of memory. Modifying a string literal invokes undefined behavior. You can't modify it!</p> <p><code>C</code> does not have a String type, use <code>char</code> type and create an <code>array</code> of characters</p>"},{"location":"quick-ref/c/getting-started/#condition","title":"Condition","text":"<pre><code>int time = 20;\nif (time &lt; 18) {\n  printf(\"Goodbye!\\n\");\n} else {\n  printf(\"Good evening!\\n\");\n}\n// Output -&gt; \"Good evening!\"\nint time = 22;\nif (time &lt; 10) {\n  printf(\"Good morning!\\n\");\n} else if (time &lt; 20) {\n  printf(\"Goodbye!\\n\");\n} else {\n  printf(\"Good evening!\\n\");\n}\n// Output -&gt; \"Good evening!\"\n</code></pre>"},{"location":"quick-ref/c/getting-started/#ternary-operator","title":"Ternary operator","text":"<pre><code>int age = 20;\n(age &gt; 19) ? printf(\"Adult\\n\") : printf(\"Teenager\\n\");\n</code></pre>"},{"location":"quick-ref/c/getting-started/#switch","title":"Switch","text":"<pre><code>int day = 4;\n\nswitch (day) {\n  case 3: printf(\"Wednesday\\n\"); break;\n  case 4: printf(\"Thursday\\n\"); break;\n  default:\n    printf(\"Weekend!\\n\");\n}\n// output -&gt; \"Thursday\" (day 4)\n</code></pre>"},{"location":"quick-ref/c/getting-started/#while-loop","title":"While Loop","text":"<pre><code>int i = 0;\n\nwhile (i &lt; 5) {\n  printf(\"%d\\n\", i);\n  i++;\n}\n</code></pre> <p>NOTE: Don't forget to increment the variable used in the condition, otherwise the loop will never end and become an \"infinite loop\"!</p>"},{"location":"quick-ref/c/getting-started/#dowhile-loop","title":"Do/While Loop","text":"<pre><code>int i = 0;\n\ndo {\n  printf(\"%d\\n\", i);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"quick-ref/c/getting-started/#for-loop","title":"For Loop","text":"<pre><code>for (int i = 0; i &lt; 5; i++) {\n  printf(\"%d\\n\", i);\n}\n</code></pre>"},{"location":"quick-ref/c/getting-started/#break-out-of-the-loop-breakcontinue","title":"Break out of the loop Break/Continue","text":"<pre><code>for (int i = 0; i &lt; 10; i++) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n}\n</code></pre> <p>Break out of the loop when <code>i</code> is equal to <code>4</code></p> <pre><code>for (int i = 0; i &lt; 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}\n</code></pre> <p>Example to skip the value of <code>4</code></p>"},{"location":"quick-ref/c/getting-started/#while-break-example","title":"While Break Example","text":"<pre><code>int i = 0;\n\nwhile (i &lt; 10) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n\n  i++;\n}\n</code></pre>"},{"location":"quick-ref/c/getting-started/#while-continue-example","title":"While continue example","text":"<pre><code>int i = 0;\n\nwhile (i &lt; 10) {\n  i++;\n\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}\n</code></pre>"},{"location":"quick-ref/c/getting-started/#arrays","title":"Arrays","text":"<pre><code>int myNumbers[] = {25, 50, 75, 100};\n\nprintf(\"%d\", myNumbers[0]);\n// output 25\n</code></pre> <p>Change array elements</p> <pre><code>int myNumbers[] = {25, 50, 75, 100};\nmyNumbers[0] = 33;\n\nprintf(\"%d\", myNumbers[0]);\n</code></pre> <p>Loop through the array</p> <pre><code>int myNumbers[] = {25, 50, 75, 100};\nint i;\n\nfor (i = 0; i &lt; 4; i++) {\n  printf(\"%d\\n\", myNumbers[i]);\n}\n</code></pre> <p>Set array size</p> <pre><code>// Declare an array of four integers:\nint myNumbers[4];\n\n// add element\nmyNumbers[0] = 25;\nmyNumbers[1] = 50;\nmyNumbers[2] = 75;\nmyNumbers[3] = 100;\n</code></pre>"},{"location":"quick-ref/c/getting-started/#enumeration-enum","title":"Enumeration Enum","text":"<pre><code>enum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun };\n</code></pre> <p>Define enum variable</p> <pre><code>enum week a, b, c;\nenum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun } a, b, c;\n</code></pre> <p>With an enumeration variable, you can assign the value in the list to it</p> <pre><code>enum week { Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun };\nenum week a = Mon, b = Wed, c = Sat;\n// or\nenum week{ Mon = 1, Tues, Wed, Thurs, Fri, Sat, Sun } a = Mon, b = Wed, c = Sat;\n</code></pre>"},{"location":"quick-ref/c/getting-started/#enumerate-sample-applications","title":"Enumerate sample applications","text":"<pre><code>enum week {Mon = 1, Tues, Wed, Thurs} day;\n\nscanf(\"%d\", &amp;day);\n\nswitch(day) {\n  case Mon: puts(\"Monday\"); break;\n  case Tues: puts(\"Tuesday\"); break;\n  case Wed: puts(\"Wednesday\"); break;\n  case Thurs: puts(\"Thursday\"); break;\n  default: puts(\"Error!\");\n}\n</code></pre>"},{"location":"quick-ref/c/getting-started/#user-input","title":"User input","text":"<pre><code>// Create an integer variable to store the number we got from the user\nint myNum;\n\n// Ask the user to enter a number\nprintf(\"Enter a number: \");\n\n// Get and save the number entered by the user\nscanf(\"%d\", &amp;myNum);\n\n// Output the number entered by the user\nprintf(\"The number you entered: %d\\n\", myNum);\n</code></pre>"},{"location":"quick-ref/c/getting-started/#user-input-string","title":"User input string","text":"<pre><code>// create a string\nchar firstName[30];\n// Ask the user to enter some text\nprintf(\"Enter your name: \");\n// get and save the text\nscanf(\"%s\", &amp;firstName);\n// output text\nprintf(\"Hello %s.\\n\", firstName);\n</code></pre>"},{"location":"quick-ref/c/getting-started/#memory-address","title":"memory address","text":"<p>When a variable is created, it is assigned a memory address</p> <pre><code>int myAge = 43;\n\nprintf(\"%p\", &amp;myAge);\n// Output: 0x7ffe5367e044\n</code></pre> <p>To access it, use the reference operator (<code>&amp;</code>)</p>"},{"location":"quick-ref/c/getting-started/#create-pointer","title":"create pointer","text":"<pre><code>int myAge = 43; // an int variable\nprintf(\"%d\\n\", myAge); // output the value of myAge(43)\n\n// Output the memory address of myAge (0x7ffe5367e044)\nprintf(\"%p\\n\", &amp;myAge);\n</code></pre>"},{"location":"quick-ref/c/getting-started/#pointer-variable","title":"pointer variable","text":"<pre><code>int myAge = 43; // an int variable\nint*ptr = &amp;myAge; // pointer variable named ptr, used to store the address of myAge\n\nprintf(\"%d\\n\", myAge); // print the value of myAge (43)\n\nprintf(\"%p\\n\", &amp;myAge); // output the memory address of myAge (0x7ffe5367e044)\nprintf(\"%p\\n\", ptr); // use the pointer (0x7ffe5367e044) to output the memory address of myAge\n</code></pre>"},{"location":"quick-ref/c/getting-started/#dereference","title":"Dereference","text":"<pre><code>int myAge = 43; // variable declaration\nint*ptr = &amp;myAge; // pointer declaration\n\n// Reference: output myAge with a pointer\n// memory address (0x7ffe5367e044)\nprintf(\"%p\\n\", ptr);\n// dereference: output the value of myAge with a pointer (43)\nprintf(\"%d\\n\", *ptr);\n</code></pre>"},{"location":"quick-ref/c/operators/","title":"Operators","text":""},{"location":"quick-ref/c/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>int myNum = 100 + 50;\nint sum1 = 100 + 50; // 150 (100 + 50)\nint sum2 = sum1 + 250; // 400 (150 + 250)\nint sum3 = sum2 + sum2; // 800 (400 + 400)\n</code></pre> Operator Name Example <code>+</code> Add <code>x + y</code> <code>-</code> Subtract <code>x - y</code> <code>*</code> Multiply <code>x * y</code> <code>/</code> Divide <code>x / y</code> <code>%</code> Modulo <code>x % y</code> <code>++</code> Increment <code>++x</code> <code>--</code> Decrement <code>--x</code>"},{"location":"quick-ref/c/operators/#assignment-operator","title":"Assignment operator","text":"Example As x <code>=</code> 5 x <code>=</code> 5 x <code>+=</code> 3 x <code>=</code> x <code>+</code> 3 x <code>-=</code> 3 x <code>=</code> x <code>-</code> 3 x <code>*=</code> 3 x <code>=</code> x <code>*</code> 3 x <code>/=</code> 3 x <code>=</code> x <code>/</code> 3 x <code>%=</code> 3 x <code>=</code> x <code>%</code> 3 x <code>&amp;=</code> 3 x <code>=</code> x <code>&amp;</code> 3 x <code>|=</code> 3 x <code>=</code> x <code>|</code> 3 x <code>^=</code> 3 x <code>=</code> x <code>^</code> 3 x <code>&gt;&gt;=</code> 3 x <code>=</code> x <code>&gt;&gt;</code> 3 x <code>&lt;&lt;=</code> 3 x <code>=</code> x <code>&lt;&lt;</code> 3"},{"location":"quick-ref/c/operators/#comparison-operators","title":"Comparison Operators","text":"<pre><code>int x = 5;\nint y = 3;\n\nprintf(\"%d\", x &gt; y);\n// returns 1 (true) because 5 is greater than 3\n</code></pre> Symbol Name Example <code>==</code> equals x <code>==</code> y <code>!=</code> not equal to x <code>!=</code> y <code>&gt;</code> greater than x <code>&gt;</code> y <code>&lt;</code> less than x <code>&lt;</code> y <code>&gt;=</code> greater than or equal to x <code>&gt;=</code> y <code>&lt;=</code> less than or equal to x <code>&lt;=</code> y <p>Comparison operators are used to compare two values</p>"},{"location":"quick-ref/c/operators/#logical-operators","title":"Logical Operators","text":"Symbol Name Description Example <code>&amp;&amp;</code> <code>and</code> logical returns true if both statements are true <code>x &lt; 5 &amp;&amp; x &lt; 10</code> <code>||</code> <code>or</code> logical returns true if one of the statements is true <code>x &lt; 5 || x &lt; 4</code> <code>!</code> <code>not</code> logical Invert result, return false if true <code>!(x &lt; 5 &amp;&amp; x &lt; 10)</code>"},{"location":"quick-ref/c/operators/#operator-examples","title":"Operator Examples","text":"<pre><code>unsigned int a = 60; /*60 = 0011 1100 */\nunsigned int b = 13; /*13 = 0000 1101 */\nint c = 0;\n\nc = a &amp; b; /*12 = 0000 1100 */\nprintf(\"Line 1 -the value of c is %d\\n\", c);\n\nc = a | b; /*61 = 0011 1101 */\nprintf(\"Line 2 -the value of c is %d\\n\", c);\nc = a ^ b; /*49 = 0011 0001 */\nprintf(\"Line 3 -the value of c is %d\\n\", c);\nc = ~a; /*-61 = 1100 0011 */\nprintf(\"Line 4 -The value of c is %d\\n\", c);\nc = a &lt;&lt; 2; /*240 = 1111 0000 */\nprintf(\"Line 5 -the value of c is %d\\n\", c);\nc = a &gt;&gt; 2; /*15 = 0000 1111 */\nprintf(\"Line 6 -The value of c is %d\\n\", c);\n</code></pre>"},{"location":"quick-ref/c/operators/#bitwise-operators","title":"Bitwise operators","text":"Operator Description Instance <code>&amp;</code> Bitwise AND operation, \"AND\" operation by binary digits <code>(A &amp; B)</code> will get <code>12</code> which is 0000 1100 <code>|</code> Bitwise OR operator, \"or\" operation by binary digit <code>(A | B)</code> will get<code>61</code> which is 0011 1101 <code>^</code> XOR operator, perform \"XOR\" operation by binary digits <code>(A ^ B)</code> will get <code>49</code> which is 0011 0001 <code>~</code> Inversion operator, perform \"inversion\" operation by binary bit <code>(~A)</code> will get <code>-61</code> which is 1100 0011 <code>&lt;&lt;</code> binary left shift operator <code>A &lt;&lt; 2</code> will get <code>240</code> which is 1111 0000 <code>&gt;&gt;</code> binary right shift operator <code>A &gt;&gt; 2</code> will get <code>15</code> which is 0000 1111"},{"location":"quick-ref/c/structures/","title":"Structures","text":""},{"location":"quick-ref/c/structures/#create-structure","title":"Create structure","text":"<pre><code>struct MyStructure { // structure declaration\n  int myNum; // member (int variable)\n  char myLetter; // member (char variable)\n}; // end the structure with a semicolon\n</code></pre> <p>Create a struct variable called <code>s1</code></p> <pre><code>struct myStructure {\n  int myNum;\n  char myLetter;\n};\n\nint main() {\n  struct myStructure s1;\n\n  return 0;\n}\n</code></pre>"},{"location":"quick-ref/c/structures/#strings-in-the-structure","title":"Strings in the structure","text":"<pre><code>struct myStructure {\n  int myNum;\n  char myLetter;\n  char myString[30]; // String\n};\n\nint main() {\n  struct myStructure s1;\n  strcpy(s1. myString, \"Some text\");\n  // print value\n  printf(\"My string: %s\\n\", s1.myString);\n\n  return 0;\n}\n</code></pre> <p>Assigning values to strings using the <code>strcpy</code> function</p>"},{"location":"quick-ref/c/structures/#accessing-structure-members","title":"Accessing structure members","text":"<pre><code>// create a structure called myStructure\nstruct myStructure {\n  int myNum;\n  char myLetter;\n};\n\nint main() {\n  // Create a structure variable called myStructure called s1\n  struct myStructure s1;\n  // Assign values \u200b\u200bto the members of s1\n  s1.myNum = 13;\n  s1.myLetter = 'B';\n\n  // Create a structure variable of myStructure called s2\n  // and assign it a value\n  struct myStructure s2 = {13, 'B'};\n  // print value\n  printf(\"My number: %d\\n\", s1.myNum);\n  printf(\"My letter: %c\\n\", s1.myLetter);\n\n  return 0;\n}\n</code></pre> <p>Create different structure variables</p> <pre><code>struct myStructure s1;\nstruct myStructure s2;\n// Assign values \u200b\u200bto different structure variables\ns1.myNum = 13;\ns1.myLetter = 'B';\n\ns2.myNum = 20;\ns2.myLetter = 'C';\n</code></pre>"},{"location":"quick-ref/c/structures/#copy-structure","title":"Copy structure","text":"<pre><code>struct myStructure s1 = {\n  13, 'B', \"Some text\"\n};\n\nstruct myStructure s2;\ns2 = s1;\n</code></pre> <p>In the example, the value of <code>s1</code> is copied to <code>s2</code></p>"},{"location":"quick-ref/c/structures/#modify-value","title":"Modify value","text":"<pre><code>// Create a struct variable and assign it a value\nstruct myStructure s1 = {\n  13, 'B'\n};\n// modify the value\ns1.myNum = 30;\ns1.myLetter = 'C';\n// print value\nprintf(\"%d %c\",\n    s1.myNum,\n    s1.myLetter);\n</code></pre>"},{"location":"quick-ref/cpp/","title":"C++","text":"<p>Abstract</p> <p>C++ quick reference cheat sheet that provides basic syntax and methods.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Arrays</li> <li>Conditionals</li> <li>Loops</li> <li>Functions</li> <li>Classes and Objects</li> <li>Preprocessor</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["c++","cpp","c"]},{"location":"quick-ref/cpp/also-see/","title":"Also See","text":"<ul> <li> <p>C++ Infographics &amp; Cheat Sheets (hackingcpp.com)</p> </li> <li> <p>C++ reference (cppreference.com)</p> </li> <li>C++ Language Tutorials (cplusplus.com)</li> </ul>"},{"location":"quick-ref/cpp/arrays/","title":"Arrays","text":""},{"location":"quick-ref/cpp/arrays/#declaration","title":"Declaration","text":"<pre><code>std::array&lt;int, 3&gt; marks; // Definition\nmarks[0] = 92;\nmarks[1] = 97;\nmarks[2] = 98;\n\n// Define and initialize\nstd::array&lt;int, 3&gt; = {92, 97, 98};\n\n// With empty members\nstd::array&lt;int, 3&gt; marks = {92, 97};\nstd::cout &lt;&lt; marks[2]; // Outputs: 0\n</code></pre>"},{"location":"quick-ref/cpp/arrays/#manipulation","title":"Manipulation","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 92  | 97  | 98  | 99  | 98  | 94  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n   0     1     2     3     4     5\n</code></pre> <pre><code>std::array&lt;int, 6&gt; marks = {92, 97, 98, 99, 98, 94};\n\n// Print first element\nstd::cout &lt;&lt; marks[0];\n\n// Change 2nd element to 99\nmarks[1] = 99;\n\n// Take input from the user\nstd::cin &gt;&gt; marks[2];\n</code></pre>"},{"location":"quick-ref/cpp/arrays/#displaying","title":"Displaying","text":"<pre><code>char ref[5] = {'R', 'e', 'f'};\n\n// Range based for loop\nfor (const int &amp;n : ref) {\n    std::cout &lt;&lt; std::string(1, n);\n}\n\n// Traditional for loop\nfor (int i = 0; i &lt; sizeof(ref); ++i) {\n    std::cout &lt;&lt; ref[i];\n}\n</code></pre>"},{"location":"quick-ref/cpp/arrays/#multidimensional","title":"Multidimensional","text":"<pre><code>     j0   j1   j2   j3   j4   j5\n   \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>int x[2][6] = {\n    {1,2,3,4,5,6}, {6,5,4,3,2,1}\n};\nfor (int i = 0; i &lt; 2; ++i) {\n    for (int j = 0; j &lt; 6; ++j) {\n        std::cout &lt;&lt; x[i][j] &lt;&lt; \" \";\n    }\n}\n// Outputs: 1 2 3 4 5 6 6 5 4 3 2 1\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/","title":"Classes and Objects","text":""},{"location":"quick-ref/cpp/classes-and-objects/#defining-a-class","title":"Defining a Class","text":"<pre><code>class MyClass {\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#creating-an-object","title":"Creating an Object","text":"<pre><code>MyClass myObj;  // Create an object of MyClass\n\nmyObj.myNum = 15;          // Set the value of myNum to 15\nmyObj.myString = \"Hello\";  // Set the value of myString to \"Hello\"\n\ncout &lt;&lt; myObj.myNum &lt;&lt; endl;         // Output 15\ncout &lt;&lt; myObj.myString &lt;&lt; endl;      // Output \"Hello\"\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#constructors","title":"Constructors","text":"<pre><code>class MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\ncout &lt;&lt; myObj.myNum &lt;&lt; endl;         // Output 0\ncout &lt;&lt; myObj.myString &lt;&lt; endl;      // Output \"\"\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#destructors","title":"Destructors","text":"<pre><code>class MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n    ~MyClass() {  // Destructor\n      cout &lt;&lt; \"Object destroyed.\" &lt;&lt; endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\n// Code here...\n\n// Object is destroyed automatically when the program exits the scope\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#class-methods","title":"Class Methods","text":"<pre><code>class MyClass {\n  public:\n    int myNum;\n    string myString;\n    void myMethod() {  // Method/function defined inside the class\n      cout &lt;&lt; \"Hello World!\" &lt;&lt; endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\nmyObj.myMethod();  // Call the method\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#access-modifiers","title":"Access Modifiers","text":"<pre><code>class MyClass {\n  public:     // Public access specifier\n    int x;    // Public attribute\n  private:    // Private access specifier\n    int y;    // Private attribute\n  protected:  // Protected access specifier\n    int z;    // Protected attribute\n};\n\nMyClass myObj;\nmyObj.x = 25;  // Allowed (public)\nmyObj.y = 50;  // Not allowed (private)\nmyObj.z = 75;  // Not allowed (protected)\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#getters-and-setters","title":"Getters and Setters","text":"<pre><code>class MyClass {\n  private:\n    int myNum;\n  public:\n    void setMyNum(int num) {  // Setter\n      myNum = num;\n    }\n    int getMyNum() {  // Getter\n      return myNum;\n    }\n};\n\nMyClass myObj;\nmyObj.setMyNum(15);  // Set the value of myNum to 15\ncout &lt;&lt; myObj.getMyNum() &lt;&lt; endl;  // Output 15\n</code></pre>"},{"location":"quick-ref/cpp/classes-and-objects/#inheritance","title":"Inheritance","text":"<pre><code>class Vehicle {\n  public:\n    string brand = \"Ford\";\n    void honk() {\n      cout &lt;&lt; \"Tuut, tuut!\" &lt;&lt; endl;\n    }\n};\n\nclass Car : public Vehicle {\n  public:\n    string model = \"Mustang\";\n};\n\nCar myCar;\nmyCar.honk();  // Output \"Tuut, tuut!\"\ncout &lt;&lt; myCar.brand + \" \" + myCar.model &lt;&lt; endl;  // Output \"Ford Mustang\"\n</code></pre>"},{"location":"quick-ref/cpp/conditionals/","title":"Conditionals","text":""},{"location":"quick-ref/cpp/conditionals/#if-clause","title":"If Clause","text":"<pre><code>if (a == 10) {\n    // do something\n}\n</code></pre> <pre><code>int number = 16;\n\nif (number % 2 == 0)\n{\n    std::cout &lt;&lt; \"even\";\n}\nelse\n{\n    std::cout &lt;&lt; \"odd\";\n}\n\n// Outputs: even\n</code></pre>"},{"location":"quick-ref/cpp/conditionals/#else-if-statement","title":"Else if Statement","text":"<pre><code>int score = 99;\nif (score == 100) {\n    std::cout &lt;&lt; \"Superb\";\n}\nelse if (score &gt;= 90) {\n    std::cout &lt;&lt; \"Excellent\";\n}\nelse if (score &gt;= 80) {\n    std::cout &lt;&lt; \"Very Good\";\n}\nelse if (score &gt;= 70) {\n    std::cout &lt;&lt; \"Good\";\n}\nelse if (score &gt;= 60)\n    std::cout &lt;&lt; \"OK\";\nelse\n    std::cout &lt;&lt; \"What?\";\n</code></pre>"},{"location":"quick-ref/cpp/conditionals/#operators","title":"Operators","text":""},{"location":"quick-ref/cpp/conditionals/#relational-operators","title":"Relational Operators","text":"<code>a == b</code> a is equal to b <code>a != b</code> a is NOT equal to b <code>a &lt; b</code> a is less than b <code>a &gt; b</code> a is greater b <code>a &lt;= b</code> a is less than or equal to b <code>a &gt;= b</code> a is greater or equal to b"},{"location":"quick-ref/cpp/conditionals/#assignment-operators","title":"Assignment Operators","text":"Example Equivalent to <code>a += b</code> Aka a = a + b <code>a -= b</code> Aka a = a - b <code>a *= b</code> Aka a = a * b <code>a /= b</code> Aka a = a / b <code>a %= b</code> Aka a = a % b"},{"location":"quick-ref/cpp/conditionals/#logical-operators","title":"Logical Operators","text":"Example Meaning <code>exp1 &amp;&amp; exp2</code> Both are true (AND) <code>exp1 || exp2</code> Either is true (OR) <code>!exp</code> <code>exp</code> is false (NOT)"},{"location":"quick-ref/cpp/conditionals/#bitwise-operators","title":"Bitwise Operators","text":"Operator Description <code>a &amp; b</code> Binary AND <code>a | b</code> Binary OR <code>a ^ b</code> Binary XOR <code>~ a</code> Binary One's Complement <code>a &lt;&lt; b</code> Binary Shift Left <code>a &gt;&gt; b</code> Binary Shift Right"},{"location":"quick-ref/cpp/conditionals/#ternary-operator","title":"Ternary Operator","text":"<pre><code>           \u250c\u2500\u2500 True \u2500\u2500\u2510\nResult = Condition ? Exp1 : Exp2;\n           \u2514\u2500\u2500\u2500\u2500\u2500 False \u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>int x = 3, y = 5, max;\nmax = (x &gt; y) ? x : y;\n\n// Outputs: 5\nstd::cout &lt;&lt; max &lt;&lt; std::endl;\n</code></pre> <pre><code>int x = 3, y = 5, max;\nif (x &gt; y) {\n    max = x;\n} else {\n    max = y;\n}\n// Outputs: 5\nstd::cout &lt;&lt; max &lt;&lt; std::endl;\n</code></pre>"},{"location":"quick-ref/cpp/conditionals/#switch-statement","title":"Switch Statement","text":"<pre><code>int num = 2;\nswitch (num) {\n    case 0:\n        std::cout &lt;&lt; \"Zero\";\n        break;\n    case 1:\n        std::cout &lt;&lt; \"One\";\n        break;\n    case 2:\n        std::cout &lt;&lt; \"Two\";\n        break;\n    case 3:\n        std::cout &lt;&lt; \"Three\";\n        break;\n    default:\n        std::cout &lt;&lt; \"What?\";\n        break;\n}\n</code></pre>"},{"location":"quick-ref/cpp/functions/","title":"Functions","text":""},{"location":"quick-ref/cpp/functions/#arguments-returns","title":"Arguments &amp; Returns","text":"<pre><code>#include &lt;iostream&gt;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout &lt;&lt; add(10, 20);\n}\n</code></pre> <p><code>add</code> is a function taking 2 ints and returning int</p>"},{"location":"quick-ref/cpp/functions/#overloading","title":"Overloading","text":"<pre><code>void fun(string a, string b) {\n    std::cout &lt;&lt; a + \" \" + b;\n}\nvoid fun(string a) {\n    std::cout &lt;&lt; a;\n}\nvoid fun(int a) {\n    std::cout &lt;&lt; a;\n}\n</code></pre>"},{"location":"quick-ref/cpp/functions/#built-in-functions","title":"Built-in Functions","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt; // import library\n\nint main() {\n    // sqrt() is from cmath\n    std::cout &lt;&lt; sqrt(9);\n}\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/cpp/getting-started/#hellocpp","title":"hello.cpp","text":"<pre><code>#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; \"Hello CheatSheets\\n\";\n    return 0;\n}\n</code></pre> <p>Compiling and running</p> <p>```shell script $ g++ hello.cpp -o hello $ ./hello Hello CheatSheets <pre><code>## Variables\n\n```cpp\nint number = 5;       // Integer\nfloat f = 0.95;       // Floating number\ndouble PI = 3.14159;  // Floating number\nchar yes = 'Y';       // Character\nstd::string s = \"ME\"; // String (text)\nbool isRight = true;  // Boolean\n\n// Constants\nconst float RATE = 0.8;\n</code></pre></p> <pre><code>int age {25};         // Since C++11\nstd::cout &lt;&lt; age;     // Print 25\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#primitive-data-types","title":"Primitive Data Types","text":"Data Type Size Range <code>int</code> 4 bytes -2^31^ ^to^ 2^31^-1 <code>float</code> 4 bytes N/A <code>double</code> 8 bytes N/A <code>char</code> 1 byte -128 ^to^ 127 <code>bool</code> 1 byte true / false <code>void</code> N/A N/A <code>wchar_t</code> 2 ^or^ 4 bytes 1 wide character"},{"location":"quick-ref/cpp/getting-started/#user-input","title":"User Input","text":"<pre><code>int num;\n\nstd::cout &lt;&lt; \"Type a number: \";\nstd::cin &gt;&gt; num;\n\nstd::cout &lt;&lt; \"You entered \" &lt;&lt; num;\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#swap","title":"Swap","text":"<pre><code>int a = 5, b = 10;\nstd::swap(a, b);\n\n// Outputs: a=10, b=5\nstd::cout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; \", b=\" &lt;&lt; b;\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#comments","title":"Comments","text":"<pre><code>// A single one line comment in C++\n\n/* This is a multiple line comment\n   in C++ */\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#if-statement","title":"If statement","text":"<pre><code>if (a == 10) {\n    // do something\n}\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#loops","title":"Loops","text":"<pre><code>for (int i = 0; i &lt; 10; i++) {\n    std::cout &lt;&lt; i &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#functions","title":"Functions","text":"<pre><code>#include &lt;iostream&gt;\n\nvoid hello(); // Declaring\n\nint main() {  // main function\n    hello();    // Calling\n}\n\nvoid hello() { // Defining\n    std::cout &lt;&lt; \"Hello CheatSheets!\\n\";\n}\n</code></pre>"},{"location":"quick-ref/cpp/getting-started/#references","title":"References","text":"<pre><code>int i = 1;\nint&amp; ri = i; // ri is a reference to i\n\nri = 2; // i is now changed to 2\nstd::cout &lt;&lt; \"i=\" &lt;&lt; i;\n\ni = 3;   // i is now changed to 3\nstd::cout &lt;&lt; \"ri=\" &lt;&lt; ri;\n</code></pre> <p><code>ri</code> and <code>i</code> refer to the same memory location.</p>"},{"location":"quick-ref/cpp/getting-started/#namespaces","title":"Namespaces","text":"<pre><code>#include &lt;iostream&gt;\nnamespace ns1 {int val(){return 5;}}\nint main()\n{\n    std::cout &lt;&lt; ns1::val();\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nnamespace ns1 {int val(){return 5;}}\nusing namespace ns1;\nusing namespace std;\nint main()\n{\n    cout &lt;&lt; val();\n}\n</code></pre> <p>Namespaces allow global identifiers under a name</p>"},{"location":"quick-ref/cpp/loops/","title":"Loops","text":""},{"location":"quick-ref/cpp/loops/#while","title":"While","text":"<pre><code>int i = 0;\nwhile (i &lt; 6) {\n    std::cout &lt;&lt; i++;\n}\n\n// Outputs: 012345\n</code></pre>"},{"location":"quick-ref/cpp/loops/#do-while","title":"Do-while","text":"<pre><code>int i = 1;\ndo {\n    std::cout &lt;&lt; i++;\n} while (i &lt;= 5);\n\n// Outputs: 12345\n</code></pre>"},{"location":"quick-ref/cpp/loops/#continue-statements","title":"Continue statements","text":"<pre><code>for (int i = 0; i &lt; 10; i++) {\n    if (i % 2 == 0) {\n        continue;\n    }\n    std::cout &lt;&lt; i;\n} // Outputs: 13579\n</code></pre>"},{"location":"quick-ref/cpp/loops/#infinite-loop","title":"Infinite loop","text":"<pre><code>while (true) { // true or 1\n    std::cout &lt;&lt; \"infinite loop\";\n}\n</code></pre> <pre><code>for (;;) {\n    std::cout &lt;&lt; \"infinite loop\";\n}\n</code></pre> <pre><code>for(int i = 1; i &gt; 0; i++) {\n    std::cout &lt;&lt; \"infinite loop\";\n}\n</code></pre>"},{"location":"quick-ref/cpp/loops/#for_each-since-c11","title":"for_each (Since C++11)","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n\nint main()\n{\n    auto print = [](int num) { std::cout &lt;&lt; num &lt;&lt; std::endl; };\n\n    std::array&lt;int, 4&gt; arr = {1, 2, 3, 4};\n    std::for_each(arr.begin(), arr.end(), print);\n    return 0;\n}\n</code></pre>"},{"location":"quick-ref/cpp/loops/#range-based-since-c11","title":"Range-based (Since C++11)","text":"<pre><code>for (int n : {1, 2, 3, 4, 5}) {\n    std::cout &lt;&lt; n &lt;&lt; \" \";\n}\n// Outputs: 1 2 3 4 5\n</code></pre> <pre><code>std::string hello = \"CheatSheets.zip\";\nfor (char c: hello)\n{\n    std::cout &lt;&lt; c &lt;&lt; \" \";\n}\n// Outputs: Q u i c k R e f . M E\n</code></pre>"},{"location":"quick-ref/cpp/loops/#break-statements","title":"Break statements","text":"<pre><code>int password, times = 0;\nwhile (password != 1234) {\n    if (times++ &gt;= 3) {\n        std::cout &lt;&lt; \"Locked!\\n\";\n        break;\n    }\n    std::cout &lt;&lt; \"Password: \";\n    std::cin &gt;&gt; password; // input\n}\n</code></pre>"},{"location":"quick-ref/cpp/loops/#several-variations","title":"Several variations","text":"<pre><code>for (int i = 0, j = 2; i &lt; 3; i++, j--){\n    std::cout &lt;&lt; \"i=\" &lt;&lt; i &lt;&lt; \",\";\n    std::cout &lt;&lt; \"j=\" &lt;&lt; j &lt;&lt; \";\";\n}\n// Outputs: i=0,j=2;i=1,j=1;i=2,j=0;\n</code></pre>"},{"location":"quick-ref/cpp/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/cpp/miscellaneous/#escape-sequences","title":"Escape Sequences","text":"Escape Sequences Characters <code>\\b</code> Backspace <code>\\f</code> Form feed <code>\\n</code> Newline <code>\\r</code> Return <code>\\t</code> Horizontal tab <code>\\v</code> Vertical tab <code>\\\\</code> Backslash <code>\\'</code> Single quotation mark <code>\\\"</code> Double quotation mark <code>\\?</code> Question mark <code>\\0</code> Null Character"},{"location":"quick-ref/cpp/miscellaneous/#keywords","title":"Keywords","text":"<ul> <li>alignas</li> <li>alignof</li> <li>and</li> <li>and_eq</li> <li>asm</li> <li>atomic_cancel</li> <li>atomic_commit</li> <li>atomic_noexcept</li> <li>auto</li> <li>bitand</li> <li>bitor</li> <li>bool</li> <li>break</li> <li>case</li> <li>catch</li> <li>char</li> <li>char8_t</li> <li>char16_t</li> <li>char32_t</li> <li>class</li> <li>compl</li> <li>concept</li> <li>const</li> <li>consteval</li> <li>constexpr</li> <li>constinit</li> <li>const_cast</li> <li>continue</li> <li>co_await</li> <li>co_return</li> <li>co_yield</li> <li>decltype</li> <li>default</li> <li>delete</li> <li>do</li> <li>double</li> <li>dynamic_cast</li> <li>else</li> <li>enum</li> <li>explicit</li> <li>export</li> <li>extern</li> <li>false</li> <li>float</li> <li>for</li> <li>friend</li> <li>goto</li> <li>if</li> <li>inline</li> <li>int</li> <li>long</li> <li>mutable</li> <li>namespace</li> <li>new</li> <li>noexcept</li> <li>not</li> <li>not_eq</li> <li>nullptr</li> <li>operator</li> <li>or</li> <li>or_eq</li> <li>private</li> <li>protected</li> <li>public</li> <li>reflexpr</li> <li>register</li> <li>reinterpret_cast</li> <li>requires</li> <li>return</li> <li>short</li> <li>signed</li> <li>sizeof</li> <li>static</li> <li>static_assert</li> <li>static_cast</li> <li>struct</li> <li>switch</li> <li>synchronized</li> <li>template</li> <li>this</li> <li>thread_local</li> <li>throw</li> <li>true</li> <li>try</li> <li>typedef</li> <li>typeid</li> <li>typename</li> <li>union</li> <li>unsigned</li> <li>using</li> <li>virtual</li> <li>void</li> <li>volatile</li> <li>wchar_t</li> <li>while</li> <li>xor</li> <li>xor_eq</li> <li>final</li> <li>override</li> <li>transaction_safe</li> <li>transaction_safe_dynamic</li> </ul>"},{"location":"quick-ref/cpp/miscellaneous/#preprocessor","title":"Preprocessor","text":"<ul> <li>if</li> <li>elif</li> <li>else</li> <li>endif</li> <li>ifdef</li> <li>ifndef</li> <li>define</li> <li>undef</li> <li>include</li> <li>line</li> <li>error</li> <li>pragma</li> <li>defined</li> <li>__has_include</li> <li>__has_cpp_attribute</li> <li>export</li> <li>import</li> <li>module</li> </ul>"},{"location":"quick-ref/cpp/preprocessor/","title":"Preprocessor","text":""},{"location":"quick-ref/cpp/preprocessor/#preprocessor_1","title":"Preprocessor","text":"<ul> <li>if</li> <li>elif</li> <li>else</li> <li>endif</li> <li>ifdef</li> <li>ifndef</li> <li>define</li> <li>undef</li> <li>include</li> <li>line</li> <li>error</li> <li>pragma</li> <li>defined</li> <li>__has_include</li> <li>__has_cpp_attribute</li> <li>export</li> <li>import</li> <li>module</li> </ul> <p>{.marker-none .cols-2}</p>"},{"location":"quick-ref/cpp/preprocessor/#includes","title":"Includes","text":"<pre><code>#include \"iostream\"\n#include &lt;iostream&gt;\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#defines","title":"Defines","text":"<pre><code>#define FOO\n#define FOO \"hello\"\n\n#undef FOO\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#if","title":"If","text":"<pre><code>#ifdef DEBUG\n  console.log('hi');\n#elif defined VERBOSE\n  ...\n#else\n  ...\n#endif\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#error","title":"Error","text":"<pre><code>#if VERSION == 2.0\n  #error Unsupported\n  #warning Not really supported\n#endif\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#macro","title":"Macro","text":"<pre><code>#define DEG(x) ((x) * 57.29)\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#token-concat","title":"Token concat","text":"<pre><code>#define DST(name) name##_s name##_t\nDST(object);   #=&gt; object_s object_t;\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#stringification","title":"Stringification","text":"<pre><code>#define STR(name) #name\nchar * a = STR(object);   #=&gt; char * a = \"object\";\n</code></pre>"},{"location":"quick-ref/cpp/preprocessor/#file-and-line","title":"file and line","text":"<pre><code>#define LOG(msg) console.log(__FILE__, __LINE__, msg)\n#=&gt; console.log(\"file.txt\", 3, \"hey\")\n</code></pre>"},{"location":"quick-ref/dart/","title":"Dart","text":"<p>Abstract</p> <p>A Dart cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Operators</li> <li>Control Flows : Conditionals</li> <li>Control Flows : Loops</li> <li>Collections</li> <li>Functions</li> <li>Classes and Objects</li> <li>Implicit Interfaces</li> <li>Exceptions</li> <li>Futures</li> <li>Extensions</li> <li>Miscellaneous</li> </ul>","tags":["dart","flutter","mobile"]},{"location":"quick-ref/dart/classes-and-objects/","title":"Classes and objects","text":""},{"location":"quick-ref/dart/classes-and-objects/#class","title":"Class","text":"<pre><code>class Cat {\n    String name;\n\n    // method\n    void voice(){\n        print(\"Meow\");\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#object","title":"Object","text":"<pre><code>// instance of a class\n// below myCat is Object of class Cat\n\nvoid main(){\n    Cat myCat = Cat();\n    myCat.name = \"Kitty\";\n    myCat.voice(); // Prints: Meow\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#constructors","title":"Constructors","text":"<pre><code>class Cat {\n    String name;\n    Cat(this.name);\n}\nvoid main(){\n    Cat myCat = Cat(\"Kitty\");\n    print(myCat.name); // Prints: Kitty\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#abstract-classes","title":"Abstract Classes","text":"<pre><code>// abstract class\u2014a class that can\u2019t be instantiated\n// This class is declared abstract and thus can't be instantiated.\nabstract class AbstractContainer {\n  // Define constructors, fields, methods...\n\n  void updateChildren(); // Abstract method.\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#getters-setters","title":"Getters Setters","text":"<pre><code>// provide read and write access to an object\u2019s properties\nclass Cat {\n    String name;\n\n    // getter\n    String get catName {\n        return name;\n    }\n\n    // setter\n    void set catName(String name){\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/collections/","title":"Collections","text":""},{"location":"quick-ref/dart/collections/#lists","title":"Lists","text":"<pre><code>// ordered group of objects\nvar list = [1, 2, 3];\n\nprint(list.length); //Print: 3\nprint(list[1]); //Print: 2\n\n// other ways of list declaration and initializations\n\nList&lt;String&gt; cities = &lt;String&gt;[\"New York\", \"Mumbai\", \"Tokyo\"];\n\n// To create a list that\u2019s a compile-time constant\nconst constantCities = const [\"New York\", \"Mumbai\", \"Tokyo\"];\n</code></pre>"},{"location":"quick-ref/dart/collections/#sets","title":"Sets","text":"<pre><code>// A set in Dart is an unordered collection of unique items.\nvar halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\n\n// to create an empty set\nvar names = &lt;String&gt;{};\nSet&lt;String&gt; names = {}; // This works, too.\n//var names = {}; // Creates a map, not a set.\n</code></pre>"},{"location":"quick-ref/dart/collections/#maps","title":"Maps","text":"<pre><code>// a map is an object that associates keys and values\nvar person = Map&lt;String, String&gt;();\n// To initialize the map, do this:\n\nperson['lastName'] = 'Tesla';\n\nprint(person); //Print: {firstName: Nicola, lastName: Tesla}\nprint(person['lastName']); //Print: Tesla\n\n\nvar nobleGases = {\n  // Key: Value\n  2: 'helium',\n  10: 'neon',\n  18: 'argon',\n};\n</code></pre>"},{"location":"quick-ref/dart/control-flows-conditionals/","title":"Control flows : conditionals","text":""},{"location":"quick-ref/dart/control-flows-conditionals/#if-and-else-if","title":"if and else if","text":"<pre><code>if(age &lt; 18){\n    print(\"Teen\");\n} else if( age &gt; 18 &amp;&amp; age &lt;60){\n    print(\"Adult\");\n} else {\n    print(\"Old\");\n}\n</code></pre>"},{"location":"quick-ref/dart/control-flows-conditionals/#switch-case","title":"switch case","text":"<pre><code>enum Pet {dog, cat}\nPet myPet = Pet.dog;\nswitch(myPet){\n    case Pet.dog:\n        print('My Pet is Dog.');\n        break;\n    case Pet.cat:\n        print('My Pet is Cat.');\n        break;\n    default:\n        print('I don\\'t have a Pet');\n}\n// Prints: My Pet is Dog.\n</code></pre>"},{"location":"quick-ref/dart/control-flows-loops/","title":"Control flows : loops","text":""},{"location":"quick-ref/dart/control-flows-loops/#while-loop","title":"while loop","text":"<pre><code>while (!dreamsAchieved) {\n  workHard();\n}\n</code></pre> <p>while loop check condition before iteration of the loop</p>"},{"location":"quick-ref/dart/control-flows-loops/#do-while-loop","title":"do-while loop","text":"<pre><code>do {\n  workHard();\n} while (!dreamsAchieved);\n</code></pre> <p>do-while loop verifies the condition after the execution of the statements inside the loop</p>"},{"location":"quick-ref/dart/control-flows-loops/#for-loop","title":"for loop","text":"<pre><code>for(int i=0; i&lt; 10; i++){\n    print(i);\n}\n\nvar numbers = [1,2,3];\n// for-in loop for lists\nfor(var number in numbers){\n    print(number);\n}\n</code></pre>"},{"location":"quick-ref/dart/control-flows-loops/#for-in-loop","title":"for in loop","text":"<pre><code>  // Define a list of numbers\n  var numbers = [1, 2, 3, 4, 5];\n\n  // Use a for-in loop to iterate over the list\n  for (var number in numbers) {\n    print(number);\n  }\n\n  // Define a list of strings\n  var fruits = ['Apple', 'Banana', 'Cherry'];\n\n  // Use a for-in loop to iterate over the list\n  for (var fruit in fruits) {\n    print(fruit);\n  }\n</code></pre>"},{"location":"quick-ref/dart/exceptions/","title":"Exceptions","text":""},{"location":"quick-ref/dart/exceptions/#throw","title":"Throw","text":"<pre><code>// throws or raises and exception\nthrow IntegerDivisionByZeroException();\n\n// You can also throw arbitrary objects\nthrow \"Product out of stock!\";\n</code></pre>"},{"location":"quick-ref/dart/exceptions/#catch","title":"Catch","text":"<pre><code>try {\n    int c = 3/0;\n    print(c);\n} on IntegerDivisionByZeroException {\n    // A specific exception\n    print('Can not divide integer by 0.')\n} on Exception catch (e) {\n    // Anything else that is an exception\n    print('Unknown exception: $e');\n} catch (e) {\n    // No specified type, handles all\n    print('Something really unknown: $e');\n}\n</code></pre>"},{"location":"quick-ref/dart/exceptions/#finally","title":"Finally","text":"<pre><code>// To ensure that some code runs whether or not an exception is thrown\ntry {\n  cookFood();\n} catch (e) {\n  print('Error: $e'); // Handle the exception first.\n} finally {\n  cleanKitchen(); // Then clean up.\n}\n</code></pre>"},{"location":"quick-ref/dart/extensions/","title":"Extensions","text":""},{"location":"quick-ref/dart/extensions/#why-use-extensions","title":"Why use extensions?","text":"<pre><code>// Extensions allow you to add methods to existing\n// classes without modifying them.\n\n// Instead of defining a util class.\nclass StringUtil {\n  static bool isValidEmail(String str) {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(str);\n  }\n}\n\nprint(StringUtil.isValidEmail('someString')); //Print: false\n\n// We can define an extension which will be applied\n// on a certain type.\n\nextension StringExtensions on String {\n  bool get isValidEmail {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(this);\n  }\n}\n\nprint('test@example.com'.isValidEmail); //Print: true\nprint('SomeString'.isValidEmail); //Print: false\n</code></pre>"},{"location":"quick-ref/dart/extensions/#generic-extensions","title":"Generic Extensions","text":"<pre><code>// allows you to apply the same logic to a range of types.\nextension NumGenericExtensions&lt;T extends num&gt; on T {\n  T addTwo() =&gt; this + 2 as T;\n}\n\nprint(7.addTwo()); // Print: 9\n</code></pre>"},{"location":"quick-ref/dart/extensions/#dart-extensions-in-flutter","title":"Dart Extensions in Flutter","text":"<pre><code>extension ContextExtension on BuildContext {\n  double get screenHeight =&gt; MediaQuery.of(this).size.height;\n  double get screenWidth =&gt; MediaQuery.of(this).size.width;\n}\n\n// usage\n@override\nWidget build(BuildContext context) =&gt; MaterialApp(\n    home: Scaffold(\n      body: Container(\n        width: context.screenWidth * 0.5,\n        height: context.screenHeight * 0.3,\n        color: Colors.blue,\n        child: Text('Hello World!'),\n      ),\n    ),\n  );\n</code></pre>"},{"location":"quick-ref/dart/functions/","title":"Functions","text":""},{"location":"quick-ref/dart/functions/#syntax","title":"Syntax","text":"<pre><code>// functions in dart are objects and have a type\nint add(int a, int b){\n    return a+b;\n}\n\n// functions can be assigned to variables\nint sum = add(2,3); // returns: 5\n\n// can be passed as arguments to other functions\nint totalSum = add(2, add(2,3)); // returns : 7\n</code></pre>"},{"location":"quick-ref/dart/functions/#arrow-syntax","title":"Arrow Syntax (=&gt;)","text":"<pre><code>// functions that contain just one expression, you can use a shorthand syntax\nbool isFav(Product product) =&gt; favProductsList.contains(product);\n</code></pre>"},{"location":"quick-ref/dart/functions/#anonymous-lambda-functions","title":"Anonymous (lambda) functions","text":"<pre><code>// small one line functions that dont have name\nint add(a,b) =&gt; a+b;\n\n// lambda functions mostly passed as parameter to other functions\nconst list = ['apples', 'bananas', 'oranges'];\nlist.forEach(\n(item) =&gt; print('${list.indexOf(item)}: $item'));\n//Prints: 0: apples 1: bananas 2: oranges\n</code></pre>"},{"location":"quick-ref/dart/futures/","title":"Futures","text":""},{"location":"quick-ref/dart/futures/#async-await","title":"Async Await","text":"<pre><code>// functions which are asynchronous: they return after setting up a possibly time-consuming operation\n// The async and await keywords support asynchronous programming\n\nFuture&lt;String&gt; login() {\n String userName=\"Temidjoy\";\n return\n  Future.delayed(\n    Duration(seconds: 4), () =&gt; userName);\n}\n\n// Asynchronous\nmain() async {\n print('Authenticating please wait...');\n print(await login());\n}\n</code></pre>"},{"location":"quick-ref/dart/getting-started/","title":"Getting started","text":""},{"location":"quick-ref/dart/getting-started/#hello-world","title":"Hello World","text":"<pre><code>// top-level function where app execution starts\nvoid main(){\n    print(\"Hello World!\"); // Print to console\n}\n</code></pre> <p>Every app has a main() function</p>"},{"location":"quick-ref/dart/getting-started/#variables","title":"Variables","text":"<pre><code>int x = 2; // explicitly typed\nvar p = 5; // type inferred - Generic var with type inference\n\ndynamic z = 8; // variable can take on any type\nz = \"cool\"; // cool\n\n// if you never intend to change a variable use final or const. Something like this:\n\nfinal email = \"temid@gmail.com\"; // Same as var but cannot be reassigned\nfinal String email = \"temid@gmail.com\"; // you can't change the value\n\nconst qty = 5; // Compile-time constant\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#data-types","title":"Data Types","text":"<pre><code>int age = 20; // integers, range -2^63 to 2^63 - 1\ndouble height = 1.85; // floating-point numbers\n\n// You can also declare a variable as a num\nnum x = 1;  // x can have both int and double values\nx += 2.5;\nprint(x); //Print: 3.5\n\nString name = \"Nicola\";\n\nbool isFavourite = true;\nbool isLoaded = false;\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#string-interpolation","title":"String interpolation","text":"<pre><code>// can use single or double qoutes for String type\nvar firstName = 'Nicola';\nvar lastName = \"Tesla\";\n\n//can embed variables in string with $\nString fullName = \"$firstName $lastName\";\n\n// concatenate with +\nvar name = \"Albert \" + \"Einstein\";\n\nString upperCase = '${firstName.toUpperCase()}';\nprint(upperCase); //Print: NICOLA\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#comments","title":"Comments","text":"<pre><code>// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#multiline-string","title":"multiline String","text":"<pre><code>For multiline String we have to use ''' your text'''\nfor example\nprint('''My long string''');\n//this will show long string\n//this will help for only long strings\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#imports","title":"Imports","text":"<pre><code>// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n</code></pre>"},{"location":"quick-ref/dart/implicit-interfaces/","title":"Implicit Interfaces","text":""},{"location":"quick-ref/dart/implicit-interfaces/#a-basic-interface","title":"A basic interface","text":"<pre><code>// A person. The implicit interface contains greet().\nclass Person {\n  // In the interface, but visible only in this library.\n  final String _name;\n\n  // Not in the interface, since this is a constructor.\n  Person(this._name);\n\n  // In the interface.\n  String greet(String who) =&gt; 'Hello, $who. I am $_name.';\n}\n\n// An implementation of the Person interface.\nclass Impostor implements Person {\n  String get _name =&gt; '';\n\n  String greet(String who) =&gt; 'Hi $who. Do you know who I am?';\n}\n\nString greetBob(Person person) =&gt; person.greet('Bob');\n\nvoid main() {\n  print(greetBob(Person('Kathy'))); // Hello, Bob. I am Kathy.\n  print(greetBob(Impostor())); // Hi Bob. Do you know who I am?\n}\n</code></pre>"},{"location":"quick-ref/dart/implicit-interfaces/#extending-a-class","title":"Extending a class","text":"<pre><code>class Phone {\n\n    void use(){\n        _call();\n        _sendMessage();\n    }\n}\n// Use extends to create a subclass\nclass SmartPhone extends Phone {\n    void use(){\n        // use super to refer to the superclass\n        super.use();\n        _takePhotos();\n        _playGames();\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/dart/miscellaneous/#null-and-null-aware","title":"Null and Null aware","text":"<pre><code>int x; // The initial value of any object is null\n\n// ?? null aware operator\n\nx ??=6; // ??= assignment operator, which assigns a value of a variable only if that variable is currently null\nprint(x); //Print: 6\n\nx ??=3;\nprint(x); // Print: 6 - result is still 6\n\nprint(null ?? 10); // Prints: 10. Display the value on the left if it's not null else return the value on the right\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#ternary-operator","title":"Ternary Operator","text":"<pre><code>// condition ? exprIfTrue : exprIfFalse\nbool isAvailable;\n\nisAvailable ? orderproduct() : addToFavourite();\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#spread-operator","title":"Spread Operator (...)","text":"<pre><code>// to insert multiple values into a collection.\nvar list = [1, 2, 3];\nvar list2 = [0, ...list];\n\nprint(list2.length); //Print: 4\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#cascade-notation","title":"Cascade notation (..)","text":"<pre><code>// allows you to make a sequence of operations on the same object\n\n// rather than doing this\nvar user = User();\nuser.name = \"Nicola\";\nuser.email = \"nicola@g.c\";\nuser.age = 24;\n\n// you can do this\nvar user = User()\n  ..name = \"Nicola\"\n  ..email = \"nicola@g.c\"\n  ..age = 24;\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#conditional-property-access","title":"Conditional Property Access","text":"<pre><code>userObject?.userName\n\n//The code snippet above is equivalent to following:\n(userObject != null) ? userObject.userName : null\n\n//You can chain multiple uses of ?. together in a single expression\nuserObject?.userName?.toString()\n\n// The preceeding code returns null and never calls toString() if either userObject or userObject.userName is null\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#enum-in-dart","title":"enum in dart","text":"<pre><code>defination: An enum (short for \"enumeration\") is a special data type that enables a variable to be a set of predefined constants. Enums are used to define variables that can only take one out of a small set of possible values. They help make code more readable and less error-prone by providing meaningful names to these sets of values.\n\n// Define the enum\nenum TrafficLight {\n  red,\n  yellow,\n  green\n}\n\n// A function that prints a message based on the traffic light state\nvoid printTrafficLightMessage(TrafficLight light) {\n  switch (light) {\n    case TrafficLight.red:\n      print('Stop!');\n      break;\n    case TrafficLight.yellow:\n      print('Get ready...');\n      break;\n    case TrafficLight.green:\n      print('Go!');\n      break;\n  }\n}\n\nvoid main() {\n  // Example usage of the enum\n  TrafficLight currentLight = TrafficLight.green;\n\n  // Print the message for the current traffic light state\n  printTrafficLightMessage(currentLight);\n}\n</code></pre>"},{"location":"quick-ref/dart/operators/","title":"Operators","text":""},{"location":"quick-ref/dart/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>print(2 + 3); //Print: 5\nprint(2 - 3); //Print: -1\nprint(2 * 3); //Print: 6\nprint(5 / 2);  //Print: 2.5 - Result is a double\nprint(5 ~/ 2); //Print: 2 - Result is an int\nprint(5 % 2); //Print: 1 - Remainder\n\nint a = 1, b;\n// Increment\nb = ++a; // preIncrement - Increment a before b gets its value.\nb = a++; // postIncrement - Increment a AFTER b gets its value.\n\n//Decrement\nb = --a; // predecrement - Decrement a before b gets its value.\nb = a--; // postdecrement - Decrement a AFTER b gets its value.\n</code></pre>"},{"location":"quick-ref/dart/operators/#equality-and-relational-operators","title":"Equality and relational operators","text":"<pre><code>print(2 == 2);  //Print: true - Equal\nprint(2 != 3); //Print: true - Not  Equal\nprint(3 &gt; 2); //Print: true - Grater than\nprint(2 &lt; 3); //Print: true - Less than\nprint(3 &gt;= 3); //Print: true - Greater than or equal to\nprint(2 &lt;= 3); //Print: true - Less than or equal to\n</code></pre>"},{"location":"quick-ref/dart/operators/#logical-operators","title":"Logical operators","text":"<pre><code>// !expr inverts the expression (changes false to true, and vice versa)\n// || logical OR\n// &amp;&amp; logical AND\nbool isOutOfStock = false;\nint quantity = 3;\nif (!isOutOfStock &amp;&amp; (quantity == 2 || quantity == 3)) {\n  // ...Order the product...\n}\n</code></pre>"},{"location":"quick-ref/git/","title":"Git","text":"<p>Abstract</p> <p>This cheat sheet summarizes commonly used Git command line instructions for quick reference.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Tips and Tricks</li> <li>Advanced Git</li> </ul>","tags":["git","github","gitlab","version","VCS"]},{"location":"quick-ref/git/advanced-git/","title":"Advanced Git","text":""},{"location":"quick-ref/git/advanced-git/#submodules","title":"Submodules","text":"<p>Create a new submodule within your repository:</p> <pre><code>git submodule add &lt;repository_url&gt; &lt;path&gt;\n</code></pre> <p>Clone a repository and initialize its submodules:</p> <pre><code>git clone --recursive &lt;repository_url&gt;\n</code></pre> <p>Update all the submodules in your repository to the latest commit of their respective branches:</p> <pre><code>git submodule update\n</code></pre> <p>Pull the latest changes from the remote repositories of the submodules and update them in your main repository:</p> <pre><code>git submodule update --remote\n</code></pre> <p>Remove a submodule from your repository:</p> <pre><code>git submodule deinit &lt;path&gt;\ngit rm &lt;path&gt;\ngit commit -m \"Removed submodule\"\n</code></pre>"},{"location":"quick-ref/git/advanced-git/#cherry-picking","title":"Cherry-picking","text":"<p>Cherry-picking allows you to apply a specific commit from one branch to another branch.</p> <pre><code>git cherry-pick &lt;commit_hash&gt;\n</code></pre>"},{"location":"quick-ref/git/advanced-git/#reflog","title":"Reflog","text":"<p>Display the reflog, showing the history of HEAD and branch movements:</p> <pre><code>git reflog\n</code></pre> <p>Find the hash of the lost commit or branch using the reflog and then checkout to that hash to restore it:</p> <pre><code>git checkout &lt;commit_or_branch_hash&gt;\n</code></pre>"},{"location":"quick-ref/git/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/git/getting-started/#create-a-repository","title":"Create a Repository","text":"<p>Create a new local repository</p> <pre><code>git init [project name]\n</code></pre> <p>Clone a repository</p> <pre><code>git clone git_url\n</code></pre> <p>Clone a repository into a specified directory</p> <pre><code>git clone git_url my_directory\n</code></pre>"},{"location":"quick-ref/git/getting-started/#make-a-change","title":"Make a change","text":"<p>Show modified files in working directory, staged for your next commit</p> <pre><code>git status\n</code></pre> <p>Stages the file, ready for commit</p> <pre><code>git add [file]\n</code></pre> <p>Stage all changed files, ready for commit</p> <pre><code>git add .\n</code></pre> <p>Commit all staged files to version history</p> <pre><code>git commit -m \"commit message\"\n</code></pre> <p>Commit all your tracked files to version history</p> <pre><code>git commit -am \"commit message\"\n</code></pre> <p>Discard changes in working directory which is not staged</p> <pre><code>git restore [file]\n</code></pre> <p>Unstage a staged file or file which is staged</p> <pre><code>git restore --staged [file]\n</code></pre> <p>Unstage a file, keeping the file changes</p> <pre><code>git reset [file]\n</code></pre> <p>Revert everything to the last commit</p> <pre><code>git reset --hard\n</code></pre> <p>Diff of what is changed but not staged</p> <pre><code>git diff\n</code></pre> <p>Diff of what is staged but not yet committed</p> <pre><code>git diff --staged\n</code></pre> <p>Apply any commits of current branch ahead of specified one</p> <pre><code>git rebase [branch]\n</code></pre>"},{"location":"quick-ref/git/getting-started/#configuration","title":"Configuration","text":"<p>Set the name that will be attached to your commits and tags</p> <pre><code>git config --global user.name \"name\"\n</code></pre> <p>Set an email address that will be attached to your commits and tags</p> <pre><code>git config --global user.email \"email\"\n</code></pre> <p>Enable some colorization of Git output</p> <pre><code>git config --global color.ui auto\n</code></pre> <p>Edit the global configuration file in a text editor</p> <pre><code>git config --global --edit\n</code></pre>"},{"location":"quick-ref/git/getting-started/#working-with-branches","title":"Working with Branches","text":"<p>List all local branches</p> <pre><code>git branch\n</code></pre> <p>List all branches, local and remote</p> <pre><code>git branch -av\n</code></pre> <p>Switch to my_branch, and update working directory</p> <pre><code>git checkout my_branch\n</code></pre> <p>Create a new branch called new_branch</p> <pre><code>git checkout -b new_branch\n</code></pre> <p>Delete the branch called my_branch</p> <pre><code>git branch -d my_branch\n</code></pre> <p>Merge branchA into branchB</p> <pre><code>git checkout branchB\ngit merge branchA\n</code></pre> <p>Tag the current commit</p> <pre><code>git tag my_tag\n</code></pre>"},{"location":"quick-ref/git/getting-started/#observe-your-repository","title":"Observe your Repository","text":"<p>Show the commit history for the currently active branch</p> <pre><code>git log\n</code></pre> <p>Show the commits on branchA that are not on branchB</p> <pre><code>git log branchB..branchA\n</code></pre> <p>Show the commits that changed file, even across renames</p> <pre><code>git log --follow [file]\n</code></pre> <p>Show the diff of what is in branchA that is not in branchB</p> <pre><code>git diff branchB...branchA\n</code></pre> <p>Show any object in Git in human-readable format</p> <pre><code>git show [SHA]\n</code></pre>"},{"location":"quick-ref/git/getting-started/#synchronize","title":"Synchronize","text":"<p>Fetch down all the branches from that Git remote</p> <pre><code>git fetch [alias]\n</code></pre> <p>Merge a remote branch into your current branch to bring it up to date</p> <pre><code>$ git merge [alias]/[branch]\n# No fast-forward\n$ git merge --no-ff [alias]/[branch]\n# Only fast-forward\n$ git merge --ff-only [alias]/[branch]\n</code></pre> <p>Transmit local branch commits to the remote repository branch</p> <pre><code>git push [alias] [branch]\n</code></pre> <p>Fetch and merge any commits from the tracking remote branch</p> <pre><code>git pull\n</code></pre> <p>Merge just one specific commit from another branch to your current branch</p> <pre><code>git cherry-pick [commit_id]\n</code></pre>"},{"location":"quick-ref/git/getting-started/#remote","title":"Remote","text":"<p>Add a git URL as an alias</p> <pre><code>git remote add [alias] [url]\n</code></pre> <p>Show the names of the remote repositories you've set up</p> <pre><code>git remote\n</code></pre> <p>Show the names and URLs of the remote repositories</p> <pre><code>git remote -v\n</code></pre> <p>Remove a remote repository</p> <pre><code>git remote rm [remote repo name]\n</code></pre> <p>Change the URL of the git repo</p> <pre><code>git remote set-url origin [git_url]\n</code></pre>"},{"location":"quick-ref/git/getting-started/#temporary-commits","title":"Temporary Commits","text":"<p>Save modified and staged changes</p> <pre><code>git stash\n</code></pre> <p>List stack-order of stashed file changes</p> <pre><code>git stash list\n</code></pre> <p>Write working from top of stash stack</p> <pre><code>git stash pop\n</code></pre> <p>Discard the changes from top of stash stack</p> <pre><code>git stash drop\n</code></pre>"},{"location":"quick-ref/git/getting-started/#tracking-path-changes","title":"Tracking path Changes","text":"<p>Delete the file from project and stage the removal for commit</p> <pre><code>git rm [file]\n</code></pre> <p>Change an existing file path and stage the move</p> <pre><code>git mv [existing-path] [new-path]\n</code></pre> <p>Show all commit logs with indication of any paths that moved</p> <pre><code>git log --stat -M\n</code></pre>"},{"location":"quick-ref/git/getting-started/#ignoring-files","title":"Ignoring Files","text":"<pre><code>/logs/*\n\n# \"!\" means don't ignore\n!logs/.gitkeep\n\n/# Ignore Mac system files\n.DS_store\n\n# Ignore node_modules folder\nnode_modules\n\n# Ignore SASS config files\n.sass-cache\n</code></pre> <p>A <code>.gitignore</code> file specifies intentionally untracked files that Git should ignore</p>"},{"location":"quick-ref/git/tips-and-tricks/","title":"Tips and Tricks","text":""},{"location":"quick-ref/git/tips-and-tricks/#rename-branch","title":"Rename branch","text":""},{"location":"quick-ref/git/tips-and-tricks/#renamed-to-new_name","title":"Renamed to <code>new_name</code>","text":"<pre><code>git branch -m &lt;new_name&gt;\n</code></pre>"},{"location":"quick-ref/git/tips-and-tricks/#push-and-reset","title":"Push and reset","text":"<pre><code>git push origin -u &lt;new_name&gt;\n</code></pre>"},{"location":"quick-ref/git/tips-and-tricks/#delete-remote-branch","title":"Delete remote branch","text":"<pre><code>git push origin --delete &lt;old&gt;\n</code></pre>"},{"location":"quick-ref/git/tips-and-tricks/#log","title":"Log","text":"<p>Search change by content</p> <pre><code>git log -S'&lt;a term in the source&gt;'\n</code></pre> <p>Show changes over time for specific file</p> <pre><code>git log -p &lt;file_name&gt;\n</code></pre> <p>Print out a cool visualization of your log</p> <pre><code>git log --pretty=oneline --graph --decorate --all\n</code></pre>"},{"location":"quick-ref/git/tips-and-tricks/#branch","title":"Branch","text":"<p>List all branches and their upstreams</p> <pre><code>git branch -vv\n</code></pre> <p>Quickly switch to the previous branch</p> <pre><code>git checkout -\n</code></pre> <p>Get only remote branches</p> <pre><code>git branch -r\n</code></pre> <p>Checkout a single file from another branch</p> <pre><code>git checkout &lt;branch&gt; -- &lt;file&gt;\n</code></pre>"},{"location":"quick-ref/git/tips-and-tricks/#rewriting-history","title":"Rewriting history","text":"<p>Rewrite last commit message</p> <pre><code>git commit --amend -m \"new message\"\n</code></pre> <p>Amend the latest commit without changing the commit message.</p> <pre><code>git commit --amend --no-edit\n</code></pre> <p>See also: Rewriting history</p>"},{"location":"quick-ref/git/tips-and-tricks/#git-aliases","title":"Git Aliases","text":"<pre><code>git config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n</code></pre> <p>See also: More Aliases</p>"},{"location":"quick-ref/go/","title":"Go","text":"<p>Abstract</p> <p>This cheat sheet provided basic syntax and methods to help you using Go.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Basic Types</li> <li>Strings</li> <li>Flow Control</li> <li>Structs and Maps</li> <li>Functions</li> <li>Packages</li> <li>Concurrency</li> <li>Error Control</li> <li>Methods</li> <li>Interfaces</li> <li>Generics</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["go","golang"]},{"location":"quick-ref/go/also-see/","title":"Also See","text":"<ul> <li>Devhints (devhints.io)</li> <li>A tour of Go (tour.go.dev)</li> <li>Go wiki (github.com)</li> <li>Effective Go (go.dev)</li> <li>Go by Example (gobyexample.com)</li> <li>Awesome Go (awesome-go.com)</li> <li>JustForFunc Youtube (youtube.com)</li> <li>Style Guide (github.com)</li> </ul>"},{"location":"quick-ref/go/basic-types/","title":"Basic Types","text":""},{"location":"quick-ref/go/basic-types/#strings","title":"Strings","text":"<pre><code>s1 := \"Hello\" + \"World\"\n\ns2 := `A \"raw\" string literal\ncan include line breaks.`\n\n// Outputs: 10\nfmt.Println(len(s1))\n\n// Outputs: Hello\nfmt.Println(string(s1[0:5]))\n</code></pre> <p>Strings are of type <code>string</code>.</p>"},{"location":"quick-ref/go/basic-types/#numbers","title":"Numbers","text":"<pre><code>num := 3         // int\nnum := 3.        // float64\nnum := 3 + 4i    // complex128\nnum := byte('a') // byte (alias: uint8)\n\nvar u uint = 7        // uint (unsigned)\nvar p float32 = 22.7  // 32-bit float\n</code></pre>"},{"location":"quick-ref/go/basic-types/#operators","title":"Operators","text":"<pre><code>x := 5\nx++\nfmt.Println(\"x + 4 =\", x + 4)\nfmt.Println(\"x * 4 =\", x * 4)\n</code></pre>"},{"location":"quick-ref/go/basic-types/#booleans","title":"Booleans","text":"<pre><code>isTrue   := true\nisFalse  := false\n</code></pre>"},{"location":"quick-ref/go/basic-types/#operators_1","title":"Operators","text":"<pre><code>fmt.Println(true &amp;&amp; true)   // true\nfmt.Println(true &amp;&amp; false)  // false\nfmt.Println(true || true)   // true\nfmt.Println(true || false)  // true\nfmt.Println(!true)          // false\n</code></pre>"},{"location":"quick-ref/go/basic-types/#arrays","title":"Arrays","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 2  | 3  | 5  | 7  | 11  | 13  |\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n  0    1    2    3     4     5\n</code></pre> <pre><code>primes := [...]int{2, 3, 5, 7, 11, 13}\nfmt.Println(len(primes)) // =&gt; 6\n\n// Outputs: [2 3 5 7 11 13]\nfmt.Println(primes)\n\n// Same as [:3], Outputs: [2 3 5]\nfmt.Println(primes[0:3])\n</code></pre> <pre><code>var a [2]string\na[0] = \"Hello\"\na[1] = \"World\"\n\nfmt.Println(a[0], a[1]) //=&gt; Hello World\nfmt.Println(a)   // =&gt; [Hello World]\n</code></pre>"},{"location":"quick-ref/go/basic-types/#2d-array","title":"2d array","text":"<pre><code>var twoDimension [2][3]int\nfor i := 0; i &lt; 2; i++ {\n    for j := 0; j &lt; 3; j++ {\n        twoDimension[i][j] = i + j\n    }\n}\n// =&gt; 2d:  [[0 1 2] [1 2 3]]\nfmt.Println(\"2d: \", twoDimension)\n</code></pre>"},{"location":"quick-ref/go/basic-types/#pointers","title":"Pointers","text":"<pre><code>func main () {\n  b := *getPointer()\n  fmt.Println(\"Value is\", b)\n}\n</code></pre> <pre><code>func getPointer () (myPointer *int) {\n  a := 234\n  return &amp;a\n}\n</code></pre> <pre><code>a := new(int)\n*a = 234\n</code></pre> <p>See: Pointers</p>"},{"location":"quick-ref/go/basic-types/#slices","title":"Slices","text":"<pre><code>s := make([]string, 3)\ns[0] = \"a\"\ns[1] = \"b\"\ns = append(s, \"d\")\ns = append(s, \"e\", \"f\")\n\nfmt.Println(s)\nfmt.Println(s[1])\nfmt.Println(len(s))\nfmt.Println(s[1:3])\n\nslice := []int{2, 3, 4}\n</code></pre> <p>See also: Slices example</p>"},{"location":"quick-ref/go/basic-types/#constants","title":"Constants","text":"<pre><code>const s string = \"constant\"\nconst Phi = 1.618\nconst n = 500000000\nconst d = 3e20 / n\nfmt.Println(d)\n</code></pre>"},{"location":"quick-ref/go/basic-types/#type-conversions","title":"Type conversions","text":"<pre><code>i := 90\nf := float64(i)\nu := uint(i)\n\n// Will be equal to the character Z\ns := string(i)\n</code></pre>"},{"location":"quick-ref/go/basic-types/#how-to-get-int-string","title":"How to get int string?","text":"<pre><code>i := 90\n\n// need import \"strconv\"\ns := strconv.Itoa(i)\nfmt.Println(s) // Outputs: 90\n</code></pre>"},{"location":"quick-ref/go/concurrency/","title":"Concurrency","text":""},{"location":"quick-ref/go/concurrency/#goroutines","title":"Goroutines","text":"<pre><code>package main\n\nimport (\n \"fmt\"\n \"time\"\n)\n\nfunc f(from string) {\n for i := 0; i &lt; 3; i++ {\n  fmt.Println(from, \":\", i)\n }\n}\n\nfunc main() {\n f(\"direct\")\n go f(\"goroutine\")\n\n go func(msg string) {\n  fmt.Println(msg)\n }(\"going\")\n\n time.Sleep(time.Second)\n fmt.Println(\"done\")\n}\n</code></pre> <p>See: Goroutines, Channels</p>"},{"location":"quick-ref/go/concurrency/#waitgroup","title":"WaitGroup","text":"<pre><code>package main\n\nimport (\n \"fmt\"\n \"sync\"\n \"time\"\n)\n\nfunc w(id int, wg *sync.WaitGroup) {\n defer wg.Done()\n fmt.Printf(\"%d starting\\n\", id)\n\n time.Sleep(time.Second)\n fmt.Printf(\"%d done\\n\", id)\n}\n\nfunc main() {\n var wg sync.WaitGroup\n for i := 1; i &lt;= 5; i++ {\n  wg.Add(1)\n  go w(i, &amp;wg)\n }\n wg.Wait()\n}\n</code></pre> <p>See: WaitGroup</p>"},{"location":"quick-ref/go/concurrency/#closing-channels","title":"Closing channels","text":"<pre><code>ch &lt;- 1\nch &lt;- 2\nch &lt;- 3\nclose(ch) // Closes a channel\n</code></pre> <pre><code>// Iterate the channel until closed\nfor i := range ch {\n  \u00b7\u00b7\u00b7\n}\n</code></pre> <pre><code>// Closed if `ok == false`\nv, ok := &lt;- ch\n</code></pre> <p>See: Range and close</p>"},{"location":"quick-ref/go/concurrency/#buffered-channels","title":"Buffered channels","text":"<pre><code>ch := make(chan int, 2)\nch &lt;- 1\nch &lt;- 2\nch &lt;- 3\n// fatal error:\n// all goroutines are asleep - deadlock\n</code></pre> <p>See: Buffered channels</p>"},{"location":"quick-ref/go/error-control/","title":"Error Control","text":""},{"location":"quick-ref/go/error-control/#deferring-functions","title":"Deferring functions","text":"<pre><code>func main() {\n  defer func() {\n    fmt.Println(\"Done\")\n  }()\n  fmt.Println(\"Working...\")\n}\n</code></pre>"},{"location":"quick-ref/go/error-control/#lambda-defer","title":"Lambda defer","text":"<pre><code>func main() {\n  var d = int64(0)\n  defer func(d *int64) {\n    fmt.Printf(\"&amp; %v Unix Sec\\n\", *d)\n  }(&amp;d)\n  fmt.Print(\"Done \")\n  d = time.Now().Unix()\n}\n</code></pre> <p>The defer func uses current value of d, unless we use a pointer to get final value at end of main.</p>"},{"location":"quick-ref/go/error-control/#defer","title":"Defer","text":"<pre><code>func main() {\n  defer fmt.Println(\"Done\")\n  fmt.Println(\"Working...\")\n}\n</code></pre> <p>See: Defer, panic and recover</p>"},{"location":"quick-ref/go/flow-control/","title":"Flow Control","text":""},{"location":"quick-ref/go/flow-control/#conditional","title":"Conditional","text":"<pre><code>a := 10\n\nif a &gt; 20 {\n    fmt.Println(\"&gt;\")\n} else if a &lt; 20 {\n    fmt.Println(\"&lt;\")\n} else {\n    fmt.Println(\"=\")\n}\n</code></pre>"},{"location":"quick-ref/go/flow-control/#statements-in-if","title":"Statements in if","text":"<pre><code>x := \"hello go!\"\n\nif count := len(x); count &gt; 0 {\n    fmt.Println(\"Yes\")\n}\n</code></pre> <pre><code>if _, err := doThing(); err != nil {\n    fmt.Println(\"Uh oh\")\n}\n</code></pre>"},{"location":"quick-ref/go/flow-control/#switch","title":"Switch","text":"<pre><code>x := 42.0\nswitch x {\ncase 0:\ncase 1, 2:\n    fmt.Println(\"Multiple matches\")\ncase 42:   // Don't \"fall through\".\n    fmt.Println(\"reached\")\ncase 43:\n    fmt.Println(\"Unreached\")\ndefault:\n    fmt.Println(\"Optional\")\n}\n</code></pre> <p>See: Switch</p>"},{"location":"quick-ref/go/flow-control/#for-loop","title":"For loop","text":"<pre><code>for i := 0; i &lt;= 10; i++ {\n  fmt.Println(\"i: \", i)\n}\n</code></pre>"},{"location":"quick-ref/go/flow-control/#for-range-loop","title":"For-Range loop","text":"<pre><code>nums := []int{2, 3, 4}\nsum := 0\nfor _, num := range nums {\n    sum += num\n}\nfmt.Println(\"sum:\", sum)\n</code></pre>"},{"location":"quick-ref/go/flow-control/#while-loop","title":"While loop","text":"<pre><code>i := 1\nfor i &lt;= 3 {\n    fmt.Println(i)\n    i++\n}\n</code></pre>"},{"location":"quick-ref/go/flow-control/#continue-keyword","title":"Continue keyword","text":"<pre><code>for i := 0; i &lt;= 5; i++ {\n    if i % 2 == 0 {\n        continue\n    }\n    fmt.Println(i)\n}\n</code></pre>"},{"location":"quick-ref/go/flow-control/#break-keyword","title":"Break keyword","text":"<pre><code>for {\n    fmt.Println(\"loop\")\n    break\n}\n</code></pre>"},{"location":"quick-ref/go/functions/","title":"Functions","text":""},{"location":"quick-ref/go/functions/#multiple-arguments","title":"Multiple arguments","text":"<pre><code>func plus(a int, b int) int {\n    return a + b\n}\nfunc plusPlus(a, b, c int) int {\n    return a + b + c\n}\nfmt.Println(plus(1, 2))\nfmt.Println(plusPlus(1, 2, 3))\n</code></pre>"},{"location":"quick-ref/go/functions/#multiple-return","title":"Multiple return","text":"<pre><code>func vals() (int, int) {\n    return 3, 7\n}\n\na, b := vals()\nfmt.Println(a)    // =&gt; 3\nfmt.Println(b)    // =&gt; 7\n</code></pre>"},{"location":"quick-ref/go/functions/#function-literals","title":"Function literals","text":"<pre><code>r1, r2 := func() (string, string) {\n    x := []string{\"hello\", \"cheatsheets.zip\"}\n    return x[0], x[1]\n}()\n\n// =&gt; hello cheatsheets.zip\nfmt.Println(r1, r2)\n</code></pre>"},{"location":"quick-ref/go/functions/#naked-returns","title":"Naked returns","text":"<pre><code>func split(sum int) (x, y int) {\n  x = sum * 4 / 9\n  y = sum - x\n  return\n}\n\nx, y := split(17)\nfmt.Println(x)   // =&gt; 7\nfmt.Println(y)   // =&gt; 10\n</code></pre> <p>Note that using naked returns hurts readability.</p>"},{"location":"quick-ref/go/functions/#variadic-functions","title":"Variadic functions","text":"<pre><code>func sum(nums ...int) {\n    fmt.Print(nums, \" \")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\nsum(1, 2)     //=&gt; [1 2] 3\nsum(1, 2, 3)  // =&gt; [1 2 3] 6\n\nnums := []int{1, 2, 3, 4}\nsum(nums...)  // =&gt; [1 2 3 4] 10\n</code></pre>"},{"location":"quick-ref/go/functions/#init-function","title":"init function","text":"<pre><code>import --&gt; const --&gt; var --&gt; init()\n</code></pre> <pre><code>var num = setNumber()\n\nfunc setNumber() int {\n    return 42\n}\nfunc init() {\n    num = 0\n}\nfunc main() {\n    fmt.Println(num) // =&gt; 0\n}\n</code></pre>"},{"location":"quick-ref/go/functions/#functions-as-values","title":"Functions as values","text":"<pre><code>func main() {\n    // assign a function to a name\n    add := func(a, b int) int {\n        return a + b\n    }\n    // use the name to call the function\n    fmt.Println(add(3, 4)) // =&gt; 7\n}\n</code></pre>"},{"location":"quick-ref/go/functions/#closures-1","title":"Closures 1","text":"<pre><code>func scope() func() int{\n    outer_var := 2\n    foo := func() int {return outer_var}\n    return foo\n}\n\n// Outpus: 2\nfmt.Println(scope()())\n</code></pre>"},{"location":"quick-ref/go/functions/#closures-2","title":"Closures 2","text":"<pre><code>func outer() (func() int, int) {\n    outer_var := 2\n    inner := func() int {\n        outer_var += 99\n        return outer_var\n    }\n    inner()\n    return inner, outer_var\n}\ninner, val := outer()\nfmt.Println(inner()) // =&gt; 200\nfmt.Println(val)     // =&gt; 101\n</code></pre>"},{"location":"quick-ref/go/generics/","title":"Generics","text":""},{"location":"quick-ref/go/generics/#example-1","title":"example 1","text":"<pre><code>// comparable represents types that can be compared.\ntype comparable interface {\n int | float64 | string\n}\n\n// Max returns the maximum of two comparable values.\nfunc Max[T comparable](a, b T) T {\n if a &gt; b {\n  return a\n }\n return b\n}\n\nfunc main() {\n // Find the maximum of two integers.\n maxInt := Max(10, 20)\n fmt.Println(\"Max integer:\", maxInt)\n\n // Find the maximum of two floats.\n maxFloat := Max(3.14, 2.71)\n fmt.Println(\"Max float:\", maxFloat)\n\n // Find the maximum of two strings.\n maxString := Max(\"apple\", \"banana\")\n fmt.Println(\"Max string:\", maxString)\n}\n</code></pre>"},{"location":"quick-ref/go/generics/#example-2","title":"example 2","text":"<pre><code>// Pair[T, U] represents a generic pair of values.\ntype Pair[T, U any] struct {\n First  T\n Second U\n}\n\nfunc main() {\n pair := Pair[int, string]{First: 42, Second: \"hello\"}\n\n fmt.Println(\"First:\", pair.First)\n fmt.Println(\"Second:\", pair.Second)\n\n // Print the types of the values in the pair.\n fmt.Println(\"Type of First:\", reflect.TypeOf(pair.First))\n fmt.Println(\"Type of Second:\", reflect.TypeOf(pair.Second))\n}\n</code></pre>"},{"location":"quick-ref/go/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/go/getting-started/#hellogo","title":"hello.go","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world!\")\n}\n</code></pre> <p>Run directly</p> <pre><code>$ go run hello.go\nHello, world!\n</code></pre> <p>Or try it out in the Go repl</p>"},{"location":"quick-ref/go/getting-started/#variables","title":"Variables","text":"<pre><code>var s1 string\ns1 = \"Learn Go!\"\n\n// declare multiple variables at once\nvar b, c int = 1, 2\nvar d = true\n</code></pre> <p>Short declaration</p> <pre><code>s1 := \"Learn Go!\"        // string\nb, c := 1, 2             // int\nd := true                // bool\n</code></pre>"},{"location":"quick-ref/go/getting-started/#functions","title":"Functions","text":"<pre><code>package main\n\nimport \"fmt\"\n\n// The entry point of the programs\nfunc main() {\n    fmt.Println(\"Hello world!\")\n    say(\"Hello Go!\")\n}\n\nfunc say(message string) {\n    fmt.Println(\"You said: \", message)\n}\n</code></pre>"},{"location":"quick-ref/go/getting-started/#comments","title":"Comments","text":"<pre><code>// Single line comment\n\n/* Multi-\n line comment */\n</code></pre>"},{"location":"quick-ref/go/getting-started/#if-statement","title":"If statement","text":"<pre><code>if true {\n    fmt.Println(\"Yes!\")\n}\n</code></pre>"},{"location":"quick-ref/go/interfaces/","title":"Interfaces","text":""},{"location":"quick-ref/go/interfaces/#a-basic-interface","title":"A basic interface","text":"<pre><code>type Shape interface {\n  Area() float64\n  Perimeter() float64\n}\n</code></pre>"},{"location":"quick-ref/go/interfaces/#struct","title":"Struct","text":"<pre><code>type Rectangle struct {\n  Length, Width float64\n}\n</code></pre> <p>Struct <code>Rectangle</code> implicitly implements interface <code>Shape</code> by implementing all of its methods.</p>"},{"location":"quick-ref/go/interfaces/#methods","title":"Methods","text":"<pre><code>func (r Rectangle) Area() float64 {\n  return r.Length * r.Width\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n  return 2 * (r.Length + r.Width)\n}\n</code></pre> <p>The methods defined in <code>Shape</code> are implemented in <code>Rectangle</code>.</p>"},{"location":"quick-ref/go/interfaces/#interface-example","title":"Interface example","text":"<pre><code>func main() {\n  var r Shape = Rectangle{Length: 3, Width: 4}\n  fmt.Printf(\"Type of r: %T, Area: %v, Perimeter: %v.\", r, r.Area(), r.Perimeter())\n}\n</code></pre>"},{"location":"quick-ref/go/methods/","title":"Methods","text":""},{"location":"quick-ref/go/methods/#receivers","title":"Receivers","text":"<pre><code>type Vertex struct {\n  X, Y float64\n}\n</code></pre> <pre><code>func (v Vertex) Abs() float64 {\n  return math.Sqrt(v.X * v.X + v.Y * v.Y)\n}\n</code></pre> <pre><code>v := Vertex{1, 2}\nv.Abs()\n</code></pre> <p>See: Methods</p>"},{"location":"quick-ref/go/methods/#mutation","title":"Mutation","text":"<pre><code>func (v *Vertex) Scale(f float64) {\n  v.X = v.X * f\n  v.Y = v.Y * f\n}\n</code></pre> <pre><code>v := Vertex{6, 12}\nv.Scale(0.5)\n// `v` is updated\n</code></pre> <p>See: Pointer receivers</p>"},{"location":"quick-ref/go/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/go/miscellaneous/#keywords","title":"Keywords","text":"<ul> <li><code>break</code></li> <li><code>default</code></li> <li><code>func</code></li> <li><code>interface</code></li> <li><code>select</code></li> <li><code>case</code></li> <li><code>defer</code></li> <li><code>go</code></li> <li><code>map</code></li> <li><code>struct</code></li> <li><code>chan</code></li> <li><code>else</code></li> <li><code>goto</code></li> <li><code>package</code></li> <li><code>switch</code></li> <li><code>const</code></li> <li><code>fallthrough</code></li> <li><code>if</code></li> <li><code>range</code></li> <li><code>type</code></li> <li><code>continue</code></li> <li><code>for</code></li> <li><code>import</code></li> <li><code>return</code></li> <li><code>var</code></li> <li><code>iota</code></li> </ul>"},{"location":"quick-ref/go/miscellaneous/#operators-and-punctuation","title":"Operators and punctuation","text":"<code>+</code> <code>&amp;</code> <code>+=</code> <code>&amp;=</code> <code>&amp;&amp;</code> <code>==</code> <code>!=</code> <code>(</code> <code>)</code> <code>-</code> <code>|</code> <code>-=</code> <code>|=</code> <code>||</code> <code>&lt;</code> <code>&lt;=</code> <code>[</code> <code>]</code> <code>*</code> <code>^</code> <code>*=</code> <code>^=</code> <code>&lt;-</code> <code>&gt;</code> <code>&gt;=</code> <code>{</code> <code>}</code> <code>/</code> <code>&lt;&lt;</code> <code>/=</code> <code>&lt;&lt;=</code> <code>++</code> <code>=</code> <code>:=</code> <code>,</code> <code>;</code> <code>%</code> <code>&gt;&gt;</code> <code>%=</code> <code>&gt;&gt;=</code> <code>--</code> <code>!</code> <code>...</code> <code>.</code> <code>:</code> <code>&amp;^</code> <code>&amp;^=</code>"},{"location":"quick-ref/go/packages/","title":"Packages","text":""},{"location":"quick-ref/go/packages/#importing","title":"Importing","text":"<pre><code>import \"fmt\"\nimport \"math/rand\"\n</code></pre>"},{"location":"quick-ref/go/packages/#same-as","title":"Same as","text":"<pre><code>import (\n  \"fmt\"        // gives fmt.Println\n  \"math/rand\"  // gives rand.Intn\n)\n</code></pre> <p>See: Importing</p>"},{"location":"quick-ref/go/packages/#aliases","title":"Aliases","text":"<pre><code>import r \"math/rand\"\n</code></pre> <pre><code>import (\n    \"fmt\"\n    r \"math/rand\"\n)\n</code></pre> <pre><code>r.Intn()\n</code></pre>"},{"location":"quick-ref/go/packages/#packages_1","title":"Packages","text":"<pre><code>package main\n\n// An internal package may be imported only by another package\n// that is inside the tree rooted at the parent of the internal directory\npackage internal\n</code></pre> <p>See: Internal packages</p>"},{"location":"quick-ref/go/packages/#exporting-names","title":"Exporting names","text":"<pre><code>// Begin with a capital letter\nfunc Hello () {\n  \u00b7\u00b7\u00b7\n}\n</code></pre> <p>See: Exported names</p>"},{"location":"quick-ref/go/strings/","title":"Strings","text":""},{"location":"quick-ref/go/strings/#strings-function","title":"Strings function","text":"<pre><code>package main\n\nimport (\n \"fmt\"\n s \"strings\"\n)\n\nfunc main() {\n    /* Need to import strings as s */\n fmt.Println(s.Contains(\"test\", \"e\"))\n\n    /* Build in */\n    fmt.Println(len(\"hello\"))  // =&gt; 5\n    // Outputs: 101\n fmt.Println(\"hello\"[1])\n    // Outputs: e\n fmt.Println(string(\"hello\"[1]))\n\n}\n</code></pre>"},{"location":"quick-ref/go/strings/#fmtprintf","title":"fmt.Printf","text":"<pre><code>package main\n\nimport (\n \"fmt\"\n \"os\"\n)\n\ntype point struct {\n x, y int\n}\n\nfunc main() {\n p := point{1, 2}\n fmt.Printf(\"%v\\n\", p)                        // =&gt; {1 2}\n fmt.Printf(\"%+v\\n\", p)                       // =&gt; {x:1 y:2}\n fmt.Printf(\"%#v\\n\", p)                       // =&gt; main.point{x:1, y:2}\n fmt.Printf(\"%T\\n\", p)                        // =&gt; main.point\n fmt.Printf(\"%t\\n\", true)                     // =&gt; TRUE\n fmt.Printf(\"%d\\n\", 123)                      // =&gt; 123\n fmt.Printf(\"%b\\n\", 14)                       // =&gt; 1110\n fmt.Printf(\"%c\\n\", 33)                       // =&gt; !\n fmt.Printf(\"%x\\n\", 456)                      // =&gt; 1c8\n fmt.Printf(\"%f\\n\", 78.9)                     // =&gt; 78.9\n fmt.Printf(\"%e\\n\", 123400000.0)              // =&gt; 1.23E+08\n fmt.Printf(\"%E\\n\", 123400000.0)              // =&gt; 1.23E+08\n fmt.Printf(\"%s\\n\", \"\\\"string\\\"\")             // =&gt; \"string\"\n fmt.Printf(\"%q\\n\", \"\\\"string\\\"\")             // =&gt; \"\\\"string\\\"\"\n fmt.Printf(\"%x\\n\", \"hex this\")               // =&gt; 6.86578E+15\n fmt.Printf(\"%p\\n\", &amp;p)                       // =&gt; 0xc00002c040\n fmt.Printf(\"|%6d|%6d|\\n\", 12, 345)           // =&gt; |    12|   345|\n fmt.Printf(\"|%6.2f|%6.2f|\\n\", 1.2, 3.45)     // =&gt; |  1.20|  3.45|\n fmt.Printf(\"|%-6.2f|%-6.2f|\\n\", 1.2, 3.45)   // =&gt; |1.20  |3.45  |\n fmt.Printf(\"|%6s|%6s|\\n\", \"foo\", \"b\")        // =&gt; |   foo|     b|\n fmt.Printf(\"|%-6s|%-6s|\\n\", \"foo\", \"b\")      // =&gt; |foo   |b     |\n\n s := fmt.Sprintf(\"a %s\", \"string\")\n fmt.Println(s)\n\n fmt.Fprintf(os.Stderr, \"an %s\\n\", \"error\")\n}\n</code></pre> <p>See also: fmt</p>"},{"location":"quick-ref/go/strings/#function-examples","title":"Function examples","text":"Example Result Contains(\"test\", \"es\") true Count(\"test\", \"t\") 2 HasPrefix(\"test\", \"te\") true HasSuffix(\"test\", \"st\") true Index(\"test\", \"e\") 1 Join([]string{\"a\", \"b\"}, \"-\") a-b Repeat(\"a\", 5) aaaaa Replace(\"foo\", \"o\", \"0\", -1) f00 Replace(\"foo\", \"o\", \"0\", 1) f0o Split(\"a-b-c-d-e\", \"-\") [a b c d e] ToLower(\"TEST\") test ToUpper(\"test\") TEST"},{"location":"quick-ref/go/structs-and-maps/","title":"Structs and Maps","text":""},{"location":"quick-ref/go/structs-and-maps/#defining","title":"Defining","text":"<pre><code>package main\n\nimport (\n \"fmt\"\n)\n\ntype Vertex struct {\n X int\n Y int\n}\n\nfunc main() {\n v := Vertex{1, 2}\n v.X = 4\n fmt.Println(v.X, v.Y) // =&gt; 4 2\n}\n</code></pre> <p>See: Structs</p>"},{"location":"quick-ref/go/structs-and-maps/#literals","title":"Literals","text":"<pre><code>v := Vertex{X: 1, Y: 2}\n// Field names can be omitted\nv := Vertex{1, 2}\n// Y is implicit\nv := Vertex{X: 1}\n</code></pre> <p>You can also put field names.</p>"},{"location":"quick-ref/go/structs-and-maps/#maps","title":"Maps","text":"<pre><code>m := make(map[string]int)\nm[\"k1\"] = 7\nm[\"k2\"] = 13\nfmt.Println(m) // =&gt; map[k1:7 k2:13]\n\nv1 := m[\"k1\"]\nfmt.Println(v1)     // =&gt; 7\nfmt.Println(len(m)) // =&gt; 2\n\ndelete(m, \"k2\")\nfmt.Println(m) // =&gt; map[k1:7]\n\n_, prs := m[\"k2\"]\nfmt.Println(prs) // =&gt; false\n\nn := map[string]int{\"foo\": 1, \"bar\": 2}\nfmt.Println(n) // =&gt; map[bar:2 foo:1]\n</code></pre>"},{"location":"quick-ref/go/structs-and-maps/#pointers-to-structs","title":"Pointers to structs","text":"<pre><code>v := &amp;Vertex{1, 2}\nv.X = 2\n</code></pre> <p>Doing <code>v.X</code> is the same as doing <code>(*v).X</code>, when <code>v</code> is a pointer.</p>"},{"location":"quick-ref/java/","title":"Java","text":"<p>Abstract</p> <p>This cheat sheet is a crash course for Java beginners and help review the basic syntax of the Java language.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Strings</li> <li>Arrays</li> <li>Conditionals</li> <li>Loops</li> <li>Collections Framework</li> <li>Miscellaneous</li> </ul>","tags":["java","object-oriented","class"]},{"location":"quick-ref/java/arrays/","title":"Arrays","text":""},{"location":"quick-ref/java/arrays/#declare","title":"Declare","text":"<pre><code>int[] a1;\nint[] a2 = {1, 2, 3};\nint[] a3 = new int[]{1, 2, 3};\n\nint[] a4 = new int[3];\na4[0] = 1;\na4[2] = 2;\na4[3] = 3;\n</code></pre>"},{"location":"quick-ref/java/arrays/#modify","title":"Modify","text":"<pre><code>int[] a = {1, 2, 3};\nSystem.out.println(a[0]); // 1\n\na[0] = 9;\nSystem.out.println(a[0]); // 9\n\nSystem.out.println(a.length); // 3\n</code></pre>"},{"location":"quick-ref/java/arrays/#loop-read-modify","title":"Loop (Read &amp; Modify)","text":"<pre><code>int[] arr = {1, 2, 3};\nfor (int i=0; i &lt; arr.length; i++) {\n    arr[i] = arr[i] * 2;\n    System.out.print(arr[i] + \" \");\n}\n// Outputs: 2 4 6\n</code></pre>"},{"location":"quick-ref/java/arrays/#loop-read","title":"Loop (Read)","text":"<pre><code>String[] arr = {\"a\", \"b\", \"c\"};\nfor (String a: arr) {\n    System.out.print(a + \" \");\n}\n// Outputs: a b c\n</code></pre>"},{"location":"quick-ref/java/arrays/#multidimensional-arrays","title":"Multidimensional Arrays","text":"<pre><code>int[][] matrix = { {1, 2, 3}, {4, 5} };\n\nint x = matrix[1][0];  // 4\n// [[1, 2, 3], [4, 5]]\nArrays.deepToString(matrix);\n\nint[][] a = matrix;\nfor (int i = 0; i &lt; a.length; ++i) {\n  for(int j = 0; j &lt; a[i].length; ++j) {\n    System.out.println(a[i][j]);\n  }\n}\n// Outputs: 1 2 3 4 5 6 7\n</code></pre>"},{"location":"quick-ref/java/arrays/#sort","title":"Sort","text":"<pre><code>char[] chars = {'b', 'a', 'c'};\nArrays.sort(chars);\n\n// [a, b, c]\nArrays.toString(chars);\n</code></pre>"},{"location":"quick-ref/java/collections-framework/","title":"Collections Framework","text":""},{"location":"quick-ref/java/collections-framework/#java-collections","title":"Java Collections","text":"Collection Interface Ordered Sorted Thread safe Duplicate Nullable ArrayList List Y N N Y Y Vector List Y N Y Y Y LinkedList List, Deque Y N N Y Y CopyOnWriteArrayList List Y N Y Y Y HashSet Set N N N N One <code>null</code> LinkedHashSet Set Y N N N One <code>null</code> TreeSet Set Y Y N N N CopyOnWriteArraySet Set Y N Y N One <code>null</code> ConcurrentSkipListSet Set Y Y Y N N HashMap Map N N N N (key) One <code>null</code> (key) HashTable Map N N Y N (key) N (key) LinkedHashMap Map Y N N N (key) One <code>null</code> (key) TreeMap Map Y Y N N (key) N (key) ConcurrentHashMap Map N N Y N (key) N ConcurrentSkipListMap Map Y Y Y N (key) N ArrayDeque Deque Y N N Y N PriorityQueue Queue Y N N Y N ConcurrentLinkedQueue Queue Y N Y Y N ConcurrentLinkedDeque Deque Y N Y Y N ArrayBlockingQueue Queue Y N Y Y N LinkedBlockingDeque Deque Y N Y Y N PriorityBlockingQueue Queue Y N Y Y N <p>{.show-header .left-text}</p>"},{"location":"quick-ref/java/collections-framework/#arraylist","title":"ArrayList","text":"<pre><code>List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();\n\n// Adding\nnums.add(2);\nnums.add(5);\nnums.add(8);\n\n// Retrieving\nSystem.out.println(nums.get(0));\n\n// Indexed for loop iteration\nfor (int i = 0; i &lt; nums.size(); i++) {\n    System.out.println(nums.get(i));\n}\n\nnums.remove(nums.size() - 1);\nnums.remove(0); // VERY slow\n\nfor (Integer value : nums) {\n    System.out.println(value);\n}\n</code></pre>"},{"location":"quick-ref/java/collections-framework/#hashmap","title":"HashMap","text":"<pre><code>Map&lt;Integer, String&gt; m = new HashMap&lt;&gt;();\nm.put(5, \"Five\");\nm.put(8, \"Eight\");\nm.put(6, \"Six\");\nm.put(4, \"Four\");\nm.put(2, \"Two\");\n\n// Retrieving\nSystem.out.println(m.get(6));\n\n// Lambda forEach\nm.forEach((key, value) -&gt; {\n    String msg = key + \": \" + value;\n    System.out.println(msg);\n});\n</code></pre>"},{"location":"quick-ref/java/collections-framework/#hashset","title":"HashSet","text":"<pre><code>Set&lt;String&gt; set = new HashSet&lt;&gt;();\nif (set.isEmpty()) {\n    System.out.println(\"Empty!\");\n}\n\nset.add(\"dog\");\nset.add(\"cat\");\nset.add(\"mouse\");\nset.add(\"snake\");\nset.add(\"bear\");\n\nif (set.contains(\"cat\")) {\n    System.out.println(\"Contains cat\");\n}\n\nset.remove(\"cat\");\nfor (String element : set) {\n    System.out.println(element);\n}\n</code></pre>"},{"location":"quick-ref/java/collections-framework/#arraydeque","title":"ArrayDeque","text":"<pre><code>Deque&lt;String&gt; a = new ArrayDeque&lt;&gt;();\n\n// Using add()\na.add(\"Dog\");\n\n// Using addFirst()\na.addFirst(\"Cat\");\n\n// Using addLast()\na.addLast(\"Horse\");\n\n// [Cat, Dog, Horse]\nSystem.out.println(a);\n\n// Access element\nSystem.out.println(a.peek());\n\n// Remove element\nSystem.out.println(a.pop());\n</code></pre>"},{"location":"quick-ref/java/conditionals/","title":"Conditionals","text":""},{"location":"quick-ref/java/conditionals/#operators","title":"Operators","text":"<ul> <li>+</li> <li>-</li> <li>*</li> <li>/</li> <li>%</li> <li>=</li> <li>++</li> <li>--</li> <li>!</li> </ul> <p>{.marker-none .cols-4}</p> <ul> <li>==</li> <li>!=</li> <li>&gt;</li> <li>&gt;=</li> <li>&lt;</li> <li>&lt;=</li> </ul> <p>{.marker-none .cols-4}</p> <ul> <li>&amp;&amp;</li> <li>||</li> <li>?:</li> </ul> <p>{.marker-none .cols-4}</p> <ul> <li>instanceof</li> </ul> <ul> <li>~</li> <li>&lt;&lt;</li> <li>&gt;&gt;</li> <li>&gt;&gt;&gt;</li> <li>&amp;</li> <li>^</li> <li>|</li> </ul> <p>{.marker-none .cols-4}</p>"},{"location":"quick-ref/java/conditionals/#if-else","title":"If else","text":"<pre><code>int k = 15;\nif (k &gt; 20) {\n  System.out.println(1);\n} else if (k &gt; 10) {\n  System.out.println(2);\n} else {\n  System.out.println(3);\n}\n</code></pre>"},{"location":"quick-ref/java/conditionals/#switch","title":"Switch","text":"<pre><code>int month = 3;\nString str;\nswitch (month) {\n  case 1:\n    str = \"January\";\n    break;\n  case 2:\n    str = \"February\";\n    break;\n  case 3:\n    str = \"March\";\n    break;\n  default:\n    str = \"Some other month\";\n    break;\n}\n\n// Outputs: Result March\nSystem.out.println(\"Result \" + str);\n</code></pre>"},{"location":"quick-ref/java/conditionals/#ternary-operator","title":"Ternary operator","text":"<pre><code>int a = 10;\nint b = 20;\nint max = (a &gt; b) ? a : b;\n\n// Outputs: 20\nSystem.out.println(max);\n</code></pre>"},{"location":"quick-ref/java/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/java/getting-started/#hellojava","title":"Hello.java","text":"<pre><code>public class Hello {\n  // main method\n  public static void main(String[] args)\n  {\n    // Output: Hello, world!\n    System.out.println(\"Hello, world!\");\n  }\n}\n</code></pre> <p>Compiling and running</p> <pre><code>$ javac Hello.java\n$ java Hello\nHello, world!\n</code></pre>"},{"location":"quick-ref/java/getting-started/#variables","title":"Variables","text":"<pre><code>int num = 5;\nfloat floatNum = 5.99f;\nchar letter = 'D';\nboolean bool = true;\nString site = \"cheatsheets.zip\";\n</code></pre>"},{"location":"quick-ref/java/getting-started/#primitive-data-types","title":"Primitive Data Types","text":"Data Type Size Default Range <code>byte</code> 1 byte 0 -128 ^to^ 127 <code>short</code> 2 byte 0 -2^15^ ^to^ 2^15^-1 <code>int</code> 4 byte 0 -2^31^ ^to^ 2^31^-1 <code>long</code> 8 byte 0 -2^63^ ^to^ 2^63^-1 <code>float</code> 4 byte 0.0f N/A <code>double</code> 8 byte 0.0d N/A <code>char</code> 2 byte \\u0000 0 ^to^ 65535 <code>boolean</code> N/A false true / false"},{"location":"quick-ref/java/getting-started/#strings","title":"Strings","text":"<pre><code>String first = \"John\";\nString last = \"Doe\";\nString name = first + \" \" + last;\nSystem.out.println(name);\n</code></pre>"},{"location":"quick-ref/java/getting-started/#loops","title":"Loops","text":"<pre><code>String word = \"CheatSheets\";\nfor (char c: word.toCharArray()) {\n  System.out.print(c + \"-\");\n}\n// Outputs: C-h-e-a-t-S-h-e-e-t-s-\n</code></pre>"},{"location":"quick-ref/java/getting-started/#arrays","title":"Arrays","text":"<pre><code>char[] chars = new char[10];\nchars[0] = 'a'\nchars[1] = 'b'\n\nString[] letters = {\"A\", \"B\", \"C\"};\nint[] mylist = {100, 200};\nboolean[] answers = {true, false};\n</code></pre>"},{"location":"quick-ref/java/getting-started/#swap","title":"Swap","text":"<pre><code>int a = 1;\nint b = 2;\nSystem.out.println(a + \" \" + b); // 1 2\n\nint temp = a;\na = b;\nb = temp;\nSystem.out.println(a + \" \" + b); // 2 1\n</code></pre>"},{"location":"quick-ref/java/getting-started/#type-casting","title":"Type Casting","text":"<pre><code>// Widening\n// byte&lt;short&lt;int&lt;long&lt;float&lt;double\nint i = 10;\nlong l = i;               // 10\n\n// Narrowing\ndouble d = 10.02;\nlong l = (long)d;         // 10\n\nString.valueOf(10);       // \"10\"\nInteger.parseInt(\"10\");   // 10\nDouble.parseDouble(\"10\"); // 10.0\n</code></pre>"},{"location":"quick-ref/java/getting-started/#conditionals","title":"Conditionals","text":"<pre><code>int j = 10;\n\nif (j == 10) {\n  System.out.println(\"I get printed\");\n} else if (j &gt; 10) {\n  System.out.println(\"I don't\");\n} else {\n  System.out.println(\"I also don't\");\n}\n</code></pre>"},{"location":"quick-ref/java/getting-started/#user-input","title":"User Input","text":"<pre><code>Scanner in = new Scanner(System.in);\nString str = in.nextLine();\nSystem.out.println(str);\n\nint num = in.nextInt();\nSystem.out.println(num);\n</code></pre>"},{"location":"quick-ref/java/loops/","title":"Loops","text":""},{"location":"quick-ref/java/loops/#for-loop","title":"For Loop","text":"<pre><code>for (int i = 0; i &lt; 10; i++) {\n  System.out.print(i);\n}\n// Outputs: 0123456789\n</code></pre> <pre><code>for (int i = 0,j = 0; i &lt; 3; i++,j--) {\n  System.out.print(j + \"|\" + i + \" \");\n}\n// Outputs: 0|0 -1|1 -2|2\n</code></pre>"},{"location":"quick-ref/java/loops/#enhanced-for-loop","title":"Enhanced For Loop","text":"<pre><code>int[] numbers = {1,2,3,4,5};\n\nfor (int number: numbers) {\n  System.out.print(number);\n}\n// Outputs: 12345\n</code></pre> <p>Used to loop around array's or List's</p>"},{"location":"quick-ref/java/loops/#while-loop","title":"While Loop","text":"<pre><code>int count = 0;\n\nwhile (count &lt; 5) {\n  System.out.print(count);\n  count++;\n}\n// Outputs: 01234\n</code></pre>"},{"location":"quick-ref/java/loops/#do-while-loop","title":"Do While Loop","text":"<pre><code>int count = 0;\n\ndo {\n  System.out.print(count);\n  count++;\n} while (count &lt; 5);\n// Outputs: 01234\n</code></pre>"},{"location":"quick-ref/java/loops/#continue-statement","title":"Continue Statement","text":"<pre><code>for (int i = 0; i &lt; 5; i++) {\n  if (i == 3) {\n    continue;\n  }\n  System.out.print(i);\n}\n// Outputs: 0124\n</code></pre>"},{"location":"quick-ref/java/loops/#break-statement","title":"Break Statement","text":"<pre><code>for (int i = 0; i &lt; 5; i++) {\n  System.out.print(i);\n  if (i == 3) {\n    break;\n  }\n}\n// Outputs: 0123\n</code></pre>"},{"location":"quick-ref/java/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/java/miscellaneous/#access-modifiers","title":"Access Modifiers","text":"Modifier Class Package Subclass World public Y Y Y Y protected Y Y Y N no modifier Y Y N N private Y N N N"},{"location":"quick-ref/java/miscellaneous/#regular-expressions","title":"Regular expressions","text":"<pre><code>String text = \"I am learning Java\";\n// Removing All Whitespace\ntext.replaceAll(\"\\\\s+\", \"\");\n\n// Splitting a String\ntext.split(\"\\\\|\");\ntext.split(Pattern.quote(\"|\"));\n</code></pre> <p>See: Regex in java</p>"},{"location":"quick-ref/java/miscellaneous/#comment","title":"Comment","text":"<pre><code>// I am a single line comment!\n\n/*\nAnd I am a\nmulti-line comment!\n*/\n\n/**\n * This\n * is\n * documentation\n * comment\n */\n</code></pre>"},{"location":"quick-ref/java/miscellaneous/#keywords","title":"Keywords","text":"<ul> <li><code>abstract</code></li> <li><code>continue</code></li> <li><code>for</code></li> <li><code>new</code></li> <li><code>switch</code></li> <li><code>assert</code></li> <li><code>default</code></li> <li><code>goto</code></li> <li><code>package</code></li> <li><code>synchronized</code></li> <li><code>boolean</code></li> <li><code>do</code></li> <li><code>if</code></li> <li><code>private</code></li> <li><code>this</code></li> <li><code>break</code></li> <li><code>double</code></li> <li><code>implements</code></li> <li><code>protected</code></li> <li><code>throw</code></li> <li><code>byte</code></li> <li><code>else</code></li> <li><code>import</code></li> <li><code>public</code></li> <li><code>throws</code></li> <li><code>case</code></li> <li><code>enum</code></li> <li><code>instanceof</code></li> <li><code>return</code></li> <li><code>transient</code></li> <li><code>catch</code></li> <li><code>extends</code></li> <li><code>int</code></li> <li><code>short</code></li> <li><code>try</code></li> <li><code>char</code></li> <li><code>final</code></li> <li><code>interface</code></li> <li><code>static</code></li> <li><code>void</code></li> <li><code>class</code></li> <li><code>finally</code></li> <li><code>long</code></li> <li><code>strictfp</code></li> <li><code>volatile</code></li> <li><code>const</code></li> <li><code>float</code></li> <li><code>native</code></li> <li><code>super</code></li> <li><code>while</code></li> </ul> <p>{.marker-none .cols-6}</p>"},{"location":"quick-ref/java/miscellaneous/#math-methods","title":"Math methods","text":"Method Description <code>Math.max(a,b)</code> Maximum of a and b <code>Math.min(a,b)</code> Minimum of a and b <code>Math.abs(a)</code> Absolute value a <code>Math.sqrt(a)</code> Square-root of a <code>Math.pow(a,b)</code> Power of b <code>Math.round(a)</code> Closest integer <code>Math.sin(ang)</code> Sine of ang <code>Math.cos(ang)</code> Cosine of ang <code>Math.tan(ang)</code> Tangent of ang <code>Math.asin(ang)</code> Inverse sine of ang <code>Math.log(a)</code> Natural logarithm of a <code>Math.toDegrees(rad)</code> Angle rad in degrees <code>Math.toRadians(deg)</code> Angle deg in radians"},{"location":"quick-ref/java/miscellaneous/#trycatchfinally","title":"Try/Catch/Finally","text":"<pre><code>try {\n  // something\n} catch (Exception e) {\n  e.printStackTrace();\n} finally {\n  System.out.println(\"always printed\");\n}\n</code></pre>"},{"location":"quick-ref/java/strings/","title":"Strings","text":""},{"location":"quick-ref/java/strings/#basic","title":"Basic","text":"<pre><code>String str1 = \"value\";\nString str2 = new String(\"value\");\nString str3 = String.valueOf(123);\n</code></pre>"},{"location":"quick-ref/java/strings/#concatenation","title":"Concatenation","text":"<pre><code>String s = 3 + \"str\" + 3;     // 3str3\nString s = 3 + 3 + \"str\";     // 6str\nString s = \"3\" + 3 + \"str\";   // 33str\nString s = \"3\" + \"3\" + \"23\";  // 3323\nString s = \"\" + 3 + 3 + \"23\"; // 3323\nString s = 3 + 3 + 23;        // Incompatible types\n</code></pre>"},{"location":"quick-ref/java/strings/#stringbuilder","title":"StringBuilder","text":"<p><code>StringBuilder sb = new StringBuilder(10);</code></p> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n|   |   |   |   |   |   |   |   |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n</code></pre> <p><code>sb.append(\"QuickRef\");</code></p> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| Q | u | i | c | k | R | e | f |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n</code></pre> <p><code>sb.delete(5, 9);</code></p> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| Q | u | i | c | k |   |   |   |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n</code></pre> <p><code>sb.insert(0, \"My \");</code></p> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| M | y |   | Q | u | i | c | k |   |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n</code></pre> <p><code>sb.append(\"!\");</code></p> <pre><code>\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n| M | y |   | Q | u | i | c | k | ! |\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n0   1   2   3   4   5   6   7   8   9\n</code></pre>"},{"location":"quick-ref/java/strings/#comparison","title":"Comparison","text":"<pre><code>String s1 = new String(\"cheatsheets.zip\");\nString s2 = new String(\"cheatsheets.zip\");\n\ns1 == s2          // false\ns1.equals(s2)     // true\n\n\"AB\".equalsIgnoreCase(\"ab\")  // true\n</code></pre>"},{"location":"quick-ref/java/strings/#manipulation","title":"Manipulation","text":"<pre><code>String str = \"Abcd\";\n\nstr.toUpperCase();     // ABCD\nstr.toLowerCase();     // abcd\nstr.concat(\"#\");       // Abcd#\nstr.replace(\"b\", \"-\"); // A-cd\n\n\"  abc \".trim();       // abc\n\"ab\".toCharArray();    // {'a', 'b'}\n</code></pre>"},{"location":"quick-ref/java/strings/#information","title":"Information","text":"<pre><code>String str = \"abcd\";\n\nstr.charAt(2);       // c\nstr.indexOf(\"a\")     // 0\nstr.indexOf(\"z\")     // -1\nstr.length();        // 4\nstr.toString();      // abcd\nstr.substring(2);    // cd\nstr.substring(2,3);  // c\nstr.contains(\"c\");   // true\nstr.endsWith(\"d\");   // true\nstr.startsWith(\"a\"); // true\nstr.isEmpty();       // false\n</code></pre>"},{"location":"quick-ref/java/strings/#immutable","title":"Immutable","text":"<pre><code>String str = \"hello\";\nstr.concat(\"world\");\n\n// Outputs: hello\nSystem.out.println(str);\n</code></pre> <pre><code>String str = \"hello\";\nString concat = str.concat(\"world\");\n\n// Outputs: helloworld\nSystem.out.println(concat);\n</code></pre> <p>Once created cannot be modified, any modification creates a new String</p>"},{"location":"quick-ref/javascript/","title":"JavaScript","text":"<p>Abstract</p> <p>A JavaScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Conditionals</li> <li>Functions</li> <li>Scope</li> <li>Arrays</li> <li>Set</li> <li>Loops</li> <li>Iterators</li> <li>Objects</li> <li>Classes</li> <li>Modules</li> <li>Promises</li> <li>Async-Await</li> <li>Requests</li> </ul>","tags":["js","web"]},{"location":"quick-ref/javascript/arrays/","title":"Arrays","text":""},{"location":"quick-ref/javascript/arrays/#create-array","title":"Create Array","text":"<pre><code>const fruits = [\"apple\", \"orange\", \"banana\"];\n\n// Different data types\nconst data = [1, \"chicken\", false];\n</code></pre>"},{"location":"quick-ref/javascript/arrays/#property-length","title":"Property .length","text":"<pre><code>const numbers = [1, 2, 3, 4];\n\nnumbers.length; // 4\n</code></pre>"},{"location":"quick-ref/javascript/arrays/#index","title":"Index","text":"<pre><code>// Accessing an array element\nconst myArray = [100, 200, 300];\n\nconsole.log(myArray[0]); // 100\nconsole.log(myArray[1]); // 200\n</code></pre>"},{"location":"quick-ref/javascript/arrays/#mutable-chart","title":"Mutable chart","text":"add remove start end <code>push</code> \u2714 \u2714 <code>pop</code> \u2714 \u2714 <code>unshift</code> \u2714 \u2714 <code>shift</code> \u2714 \u2714"},{"location":"quick-ref/javascript/arrays/#arraypush","title":"Array.push()","text":"<pre><code>// Adding a single element:\nconst cart = [\"apple\", \"orange\"];\ncart.push(\"pear\");\n\n// Adding multiple elements:\nconst numbers = [1, 2];\nnumbers.push(3, 4, 5);\n</code></pre> <p>Add items to the end and returns the new array length.</p>"},{"location":"quick-ref/javascript/arrays/#arraypop","title":"Array.pop()","text":"<pre><code>const fruits = [\"apple\", \"orange\", \"banana\"];\n\nconst fruit = fruits.pop(); // 'banana'\nconsole.log(fruits); // [\"apple\", \"orange\"]\n</code></pre> <p>Remove an item from the end and returns the removed item.</p>"},{"location":"quick-ref/javascript/arrays/#arrayshift","title":"Array.shift()","text":"<pre><code>let cats = [\"Bob\", \"Willy\", \"Mini\"];\n\ncats.shift(); // ['Willy', 'Mini']\n</code></pre> <p>Remove an item from the beginning and returns the removed item.</p>"},{"location":"quick-ref/javascript/arrays/#arrayunshift","title":"Array.unshift()","text":"<pre><code>let cats = [\"Bob\"];\n\n// =&gt; ['Willy', 'Bob']\ncats.unshift(\"Willy\");\n\n// =&gt; ['Puff', 'George', 'Willy', 'Bob']\ncats.unshift(\"Puff\", \"George\");\n</code></pre> <p>Add items to the beginning and returns the new array length.</p>"},{"location":"quick-ref/javascript/arrays/#arrayconcat","title":"Array.concat()","text":"<pre><code>const numbers = [3, 2, 1];\nconst newFirstNumber = 4;\n\n// =&gt; [ 4, 3, 2, 1 ]\n[newFirstNumber].concat(numbers);\n\n// =&gt; [ 3, 2, 1, 4 ]\nnumbers.concat(newFirstNumber);\n</code></pre> <p>If you want to avoid mutating your original array, you can use concat.</p>"},{"location":"quick-ref/javascript/async-await/","title":"Async-Await","text":""},{"location":"quick-ref/javascript/async-await/#asynchronous","title":"Asynchronous","text":"<pre><code>function helloWorld() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nconst msg = async function () {\n  //Async Function Expression\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n};\n\nconst msg1 = async () =&gt; {\n  //Async Arrow Function\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n};\n\nmsg(); // Message: Hello World! &lt;-- after 2 seconds\nmsg1(); // Message: Hello World! &lt;-- after 2 seconds\n</code></pre>"},{"location":"quick-ref/javascript/async-await/#resolving-promises","title":"Resolving Promises","text":"<pre><code>let pro1 = Promise.resolve(5);\nlet pro2 = 44;\nlet pro3 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"foo\");\n});\n\nPromise.all([pro1, pro2, pro3]).then(function (values) {\n  console.log(values);\n});\n// expected =&gt; Array [5, 44, \"foo\"]\n</code></pre>"},{"location":"quick-ref/javascript/async-await/#async-await-promises","title":"Async Await Promises","text":"<pre><code>function helloWorld() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n}\n\nmsg(); // Message: Hello World! &lt;-- after 2 seconds\n</code></pre>"},{"location":"quick-ref/javascript/async-await/#error-handling","title":"Error Handling","text":"<pre><code>let json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n  let user = JSON.parse(json); // &lt;-- no errors\n  console.log(user.name); // no name!\n} catch (e) {\n  console.error(\"Invalid JSON data!\");\n}\n</code></pre>"},{"location":"quick-ref/javascript/async-await/#async-await-operator","title":"Async await operator","text":"<pre><code>function helloWorld() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Hello World!\");\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log(\"Message:\", msg);\n}\n\nmsg(); // Message: Hello World! &lt;-- after 2 seconds\n</code></pre>"},{"location":"quick-ref/javascript/classes/","title":"Classes","text":""},{"location":"quick-ref/javascript/classes/#static-methods","title":"Static Methods","text":"<pre><code>class Dog {\n  constructor(name) {\n    this._name = name;\n  }\n\n  introduce() {\n    console.log(\"This is \" + this._name + \" !\");\n  }\n\n  // A static method\n  static bark() {\n    console.log(\"Woof!\");\n  }\n}\n\nconst myDog = new Dog(\"Buster\");\nmyDog.introduce();\n\n// Calling the static method\nDog.bark();\n</code></pre>"},{"location":"quick-ref/javascript/classes/#class","title":"Class","text":"<pre><code>class Song {\n  constructor() {\n    this.title;\n    this.author;\n  }\n\n  play() {\n    console.log(\"Song playing!\");\n  }\n}\n\nconst mySong = new Song();\nmySong.play();\n</code></pre>"},{"location":"quick-ref/javascript/classes/#class-constructor","title":"Class Constructor","text":"<pre><code>class Song {\n  constructor(title, artist) {\n    this.title = title;\n    this.artist = artist;\n  }\n}\n\nconst mySong = new Song(\"Bohemian Rhapsody\", \"Queen\");\nconsole.log(mySong.title);\n</code></pre>"},{"location":"quick-ref/javascript/classes/#class-methods","title":"Class Methods","text":"<pre><code>class Song {\n  play() {\n    console.log(\"Playing!\");\n  }\n\n  stop() {\n    console.log(\"Stopping!\");\n  }\n}\n</code></pre>"},{"location":"quick-ref/javascript/classes/#extends","title":"extends","text":"<pre><code>// Parent class\nclass Media {\n  constructor(info) {\n    this.publishDate = info.publishDate;\n    this.name = info.name;\n  }\n}\n\n// Child class\nclass Song extends Media {\n  constructor(songData) {\n    super(songData);\n    this.artist = songData.artist;\n  }\n}\n\nconst mySong = new Song({\n  artist: \"Queen\",\n  name: \"Bohemian Rhapsody\",\n  publishDate: 1975,\n});\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/","title":"Conditionals","text":""},{"location":"quick-ref/javascript/conditionals/#if-statement","title":"if Statement","text":"<pre><code>const isMailSent = true;\n\nif (isMailSent) {\n  console.log(\"Mail sent to recipient\");\n}\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#ternary-operator","title":"Ternary Operator","text":"<pre><code>var x = 1;\n\n// =&gt; true\nresult = x == 1 ? true : false;\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#operators","title":"Operators","text":"<pre><code>true || false; // true\n10 &gt; 5 || 10 &gt; 20; // true\nfalse || false; // false\n10 &gt; 100 || 10 &gt; 20; // false\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#logical-operator","title":"Logical Operator &amp;&amp;","text":"<pre><code>true &amp;&amp; true; // true\n1 &gt; 2 &amp;&amp; 2 &gt; 1; // false\ntrue &amp;&amp; false; // false\n4 === 4 &amp;&amp; 3 &gt; 1; // true\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#comparison-operators","title":"Comparison Operators","text":"<pre><code>1 &gt; 3; // false\n3 &gt; 1; // true\n250 &gt;= 250; // true\n1 === 1; // true\n1 === 2; // false\n1 === \"1\"; // false\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#logical-operator_1","title":"Logical Operator","text":"<pre><code>let lateToWork = true;\nlet oppositeValue = !lateToWork;\n\n// =&gt; false\nconsole.log(oppositeValue);\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#nullish-coalescing-operator","title":"Nullish coalescing operator ??","text":"<pre><code>null ?? \"I win\"; //  'I win'\nundefined ?? \"Me too\"; //  'Me too'\n\nfalse ?? \"I lose\"; //  false\n0 ?? \"I lose again\"; //  0\n\"\" ?? \"Damn it\"; //  ''\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#else-if","title":"else if","text":"<pre><code>const size = 10;\n\nif (size &gt; 100) {\n  console.log(\"Big\");\n} else if (size &gt; 20) {\n  console.log(\"Medium\");\n} else if (size &gt; 4) {\n  console.log(\"Small\");\n} else {\n  console.log(\"Tiny\");\n}\n// Print: Small\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#switch-statement","title":"switch Statement","text":"<pre><code>const food = \"salad\";\n\nswitch (food) {\n  case \"oyster\":\n    console.log(\"The taste of the sea\");\n    break;\n  case \"pizza\":\n    console.log(\"A delicious pie\");\n    break;\n  default:\n    console.log(\"Enjoy your meal\");\n}\n</code></pre>"},{"location":"quick-ref/javascript/conditionals/#vs","title":"== vs ===","text":"<pre><code>0 == false; // true\n0 === false; // false, different type\n1 == \"1\"; // true,  automatic type conversion\n1 === \"1\"; // false, different type\nnull == undefined; // true\nnull === undefined; // false\n\"0\" == false; // true\n\"0\" === false; // false\n</code></pre> <p>The <code>==</code> just check the value, <code>===</code> check both the value and the type.</p>"},{"location":"quick-ref/javascript/functions/","title":"Functions","text":""},{"location":"quick-ref/javascript/functions/#function-definition","title":"Function Definition","text":"<pre><code>// Defining the function:\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function:\nsum(3, 6); // 9\n</code></pre>"},{"location":"quick-ref/javascript/functions/#anonymous-functions","title":"Anonymous Functions","text":"<pre><code>// Named function\nfunction rocketToMars() {\n  return \"BOOM!\";\n}\n\n// Anonymous function\nconst rocketToMars = function () {\n  return \"BOOM!\";\n};\n</code></pre>"},{"location":"quick-ref/javascript/functions/#arrow-functions-es6","title":"Arrow Functions (ES6)","text":""},{"location":"quick-ref/javascript/functions/#with-two-arguments","title":"With two arguments","text":"<pre><code>const sum = (param1, param2) =&gt; {\n  return param1 + param2;\n};\nconsole.log(sum(2, 5)); // =&gt; 7\n</code></pre>"},{"location":"quick-ref/javascript/functions/#with-no-arguments","title":"With no arguments","text":"<pre><code>const printHello = () =&gt; {\n  console.log(\"hello\");\n};\nprintHello(); // =&gt; hello\n</code></pre>"},{"location":"quick-ref/javascript/functions/#with-a-single-argument","title":"With a single argument","text":"<pre><code>const checkWeight = (weight) =&gt; {\n  console.log(`Weight : ${weight}`);\n};\ncheckWeight(25); // =&gt; Weight : 25\n</code></pre>"},{"location":"quick-ref/javascript/functions/#concise-arrow-functions","title":"Concise arrow functions","text":"<pre><code>const multiply = (a, b) =&gt; a * b;\n// =&gt; 60\nconsole.log(multiply(2, 30));\n</code></pre> <p>Arrow function available starting ES2015</p>"},{"location":"quick-ref/javascript/functions/#return-keyword","title":"return Keyword","text":"<pre><code>// With return\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// The function doesn't output the sum\nfunction sum(num1, num2) {\n  num1 + num2;\n}\n</code></pre>"},{"location":"quick-ref/javascript/functions/#calling-functions","title":"Calling Functions","text":"<pre><code>// Defining the function\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function\nsum(2, 4); // 6\n</code></pre>"},{"location":"quick-ref/javascript/functions/#function-expressions","title":"Function Expressions","text":"<pre><code>const dog = function () {\n  return \"Woof!\";\n};\n</code></pre>"},{"location":"quick-ref/javascript/functions/#function-parameters","title":"Function Parameters","text":"<pre><code>// The parameter is name\nfunction sayHello(name) {\n  return `Hello, ${name}!`;\n}\n</code></pre>"},{"location":"quick-ref/javascript/functions/#function-declaration","title":"Function Declaration","text":"<pre><code>function add(num1, num2) {\n  return num1 + num2;\n}\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/javascript/getting-started/#introduction","title":"Introduction","text":"<p>JavaScript is a lightweight, interpreted programming language.</p> <ul> <li>JSON cheatsheet (cheatsheets.zip)</li> <li>Regex in JavaScript (cheatsheets.zip)</li> </ul>"},{"location":"quick-ref/javascript/getting-started/#console","title":"Console","text":"<pre><code>// =&gt; Hello world!\nconsole.log(\"Hello world!\");\n\n// =&gt; Hello CheatSheets.zip\nconsole.warn(\"hello %s\", \"CheatSheets.zip\");\n\n// Prints error message to stderr\nconsole.error(new Error(\"Oops!\"));\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#numbers","title":"Numbers","text":"<pre><code>let amount = 6;\nlet price = 4.99;\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#variables","title":"Variables","text":"<pre><code>let x = null;\nlet name = \"Tammy\";\nconst found = false;\n\n// =&gt; Tammy, false, null\nconsole.log(name, found, x);\n\nvar a;\nconsole.log(a); // =&gt; undefined\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#strings","title":"Strings","text":"<pre><code>let single = \"Wheres my bandit hat?\";\nlet double = \"Wheres my bandit hat?\";\n\n// =&gt; 21\nconsole.log(single.length);\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>5 + 5 = 10     // Addition\n10 - 5 = 5     // Subtraction\n5 * 10 = 50    // Multiplication\n10 / 5 = 2     // Division\n10 % 5 = 0     // Modulo\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#comments","title":"Comments","text":"<pre><code>// This line will denote a comment\n\n/*\nThe below configuration must be\nchanged before deployment.\n*/\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#assignment-operators","title":"Assignment Operators","text":"<pre><code>let number = 100;\n\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\n\nconsole.log(number);\n// =&gt; 120\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#string-interpolation","title":"String Interpolation","text":"<pre><code>let age = 7;\n\n// String concatenation\n\"Tommy is \" + age + \" years old.\";\n\n// String interpolation\n`Tommy is ${age} years old.`;\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#let-keyword","title":"let Keyword","text":"<pre><code>let count;\nconsole.log(count); // =&gt; undefined\ncount = 10;\nconsole.log(count); // =&gt; 10\n</code></pre>"},{"location":"quick-ref/javascript/getting-started/#const-keyword","title":"const Keyword","text":"<pre><code>const numberOfColumns = 4;\n\n// TypeError: Assignment to constant...\nnumberOfColumns = 8;\n</code></pre>"},{"location":"quick-ref/javascript/iterators/","title":"Iterators","text":""},{"location":"quick-ref/javascript/iterators/#functions-assigned-to-variables","title":"Functions Assigned to Variables","text":"<pre><code>let plusFive = (number) =&gt; {\n  return number + 5;\n};\n// f is assigned the value of plusFive\nlet f = plusFive;\n\nplusFive(3); // 8\n// Since f has a function value, it can be invoked.\nf(9); // 14\n</code></pre>"},{"location":"quick-ref/javascript/iterators/#callback-functions","title":"Callback Functions","text":"<pre><code>const isEven = (n) =&gt; {\n  return n % 2 == 0;\n};\n\nlet printMsg = (evenFunc, num) =&gt; {\n  const isNumEven = evenFunc(num);\n  console.log(`${num} is an even number: ${isNumEven}.`);\n};\n\n// Pass in isEven as the callback function\nprintMsg(isEven, 4);\n// =&gt; The number 4 is an even number: True.\n</code></pre>"},{"location":"quick-ref/javascript/iterators/#arrayreduce","title":"Array.reduce()","text":"<pre><code>const numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((accumulator, curVal) =&gt; {\n  return accumulator + curVal;\n});\n\nconsole.log(sum); // 10\n</code></pre>"},{"location":"quick-ref/javascript/iterators/#arraymap","title":"Array.map()","text":"<pre><code>const members = [\"Taylor\", \"Donald\", \"Don\", \"Natasha\", \"Bobby\"];\n\nconst announcements = members.map((member) =&gt; {\n  return member + \" joined the contest.\";\n});\n\nconsole.log(announcements);\n</code></pre>"},{"location":"quick-ref/javascript/iterators/#arrayforeach","title":"Array.forEach()","text":"<pre><code>const numbers = [28, 77, 45, 99, 27];\n\nnumbers.forEach((number) =&gt; {\n  console.log(number);\n});\n</code></pre>"},{"location":"quick-ref/javascript/iterators/#arrayfilter","title":"Array.filter()","text":"<pre><code>const randomNumbers = [4, 11, 42, 14, 39];\nconst filteredArray = randomNumbers.filter((n) =&gt; {\n  return n &gt; 5;\n});\n</code></pre>"},{"location":"quick-ref/javascript/loops/","title":"Loops","text":""},{"location":"quick-ref/javascript/loops/#while-loop","title":"While Loop","text":"<pre><code>while (condition) {\n  // code block to be executed\n}\n\nlet i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"quick-ref/javascript/loops/#reverse-loop","title":"Reverse Loop","text":"<pre><code>const fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let i = fruits.length - 1; i &gt;= 0; i--) {\n  console.log(`${i}. ${fruits[i]}`);\n}\n\n// =&gt; 2. banana\n// =&gt; 1. orange\n// =&gt; 0. apple\n</code></pre>"},{"location":"quick-ref/javascript/loops/#dowhile-statement","title":"Do\u2026While Statement","text":"<pre><code>x = 0;\ni = 0;\n\ndo {\n  x = x + i;\n  console.log(x);\n  i++;\n} while (i &lt; 5);\n// =&gt; 0 1 3 6 10\n</code></pre>"},{"location":"quick-ref/javascript/loops/#for-loop","title":"For Loop","text":"<pre><code>for (let i = 0; i &lt; 4; i += 1) {\n  console.log(i);\n}\n\n// =&gt; 0, 1, 2, 3\n</code></pre>"},{"location":"quick-ref/javascript/loops/#looping-through-arrays","title":"Looping Through Arrays","text":"<pre><code>for (let i = 0; i &lt; array.length; i++) {\n  console.log(array[i]);\n}\n\n// =&gt; Every item in the array\n</code></pre>"},{"location":"quick-ref/javascript/loops/#break","title":"Break","text":"<pre><code>for (let i = 0; i &lt; 99; i += 1) {\n  if (i &gt; 5) {\n    break;\n  }\n  console.log(i);\n}\n// =&gt; 0 1 2 3 4 5\n</code></pre>"},{"location":"quick-ref/javascript/loops/#continue","title":"Continue","text":"<pre><code>for (i = 0; i &lt; 10; i++) {\n  if (i === 3) {\n    continue;\n  }\n  text += \"The number is \" + i + \"&lt;br&gt;\";\n}\n</code></pre>"},{"location":"quick-ref/javascript/loops/#nested","title":"Nested","text":"<pre><code>for (let i = 0; i &lt; 2; i += 1) {\n  for (let j = 0; j &lt; 3; j += 1) {\n    console.log(`${i}-${j}`);\n  }\n}\n</code></pre>"},{"location":"quick-ref/javascript/loops/#forin-loop","title":"for...in loop","text":"<pre><code>const fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let index in fruits) {\n  console.log(index);\n}\n// =&gt; 0\n// =&gt; 1\n// =&gt; 2\n</code></pre>"},{"location":"quick-ref/javascript/loops/#forof-loop","title":"for...of loop","text":"<pre><code>const fruits = [\"apple\", \"orange\", \"banana\"];\n\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n// =&gt; apple\n// =&gt; orange\n// =&gt; banana\n</code></pre>"},{"location":"quick-ref/javascript/modules/","title":"Modules","text":""},{"location":"quick-ref/javascript/modules/#export","title":"Export","text":"<pre><code>// myMath.js\n\n// Default export\nexport default function add(x, y) {\n  return x + y;\n}\n\n// Normal export\nexport function subtract(x, y) {\n  return x - y;\n}\n\n// Multiple exports\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\nexport { multiply, duplicate };\n</code></pre>"},{"location":"quick-ref/javascript/modules/#import","title":"Import","text":"<pre><code>// main.js\nimport add, { subtract, multiply, duplicate } from './myMath.js';\n\nconsole.log(add(6, 2)); // 8\nconsole.log(subtract(6, 2)) // 4\nconsole.log(multiply(6, 2)); // 12\nconsole.log(duplicate(5)) // 10\n\n// index.html\n&lt;script type=\"module\" src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"quick-ref/javascript/modules/#export-module","title":"Export Module","text":"<pre><code>// myMath.js\n\nfunction add(x, y) {\n  return x + y;\n}\nfunction subtract(x, y) {\n  return x - y;\n}\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\n\n// Multiple exports in node.js\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  duplicate,\n};\n</code></pre>"},{"location":"quick-ref/javascript/modules/#require-module","title":"Require Module","text":"<pre><code>// main.js\nconst myMath = require(\"./myMath.js\");\n\nconsole.log(myMath.add(6, 2)); // 8\nconsole.log(myMath.subtract(6, 2)); // 4\nconsole.log(myMath.multiply(6, 2)); // 12\nconsole.log(myMath.duplicate(5)); // 10\n</code></pre>"},{"location":"quick-ref/javascript/objects/","title":"Objects","text":""},{"location":"quick-ref/javascript/objects/#accessing-properties","title":"Accessing Properties","text":"<pre><code>const apple = {\n  color: \"Green\",\n  price: { bulk: \"$3/kg\", smallQty: \"$4/kg\" },\n};\nconsole.log(apple.color); // =&gt; Green\nconsole.log(apple.price.bulk); // =&gt; $3/kg\n</code></pre>"},{"location":"quick-ref/javascript/objects/#naming-properties","title":"Naming Properties","text":"<pre><code>// Example of invalid key names\nconst trainSchedule = {\n  // Invalid because of the space between words.\n  platform num: 10,\n  // Expressions cannot be keys.\n  40 - 10 + 2: 30,\n  // A + sign is invalid unless it is enclosed in quotations.\n  +compartment: 'C'\n}\n</code></pre>"},{"location":"quick-ref/javascript/objects/#non-existent-properties","title":"Non-existent properties","text":"<pre><code>const classElection = {\n  date: \"January 12\",\n};\n\nconsole.log(classElection.place); // undefined\n</code></pre>"},{"location":"quick-ref/javascript/objects/#mutable","title":"Mutable","text":"<pre><code>const student = {\n  name: \"Sheldon\",\n  score: 100,\n  grade: \"A\",\n};\n\nconsole.log(student);\n// { name: 'Sheldon', score: 100, grade: 'A' }\n\ndelete student.score;\nstudent.grade = \"F\";\nconsole.log(student);\n// { name: 'Sheldon', grade: 'F' }\n\nstudent = {};\n// TypeError: Assignment to constant variable.\n</code></pre>"},{"location":"quick-ref/javascript/objects/#assignment-shorthand-syntax","title":"Assignment shorthand syntax","text":"<pre><code>const person = {\n  name: \"Tom\",\n  age: \"22\",\n};\nconst { name, age } = person;\nconsole.log(name); // 'Tom'\nconsole.log(age); // '22'\n</code></pre>"},{"location":"quick-ref/javascript/objects/#delete-operator","title":"Delete operator","text":"<pre><code>const person = {\n  firstName: \"Matilda\",\n  age: 27,\n  hobby: \"knitting\",\n  goal: \"learning JavaScript\",\n};\n\ndelete person.hobby; // or delete person[hobby];\n\nconsole.log(person);\n/*\n{\n  firstName: \"Matilda\"\n  age: 27\n  goal: \"learning JavaScript\"\n}\n*/\n</code></pre>"},{"location":"quick-ref/javascript/objects/#objects-as-arguments","title":"Objects as arguments","text":"<pre><code>const origNum = 8;\nconst origObj = { color: \"blue\" };\n\nconst changeItUp = (num, obj) =&gt; {\n  num = 7;\n  obj.color = \"red\";\n};\n\nchangeItUp(origNum, origObj);\n\n// Will output 8 since integers are passed by value.\nconsole.log(origNum);\n\n// Will output 'red' since objects are passed\n// by reference and are therefore mutable.\nconsole.log(origObj.color);\n</code></pre>"},{"location":"quick-ref/javascript/objects/#shorthand-object-creation","title":"Shorthand object creation","text":"<pre><code>const activity = \"Surfing\";\nconst beach = { activity };\nconsole.log(beach); // { activity: 'Surfing' }\n</code></pre>"},{"location":"quick-ref/javascript/objects/#this-keyword","title":"this Keyword","text":"<pre><code>const cat = {\n  name: \"Pipey\",\n  age: 8,\n  whatName() {\n    return this.name;\n  },\n};\nconsole.log(cat.whatName()); // =&gt; Pipey\n</code></pre>"},{"location":"quick-ref/javascript/objects/#factory-functions","title":"Factory functions","text":"<pre><code>// A factory function that accepts 'name',\n// 'age', and 'breed' parameters to return\n// a customized dog object.\nconst dogFactory = (name, age, breed) =&gt; {\n  return {\n    name: name,\n    age: age,\n    breed: breed,\n    bark() {\n      console.log(\"Woof!\");\n    },\n  };\n};\n</code></pre>"},{"location":"quick-ref/javascript/objects/#object-methods","title":"Object methods","text":"<pre><code>const engine = {\n  // method shorthand, with one argument\n  start(adverb) {\n    console.log(`The engine starts up ${adverb}...`);\n  },\n  // anonymous arrow function expression with no arguments\n  sputter: () =&gt; {\n    console.log(\"The engine sputters...\");\n  },\n};\n\nengine.start(\"noisily\");\nengine.sputter();\n</code></pre>"},{"location":"quick-ref/javascript/objects/#getters-and-setters","title":"Getters and setters","text":"<pre><code>const myCat = {\n  _name: \"Dottie\",\n  get name() {\n    return this._name;\n  },\n  set name(newName) {\n    this._name = newName;\n  },\n};\n\n// Reference invokes the getter\nconsole.log(myCat.name);\n\n// Assignment invokes the setter\nmyCat.name = \"Yankee\";\n</code></pre>"},{"location":"quick-ref/javascript/promises/","title":"Promises","text":""},{"location":"quick-ref/javascript/promises/#promise-states","title":"Promise states","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  const res = true;\n  // An asynchronous operation.\n  if (res) {\n    resolve(\"Resolved!\");\n  } else {\n    reject(Error(\"Error\"));\n  }\n});\n\npromise.then(\n  (res) =&gt; console.log(res),\n  (err) =&gt; console.error(err),\n);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#executor-function","title":"Executor function","text":"<pre><code>const executorFn = (resolve, reject) =&gt; {\n  resolve(\"Resolved!\");\n};\n\nconst promise = new Promise(executorFn);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#settimeout","title":"setTimeout()","text":"<pre><code>const loginAlert = () =&gt; {\n  console.log(\"Login\");\n};\n\nsetTimeout(loginAlert, 6000);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#then-method","title":".then() method","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"Result\");\n  }, 200);\n});\n\npromise.then(\n  (res) =&gt; {\n    console.log(res);\n  },\n  (err) =&gt; {\n    console.error(err);\n  },\n);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#promisecatch","title":"Promise.catch()","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    reject(Error(\"Promise Rejected Unconditionally.\"));\n  }, 1000);\n});\n\npromise.then((res) =&gt; {\n  console.log(value);\n});\n\npromise.catch((err) =&gt; {\n  console.error(err);\n});\n</code></pre>"},{"location":"quick-ref/javascript/promises/#promiseall","title":"Promise.all()","text":"<pre><code>const promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(3);\n  }, 300);\n});\nconst promise2 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(2);\n  }, 200);\n});\n\nPromise.all([promise1, promise2]).then((res) =&gt; {\n  console.log(res[0]);\n  console.log(res[1]);\n});\n</code></pre>"},{"location":"quick-ref/javascript/promises/#avoiding-nested-promise-and-then","title":"Avoiding nested Promise and .then()","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"*\");\n  }, 1000);\n});\n\nconst twoStars = (star) =&gt; {\n  return star + star;\n};\n\nconst oneDot = (star) =&gt; {\n  return star + \".\";\n};\n\nconst print = (val) =&gt; {\n  console.log(val);\n};\n\n// Chaining them all together\npromise.then(twoStars).then(oneDot).then(print);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#creating","title":"Creating","text":"<pre><code>const executorFn = (resolve, reject) =&gt; {\n  console.log(\"The executor function of the promise!\");\n};\n\nconst promise = new Promise(executorFn);\n</code></pre>"},{"location":"quick-ref/javascript/promises/#chaining-multiple-then","title":"Chaining multiple .then()","text":"<pre><code>const promise = new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(\"dAlan\"), 100));\n\npromise\n  .then((res) =&gt; {\n    return res === \"Alan\" ? Promise.resolve(\"Hey Alan!\") : Promise.reject(\"Who are you?\");\n  })\n  .then(\n    (res) =&gt; {\n      console.log(res);\n    },\n    (err) =&gt; {\n      console.error(err);\n    },\n  );\n</code></pre>"},{"location":"quick-ref/javascript/promises/#fake-http-request-with-promise","title":"Fake http Request with Promise","text":"<pre><code>const mock = (success, timeout = 1000) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (success) {\n        resolve({ status: 200, data: {} });\n      } else {\n        reject({ message: \"Error\" });\n      }\n    }, timeout);\n  });\n};\nconst someEvent = async () =&gt; {\n  try {\n    await mock(true, 1000);\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n</code></pre>"},{"location":"quick-ref/javascript/requests/","title":"Requests","text":""},{"location":"quick-ref/javascript/requests/#json","title":"JSON","text":"<pre><code>const jsonObj = {\n  \"name\": \"Rick\",\n  \"id\": \"11A\",\n  \"level\": 4\n};\n</code></pre> <p>Also see: JSON cheatsheet</p>"},{"location":"quick-ref/javascript/requests/#xmlhttprequest","title":"XMLHttpRequest","text":"<pre><code>const xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"mysite.com/getjson\");\n</code></pre> <p><code>XMLHttpRequest</code> is a browser-level API that enables the client to script data transfers via JavaScript, NOT part of the JavaScript language.</p>"},{"location":"quick-ref/javascript/requests/#get","title":"GET","text":"<pre><code>const req = new XMLHttpRequest();\nreq.responseType = \"json\";\nreq.open(\"GET\", \"/getdata?id=65\");\nreq.onload = () =&gt; {\n  console.log(xhr.response);\n};\n\nreq.send();\n</code></pre>"},{"location":"quick-ref/javascript/requests/#post","title":"POST","text":"<pre><code>const data = {\n  fish: \"Salmon\",\n  weight: \"1.5 KG\",\n  units: 5,\n};\nconst xhr = new XMLHttpRequest();\nxhr.open(\"POST\", \"/inventory/add\");\nxhr.responseType = \"json\";\nxhr.send(JSON.stringify(data));\n\nxhr.onload = () =&gt; {\n  console.log(xhr.response);\n};\n</code></pre>"},{"location":"quick-ref/javascript/requests/#fetch-api","title":"fetch api","text":"<pre><code>fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'apikey': apiKey\n    },\n    body: data\n  }).then(response =&gt; {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Request failed!');\n  }, networkError =&gt; {\n    console.log(networkError.message)\n  })\n}\n</code></pre>"},{"location":"quick-ref/javascript/requests/#json-formatted","title":"JSON Formatted","text":"<pre><code>fetch(\"url-that-returns-JSON\")\n  .then((response) =&gt; response.json())\n  .then((jsonResponse) =&gt; {\n    console.log(jsonResponse);\n  });\n</code></pre>"},{"location":"quick-ref/javascript/requests/#promise-url-parameter-fetch-api","title":"promise url parameter fetch api","text":"<pre><code>fetch('url')\n.then(\n  response  =&gt; {\n    console.log(response);\n  },\n rejection =&gt; {\n    console.error(rejection.message);\n);\n</code></pre>"},{"location":"quick-ref/javascript/requests/#fetch-api-function","title":"Fetch API Function","text":"<pre><code>fetch(\"https://api-xxx.com/endpoint\", {\n  method: \"POST\",\n  body: JSON.stringify({ id: \"200\" }),\n})\n  .then(\n    (response) =&gt; {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(\"Request failed!\");\n    },\n    (networkError) =&gt; {\n      console.log(networkError.message);\n    },\n  )\n  .then((jsonResponse) =&gt; {\n    console.log(jsonResponse);\n  });\n</code></pre>"},{"location":"quick-ref/javascript/requests/#async-await-syntax","title":"async await syntax","text":"<pre><code>const getSuggestions = async () =&gt; {\n  const wordQuery = inputField.value;\n  const endpoint = `${url}${queryParams}${wordQuery}`;\n  try {\n    const response = await fetch(endpoint, { cache: \"no-cache\" });\n    if (response.ok) {\n      const jsonResponse = await response.json();\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n</code></pre>"},{"location":"quick-ref/javascript/scope/","title":"Scope","text":""},{"location":"quick-ref/javascript/scope/#scope_1","title":"Scope","text":"<pre><code>function myFunction() {\n  var pizzaName = \"Margarita\";\n  // Code here can use pizzaName\n}\n\n// Code here can't use pizzaName\n</code></pre>"},{"location":"quick-ref/javascript/scope/#block-scoped-variables","title":"Block Scoped Variables","text":"<pre><code>const isLoggedIn = true;\n\nif (isLoggedIn == true) {\n  const statusMessage = \"Logged in.\";\n}\n\n// Uncaught ReferenceError...\nconsole.log(statusMessage);\n</code></pre>"},{"location":"quick-ref/javascript/scope/#global-variables","title":"Global Variables","text":"<pre><code>// Variable declared globally\nconst color = \"blue\";\n\nfunction printColor() {\n  console.log(color);\n}\n\nprintColor(); // =&gt; blue\n</code></pre>"},{"location":"quick-ref/javascript/scope/#let-vs-var","title":"let vs var","text":"<pre><code>for (let i = 0; i &lt; 3; i++) {\n  // This is the Max Scope for 'let'\n  // i accessible \u2714\ufe0f\n}\n// i not accessible \u274c\n</code></pre> <pre><code>for (var i = 0; i &lt; 3; i++) {\n  // i accessible \u2714\ufe0f\n}\n// i accessible \u2714\ufe0f\n</code></pre> <p><code>var</code> is scoped to the nearest function block, and <code>let</code> is scoped to the nearest enclosing block.</p>"},{"location":"quick-ref/javascript/scope/#loops-with-closures","title":"Loops with closures","text":"<pre><code>// Prints 3 thrice, not what we meant.\nfor (var i = 0; i &lt; 3; i++) {\n  setTimeout(_ =&gt; console.log(i), 10);\n}\n</code></pre> <pre><code>// Prints 0, 1 and 2, as expected.\nfor (let j = 0; j &lt; 3; j++) {\n  setTimeout(_ =&gt; console.log(j), 10);\n}\n</code></pre> <p>The variable has its own copy using <code>let</code>, and the variable has shared copy using <code>var</code>.</p>"},{"location":"quick-ref/javascript/set/","title":"Set","text":""},{"location":"quick-ref/javascript/set/#create-set","title":"Create Set","text":"<pre><code>// Empty Set Object\nconst emptySet = new Set();\n\n// Set Object with values\nconst setObj = new Set([1, true, \"hi\"]);\n</code></pre>"},{"location":"quick-ref/javascript/set/#add","title":"Add","text":"<pre><code>const emptySet = new Set();\n\n// add values\nemptySet.add(\"a\"); // 'a'\nemptySet.add(1); // 'a', 1\nemptySet.add(true); // 'a', 1, true\nemptySet.add(\"a\"); // 'a', 1, true\n</code></pre>"},{"location":"quick-ref/javascript/set/#delete","title":"Delete","text":"<pre><code>const emptySet = new Set([1, true, \"a\"]);\n\n// delete values\nemptySet.delete(\"a\"); // 1, true\nemptySet.delete(true); // 1\nemptySet.delete(1); //\n</code></pre>"},{"location":"quick-ref/javascript/set/#has","title":"Has","text":"<pre><code>const setObj = new Set([1, true, \"a\"]);\n\n// returns true or false\nsetObj.has(\"a\"); // true\nsetObj.has(1); // true\nsetObj.has(false); // false\n</code></pre>"},{"location":"quick-ref/javascript/set/#clear","title":"Clear","text":"<pre><code>const setObj = new Set([1, true, \"a\"]);\n\n// clears the set\nconsole.log(setObj); // 1, true, 'a'\nsetObj.clear(); //\n</code></pre>"},{"location":"quick-ref/javascript/set/#size","title":"Size","text":"<pre><code>const setObj = new Set([1, true, \"a\"]);\n\nconsoloe.log(setObj.size); // 3\n</code></pre>"},{"location":"quick-ref/javascript/set/#foreach","title":"ForEach","text":"<pre><code>const setObj = new Set([1, true, \"a\"]);\n\nsetObj.forEach(function (value) {\n  console.log(value);\n});\n\n// 1\n// true\n// 'a'\n</code></pre>"},{"location":"quick-ref/php/","title":"PHP","text":"<p>Abstract</p> <p>This PHP cheat sheet provides a reference for quickly looking up the correct syntax for the code you use most frequently.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Types</li> <li>Strings</li> <li>Arrays</li> <li>Operators</li> <li>Conditionals</li> <li>Loops</li> <li>Functions</li> <li>Classes</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["web"]},{"location":"quick-ref/php/also-see/","title":"Also See","text":"<ul> <li>PHP Docs</li> <li>Learn X in Y minutes</li> </ul>"},{"location":"quick-ref/php/arrays/","title":"Arrays","text":""},{"location":"quick-ref/php/arrays/#defining","title":"Defining","text":"<pre><code>$a1 = [\"hello\", \"world\", \"!\"]\n$a2 = array(\"hello\", \"world\", \"!\");\n$a3 = explode(\",\", \"apple,pear,peach\");\n</code></pre>"},{"location":"quick-ref/php/arrays/#mixed-int-and-string-keys","title":"Mixed int and string keys","text":"<pre><code>$array = array(\n    \"foo\" =&gt; \"bar\",\n    \"bar\" =&gt; \"foo\",\n    100   =&gt; -100,\n    -100  =&gt; 100,\n);\nvar_dump($array);\n</code></pre>"},{"location":"quick-ref/php/arrays/#short-array-syntax","title":"Short array syntax","text":"<pre><code>$array = [\n    \"foo\" =&gt; \"bar\",\n    \"bar\" =&gt; \"foo\",\n];\n</code></pre>"},{"location":"quick-ref/php/arrays/#multi-array","title":"Multi array","text":"<pre><code>$multiArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r($multiArray[0][0]) # =&gt; 1\nprint_r($multiArray[0][1]) # =&gt; 2\nprint_r($multiArray[0][2]) # =&gt; 3\n</code></pre>"},{"location":"quick-ref/php/arrays/#multi-type","title":"Multi type","text":"<pre><code>$array = array(\n    \"foo\" =&gt; \"bar\",\n    42    =&gt; 24,\n    \"multi\" =&gt; array(\n         \"dim\" =&gt; array(\n             \"a\" =&gt; \"foo\"\n         )\n    )\n);\n\n# =&gt; string(3) \"bar\"\nvar_dump($array[\"foo\"]);\n\n# =&gt; int(24)\nvar_dump($array[42]);\n\n# =&gt;  string(3) \"foo\"\nvar_dump($array[\"multi\"][\"dim\"][\"a\"]);\n</code></pre>"},{"location":"quick-ref/php/arrays/#manipulation","title":"manipulation","text":"<pre><code>$arr = array(5 =&gt; 1, 12 =&gt; 2);\n$arr[] = 56;      // Append\n$arr[\"x\"] = 42;   // Add with key\nsort($arr);       // Sort\nunset($arr[5]);   // Remove\nunset($arr);      // Remove all\n</code></pre> <p>See: Array Functions</p>"},{"location":"quick-ref/php/arrays/#indexing-iteration","title":"Indexing iteration","text":"<pre><code>$array = array('a', 'b', 'c');\n$count = count($array);\n\nfor ($i = 0; $i &lt; $count; $i++) {\n    echo \"i:{$i}, v:{$array[$i]}\\n\";\n}\n</code></pre>"},{"location":"quick-ref/php/arrays/#value-iteration","title":"Value iteration","text":"<pre><code>$colors = array('red', 'blue', 'green');\n\nforeach ($colors as $color) {\n    echo \"Do you like $color?\\n\";\n}\n</code></pre>"},{"location":"quick-ref/php/arrays/#key-iteration","title":"Key iteration","text":"<pre><code>$arr = [\"foo\" =&gt; \"bar\", \"bar\" =&gt; \"foo\"];\n\nforeach ( $arr as $key =&gt; $value )\n{\n   echo \"key: \" . $key . \"\\n\";\n    echo \"val: {$arr[$key]}\\n\";\n}\n</code></pre>"},{"location":"quick-ref/php/arrays/#concatenate-arrays","title":"Concatenate arrays","text":"<pre><code>$a = [1, 2];\n$b = [3, 4];\n\n// PHP 7.4 later\n# =&gt; [1, 2, 3, 4]\n$result = [...$a, ...$b];\n</code></pre>"},{"location":"quick-ref/php/arrays/#into-functions","title":"Into functions","text":"<pre><code>$array = [1, 2];\n\nfunction foo(int $a, int $b) {\n echo $a; # =&gt; 1\n   echo $b; # =&gt; 2\n}\nfoo(...$array);\n</code></pre>"},{"location":"quick-ref/php/arrays/#splat-operator","title":"Splat Operator","text":"<pre><code>function foo($first, ...$other) {\n var_dump($first); # =&gt; a\n   var_dump($other); # =&gt; ['b', 'c']\n}\nfoo('a', 'b', 'c' /*, ...*/ );\n// or\nfunction foo($first, string ...$other){}\n</code></pre>"},{"location":"quick-ref/php/classes/","title":"Classes","text":""},{"location":"quick-ref/php/classes/#constructor","title":"Constructor","text":"<pre><code>class Student {\n    public function __construct($name) {\n        $this-&gt;name = $name;\n    }\n   public function print() {\n        echo \"Name: \" . $this-&gt;name;\n    }\n}\n$alex = new Student(\"Alex\");\n$alex-&gt;print();    # =&gt; Name: Alex\n</code></pre>"},{"location":"quick-ref/php/classes/#inheritance","title":"Inheritance","text":"<pre><code>class ExtendClass extends SimpleClass\n{\n    // Redefine the parent method\n    function displayVar()\n    {\n        echo \"Extending class\\n\";\n        parent::displayVar();\n    }\n}\n\n$extended = new ExtendClass();\n$extended-&gt;displayVar();\n</code></pre>"},{"location":"quick-ref/php/classes/#classes-variables","title":"Classes variables","text":"<pre><code>class MyClass\n{\n    const MY_CONST       = 'value';\n    static $staticVar    = 'static';\n\n    // Visibility\n    public static $var1  = 'pubs';\n\n    // Class only\n    private static $var2 = 'pris';\n\n    // The class and subclasses\n    protected static $var3 = 'pros';\n\n    // The class and subclasses\n    protected $var6      = 'pro';\n\n    // The class only\n    private $var7        = 'pri';\n}\n</code></pre> <p>Access statically</p> <pre><code>echo MyClass::MY_CONST;   # =&gt; value\necho MyClass::$staticVar; # =&gt; static\n</code></pre>"},{"location":"quick-ref/php/classes/#magic-methods","title":"Magic Methods","text":"<pre><code>class MyClass\n{\n    // Object is treated as a String\n    public function __toString()\n    {\n        return $property;\n    }\n    // opposite to __construct()\n    public function __destruct()\n    {\n        print \"Destroying\";\n    }\n}\n</code></pre>"},{"location":"quick-ref/php/classes/#interface","title":"Interface","text":"<pre><code>interface Foo\n{\n    public function doSomething();\n}\ninterface Bar\n{\n    public function doSomethingElse();\n}\nclass Cls implements Foo, Bar\n{\n    public function doSomething() {}\n    public function doSomethingElse() {}\n}\n</code></pre>"},{"location":"quick-ref/php/conditionals/","title":"Conditionals","text":""},{"location":"quick-ref/php/conditionals/#if-elseif-else","title":"If elseif else","text":"<pre><code>$a = 10;\n$b = 20;\n\nif ($a &gt; $b) {\n    echo \"a is bigger than b\";\n} elseif ($a == $b) {\n    echo \"a is equal to b\";\n} else {\n    echo \"a is smaller than b\";\n}\n</code></pre>"},{"location":"quick-ref/php/conditionals/#switch","title":"Switch","text":"<pre><code>$x = 0;\nswitch ($x) {\n    case '0':\n        print \"it's zero\";\n        break;\n    case 'two':\n    case 'three':\n        // do something\n        break;\n    default:\n        // do something\n}\n</code></pre>"},{"location":"quick-ref/php/conditionals/#ternary-operator","title":"Ternary operator","text":"<pre><code># =&gt; Does\nprint (false ? 'Not' : 'Does');\n\n$x = false;\n# =&gt; Does\nprint($x ?: 'Does');\n\n$a = null;\n$b = 'Does print';\n# =&gt; a is unset\necho $a ?? 'a is unset';\n# =&gt; print\necho $b ?? 'b is unset';\n</code></pre>"},{"location":"quick-ref/php/conditionals/#match","title":"Match","text":"<pre><code>$statusCode = 500;\n$message = match($statusCode) {\n  200, 300 =&gt; null,\n  400 =&gt; 'not found',\n  500 =&gt; 'server error',\n  default =&gt; 'known status code',\n};\necho $message; # =&gt; server error\n</code></pre> <p>See: Match</p>"},{"location":"quick-ref/php/conditionals/#match-expressions","title":"Match expressions","text":"<pre><code>$age = 23;\n\n$result = match (true) {\n    $age &gt;= 65 =&gt; 'senior',\n    $age &gt;= 25 =&gt; 'adult',\n    $age &gt;= 18 =&gt; 'young adult',\n    default =&gt; 'kid',\n};\n\necho $result; # =&gt; young adult\n</code></pre>"},{"location":"quick-ref/php/functions/","title":"Functions","text":""},{"location":"quick-ref/php/functions/#returning-values","title":"Returning values","text":"<pre><code>function square($x)\n{\n    return $x * $x;\n}\n\necho square(4);  # =&gt; 16\n</code></pre>"},{"location":"quick-ref/php/functions/#return-types","title":"Return types","text":"<pre><code>// Basic return type declaration\nfunction sum($a, $b): float {/*...*/}\nfunction get_item(): string {/*...*/}\n\nclass C {}\n// Returning an object\nfunction getC(): C { return new C; }\n</code></pre>"},{"location":"quick-ref/php/functions/#nullable-return-types","title":"Nullable return types","text":"<pre><code>// Available in PHP 7.1\nfunction nullOrString(int $v) : ?string\n{\n    return $v % 2 ? \"odd\" : null;\n}\necho nullOrString(3);       # =&gt; odd\nvar_dump(nullOrString(4));  # =&gt; NULL\n</code></pre> <p>See: Nullable types</p>"},{"location":"quick-ref/php/functions/#void-functions","title":"Void functions","text":"<pre><code>// Available in PHP 7.1\nfunction voidFunction(): void\n{\n echo 'Hello';\n return;\n}\n\nvoidFunction();  # =&gt; Hello\n</code></pre>"},{"location":"quick-ref/php/functions/#variable-functions","title":"Variable functions","text":"<pre><code>function bar($arg = '')\n{\n    echo \"In bar(); arg: '$arg'.\\n\";\n}\n\n$func = 'bar';\n$func('test'); # =&gt; In bar(); arg: test\n</code></pre>"},{"location":"quick-ref/php/functions/#anonymous-functions","title":"Anonymous functions","text":"<pre><code>$greet = function($name)\n{\n    printf(\"Hello %s\\r\\n\", $name);\n};\n\n$greet('World'); # =&gt; Hello World\n$greet('PHP');   # =&gt; Hello PHP\n</code></pre>"},{"location":"quick-ref/php/functions/#recursive-functions","title":"Recursive functions","text":"<pre><code>function recursion($x)\n{\n    if ($x &lt; 5) {\n        echo \"$x\";\n        recursion($x + 1);\n    }\n}\nrecursion(1);  # =&gt; 1234\n</code></pre>"},{"location":"quick-ref/php/functions/#default-parameters","title":"Default parameters","text":"<pre><code>function coffee($type = \"cappuccino\")\n{\n    return \"Making a cup of $type.\\n\";\n}\n# =&gt; Making a cup of cappuccino.\necho coffee();\n# =&gt; Making a cup of .\necho coffee(null);\n# =&gt; Making a cup of espresso.\necho coffee(\"espresso\");\n</code></pre>"},{"location":"quick-ref/php/functions/#arrow-functions","title":"Arrow Functions","text":"<pre><code>$y = 1;\n\n$fn1 = fn($x) =&gt; $x + $y;\n\n// equivalent to using $y by value:\n$fn2 = function ($x) use ($y) {\n    return $x + $y;\n};\necho $fn1(5);   # =&gt; 6\necho $fn2(5);   # =&gt; 6\n</code></pre>"},{"location":"quick-ref/php/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/php/getting-started/#hellophp","title":"hello.php","text":"<pre><code>&lt;?php // begin with a PHP open tag.\n\necho \"Hello World\\n\";\nprint(\"Hello cheatsheets.zip\");\n\n?&gt;\n</code></pre> <p>PHP run command</p> <p>```shell script php hello.php <pre><code>## Variables\n\n```php\n$boolean1 = true;\n$boolean2 = True;\n\n$int = 12;\n$float = 3.1415926;\nunset($float);  // Delete variable\n\n$str1 = \"How are you?\";\n$str2 = 'Fine, thanks';\n</code></pre></p>"},{"location":"quick-ref/php/getting-started/#strings","title":"Strings","text":"<pre><code>$url = \"cheatsheets.zip\";\necho \"I'm learning PHP at $url\";\n\n// Concatenate strings\necho \"I'm learning PHP at \" . $url;\n\n$hello = \"Hello, \";\n$hello .= \"World!\";\necho $hello;   # =&gt; Hello, World!\n</code></pre>"},{"location":"quick-ref/php/getting-started/#arrays","title":"Arrays","text":"<pre><code>$num = [1, 3, 5, 7, 9];\n$num[5] = 11;\nunset($num[2]);    // Delete variable\nprint_r($num);     # =&gt; 1 3 7 9 11\necho count($num);  # =&gt; 5\n</code></pre>"},{"location":"quick-ref/php/getting-started/#operators","title":"Operators","text":"<pre><code>$x = 1;\n$y = 2;\n\n$sum = $x + $y;\necho $sum;   # =&gt; 3\n</code></pre>"},{"location":"quick-ref/php/getting-started/#include","title":"Include","text":""},{"location":"quick-ref/php/getting-started/#varsphp","title":"vars.php","text":"<pre><code>&lt;?php // begin with a PHP open tag.\n$fruit = 'apple';\necho \"I was imported\";\nreturn 'Anything you like.';\n?&gt;\n</code></pre>"},{"location":"quick-ref/php/getting-started/#testphp","title":"test.php","text":"<pre><code>&lt;?php\ninclude 'vars.php';\necho $fruit . \"\\n\";   # =&gt; apple\n\n/* Same as include,\ncause an error if cannot be included*/\nrequire 'vars.php';\n\n// Also works\ninclude('vars.php');\nrequire('vars.php');\n\n// Include through HTTP\ninclude 'http://x.com/file.php';\n\n// Include and the return statement\n$result = include 'vars.php';\necho $result;  # =&gt; Anything you like.\n?&gt;\n</code></pre>"},{"location":"quick-ref/php/getting-started/#functions","title":"Functions","text":"<pre><code>function add($num1, $num2 = 1) {\n    return $num1 + $num2;\n}\necho add(10);    # =&gt; 11\necho add(10, 5); # =&gt; 15\n</code></pre>"},{"location":"quick-ref/php/getting-started/#comments","title":"Comments","text":"<pre><code># This is a one line shell-style comment\n\n// This is a one line c++ style comment\n\n/* This is a multi line comment\n   yet another line of comment */\n</code></pre>"},{"location":"quick-ref/php/getting-started/#constants","title":"Constants","text":"<pre><code>const MY_CONST = \"hello\";\n\necho MY_CONST;   # =&gt; hello\n\n# =&gt; MY_CONST is: hello\necho 'MY_CONST is: ' . MY_CONST;\n</code></pre>"},{"location":"quick-ref/php/getting-started/#classes","title":"Classes","text":"<pre><code>class Student {\n    public function __construct($name) {\n        $this-&gt;name = $name;\n    }\n}\n$alex = new Student(\"Alex\");\n</code></pre>"},{"location":"quick-ref/php/loops/","title":"Loops","text":""},{"location":"quick-ref/php/loops/#while","title":"while","text":"<pre><code>$i = 1;\n# =&gt; 12345\nwhile ($i &lt;= 5) {\n    echo $i++;\n}\n</code></pre>"},{"location":"quick-ref/php/loops/#do-while","title":"do while","text":"<pre><code>$i = 1;\n# =&gt; 12345\ndo {\n    echo $i++;\n} while ($i &lt;= 5);\n</code></pre>"},{"location":"quick-ref/php/loops/#for-i","title":"for i","text":"<pre><code># =&gt; 12345\nfor ($i = 1; $i &lt;= 5; $i++) {\n    echo $i;\n}\n</code></pre>"},{"location":"quick-ref/php/loops/#break","title":"break","text":"<pre><code># =&gt; 123\nfor ($i = 1; $i &lt;= 5; $i++) {\n    if ($i === 4) {\n        break;\n    }\n    echo $i;\n}\n</code></pre>"},{"location":"quick-ref/php/loops/#continue","title":"continue","text":"<pre><code># =&gt; 1235\nfor ($i = 1; $i &lt;= 5; $i++) {\n    if ($i === 4) {\n        continue;\n    }\n    echo $i;\n}\n</code></pre>"},{"location":"quick-ref/php/loops/#foreach","title":"foreach","text":"<pre><code>$a = ['foo' =&gt; 1, 'bar' =&gt; 2];\n# =&gt; 12\nforeach ($a as $k) {\n    echo $k;\n}\n</code></pre>"},{"location":"quick-ref/php/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/php/miscellaneous/#basic-error-handling","title":"Basic error handling","text":"<pre><code>try {\n    // Do something\n} catch (Exception $e) {\n    // Handle exception\n} finally {\n    echo \"Always print!\";\n}\n</code></pre>"},{"location":"quick-ref/php/miscellaneous/#exception-in-php-80","title":"Exception in PHP 8.0","text":"<pre><code>$nullableValue = null;\n\ntry {\n $value = $nullableValue ?? throw new InvalidArgumentException();\n} catch (InvalidArgumentException) { // Variable is optional\n    // Handle my exception\n    echo \"print me!\";\n}\n</code></pre>"},{"location":"quick-ref/php/miscellaneous/#custom-exception","title":"Custom exception","text":"<pre><code>class MyException extends Exception {\n    // do something\n}\n</code></pre> <p>Usage</p> <pre><code>try {\n    $condition = true;\n    if ($condition) {\n        throw new MyException('bala');\n    }\n} catch (MyException $e) {\n    // Handle my exception\n}\n</code></pre>"},{"location":"quick-ref/php/miscellaneous/#nullsafe-operator","title":"Nullsafe Operator","text":"<pre><code>// As of PHP 8.0.0, this line:\n$result = $repo?-&gt;getUser(5)?-&gt;name;\n\n// Equivalent to the following code:\nif (is_null($repo)) {\n    $result = null;\n} else {\n    $user = $repository-&gt;getUser(5);\n    if (is_null($user)) {\n        $result = null;\n    } else {\n        $result = $user-&gt;name;\n    }\n}\n</code></pre> <p>See also: Nullsafe Operator</p>"},{"location":"quick-ref/php/miscellaneous/#regular-expressions","title":"Regular expressions","text":"<pre><code>$str = \"Visit cheatsheets.zip\";\necho preg_match(\"/ch/i\", $str); # =&gt; 1\n</code></pre> <p>See: Regex in PHP</p>"},{"location":"quick-ref/php/miscellaneous/#fopen-mode","title":"fopen() mode","text":"- - <code>r</code> Read <code>r+</code> Read and write, prepend <code>w</code> Write, truncate <code>w+</code> Read and write, truncate <code>a</code> Write, append <code>a+</code> Read and write, append"},{"location":"quick-ref/php/miscellaneous/#runtime-defined-constants","title":"Runtime defined Constants","text":"<pre><code>define(\"CURRENT_DATE\", date('Y-m-d'));\n\n// One possible representation\necho CURRENT_DATE;   # =&gt; 2021-01-05\n\n# =&gt; CURRENT_DATE is: 2021-01-05\necho 'CURRENT_DATE is: ' . CURRENT_DATE;\n</code></pre>"},{"location":"quick-ref/php/operators/","title":"Operators","text":""},{"location":"quick-ref/php/operators/#arithmetic","title":"Arithmetic","text":"- - <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulo <code>**</code> Exponentiation"},{"location":"quick-ref/php/operators/#assignment","title":"Assignment","text":"- - <code>a += b</code> Same as <code>a = a + b</code> <code>a -= b</code> Same as <code>a = a \u2013 b</code> <code>a *= b</code> Same as <code>a = a * b</code> <code>a /= b</code> Same as <code>a = a / b</code> <code>a %= b</code> Same as <code>a = a % b</code>"},{"location":"quick-ref/php/operators/#comparison","title":"Comparison","text":"- - <code>==</code> Equal <code>===</code> Identical <code>!=</code> Not equal <code>&lt;&gt;</code> Not equal <code>!==</code> Not identical <code>&lt;</code> Less than <code>&gt;</code> Greater than <code>&lt;=</code> Less than or equal <code>&gt;=</code> Greater than or equal <code>&lt;=&gt;</code> Less than/equal/greater than"},{"location":"quick-ref/php/operators/#logical","title":"Logical","text":"- - <code>and</code> And <code>or</code> Or <code>xor</code> Exclusive or <code>!</code> Not <code>&amp;&amp;</code> And <code>||</code> Or"},{"location":"quick-ref/php/operators/#arithmetic_1","title":"Arithmetic","text":"<pre><code>// Arithmetic\n$sum        = 1 + 1; // 2\n$difference = 2 - 1; // 1\n$product    = 2 * 2; // 4\n$quotient   = 2 / 1; // 2\n\n// Shorthand arithmetic\n$num = 0;\n$num += 1;       // Increment $num by 1\necho $num++;     // Prints 1 (increments after evaluation)\necho ++$num;     // Prints 3 (increments before evaluation)\n$num /= $float;  // Divide and assign the quotient to $num\n</code></pre>"},{"location":"quick-ref/php/operators/#bitwise","title":"Bitwise","text":"- - <code>&amp;</code> And <code>|</code> Or (inclusive or) <code>^</code> Xor (exclusive or) <code>~</code> Not <code>&lt;&lt;</code> Shift left <code>&gt;&gt;</code> Shift right"},{"location":"quick-ref/php/strings/","title":"Strings","text":""},{"location":"quick-ref/php/strings/#string","title":"String","text":"<pre><code># =&gt; '$String'\n$sgl_quotes = '$String';\n\n# =&gt; 'This is a $String.'\n$dbl_quotes = \"This is a $sgl_quotes.\";\n\n# =&gt; a   tab character.\n$escaped   = \"a \\t tab character.\";\n\n# =&gt; a slash and a t: \\t\n$unescaped = 'a slash and a t: \\t';\n</code></pre>"},{"location":"quick-ref/php/strings/#multi-line","title":"Multi-line","text":"<pre><code>$str = \"foo\";\n\n// Uninterpolated multi-liners\n$nowdoc = &lt;&lt;&lt;'END'\nMulti line string\n$str\nEND;\n\n// Will do string interpolation\n$heredoc = &lt;&lt;&lt;END\nMulti line\n$str\nEND;\n</code></pre>"},{"location":"quick-ref/php/strings/#manipulation","title":"Manipulation","text":"<pre><code>$s = \"Hello Phper\";\necho strlen($s);       # =&gt; 11\n\necho substr($s, 0, 3); # =&gt; Hel\necho substr($s, 1);    # =&gt; ello Phper\necho substr($s, -4, 3);# =&gt; hpe\n\necho strtoupper($s);   # =&gt; HELLO PHPER\necho strtolower($s);   # =&gt; hello phper\n\necho strpos($s, \"l\");      # =&gt; 2\nvar_dump(strpos($s, \"L\")); # =&gt; false\n</code></pre> <p>See: String Functions</p>"},{"location":"quick-ref/php/types/","title":"Types","text":""},{"location":"quick-ref/php/types/#boolean","title":"Boolean","text":"<pre><code>$boolean1 = true;\n$boolean2 = TRUE;\n$boolean3 = false;\n$boolean4 = FALSE;\n\n$boolean5 = (boolean) 1;   # =&gt; true\n$boolean6 = (boolean) 0;   # =&gt; false\n</code></pre> <p>Boolean are case-insensitive</p>"},{"location":"quick-ref/php/types/#integer","title":"Integer","text":"<pre><code>$int1 = 28;    # =&gt; 28\n$int2 = -32;   # =&gt; -32\n$int3 = 012;   # =&gt; 10 (octal)\n$int4 = 0x0F;  # =&gt; 15 (hex)\n$int5 = 0b101; # =&gt; 5  (binary)\n\n# =&gt; 2000100000 (decimal, PHP 7.4.0)\n$int6 = 2_000_100_000;\n</code></pre> <p>See also: Integers</p>"},{"location":"quick-ref/php/types/#strings","title":"Strings","text":"<pre><code>echo 'this is a simple string';\n</code></pre>"},{"location":"quick-ref/php/types/#arrays","title":"Arrays","text":"<pre><code>$arr = array(\"hello\", \"world\", \"!\");\n</code></pre>"},{"location":"quick-ref/php/types/#float-double","title":"Float (Double)","text":"<pre><code>$float1 = 1.234;\n$float2 = 1.2e7;\n$float3 = 7E-10;\n\n$float4 = 1_234.567;  // as of PHP 7.4.0\nvar_dump($float4);    // float(1234.567)\n\n$float5 = 1 + \"10.5\";   # =&gt; 11.5\n$float6 = 1 + \"-1.3e3\"; # =&gt; -1299\n</code></pre>"},{"location":"quick-ref/php/types/#null","title":"Null","text":"<pre><code>$a = null;\n$b = 'Hello php!';\necho $a ?? 'a is unset'; # =&gt; a is unset\necho $b ?? 'b is unset'; # =&gt; Hello php\n\n$a = array();\n$a == null    # =&gt; true\n$a === null   # =&gt; false\nis_null($a)   # =&gt; false\n</code></pre>"},{"location":"quick-ref/php/types/#iterables","title":"Iterables","text":"<pre><code>function bar(): iterable {\n    return [1, 2, 3];\n}\nfunction gen(): iterable {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nforeach (bar() as $value) {\n    echo $value;   # =&gt; 123\n}\n</code></pre>"},{"location":"quick-ref/postgres/","title":"PostgreSQL","text":"<p>Abstract</p> <p>The PostgreSQL cheat sheet provides you with the common PostgreSQL commands and statements.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Basics</li> <li>Commands</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["database","db","sql"]},{"location":"quick-ref/postgres/also-see/","title":"Also See","text":"<ul> <li>Posgres-cheatsheet (gist.github.com)</li> </ul>"},{"location":"quick-ref/postgres/basics/","title":"Basics","text":""},{"location":"quick-ref/postgres/basics/#recon","title":"Recon","text":"<p>Show version</p> <pre><code>SHOW SERVER_VERSION;\n</code></pre> <p>Show system status</p> <pre><code>\\conninfo\n</code></pre> <p>Show environmental variables</p> <pre><code>SHOW ALL;\n</code></pre> <p>List users</p> <pre><code>SELECT rolname FROM pg_roles;\n</code></pre> <p>Show current user</p> <pre><code>SELECT current_user;\n</code></pre> <p>Show current user's permissions</p> <pre><code>\\du\n</code></pre> <p>Show current database</p> <pre><code>SELECT current_database();\n</code></pre> <p>Show all tables in database</p> <pre><code>\\dt\n</code></pre> <p>List functions</p> <pre><code>\\df &lt;schema&gt;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#databases","title":"Databases","text":"<p>List databases</p> <pre><code>\\l\n</code></pre> <p>Connect to database</p> <pre><code>\\c &lt;database_name&gt;\n</code></pre> <p>Show current database</p> <pre><code>SELECT current_database();\n</code></pre> <p>Create database</p> <pre><code>CREATE DATABASE &lt;database_name&gt; WITH OWNER &lt;username&gt;;\n</code></pre> <p>Drop database</p> <pre><code>DROP DATABASE IF EXISTS &lt;database_name&gt;;\n</code></pre> <p>Rename database</p> <pre><code>ALTER DATABASE &lt;old_name&gt; RENAME TO &lt;new_name&gt;;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#tables","title":"Tables","text":"<p>List tables, in current db</p> <pre><code>\\dt\n\nSELECT table_schema,table_name FROM information_schema.tables ORDER BY table_schema,table_name;\n</code></pre> <p>List tables, globally</p> <pre><code>\\dt *.*.\n\nSELECT * FROM pg_catalog.pg_tables\n</code></pre> <p>List table schema</p> <pre><code>\\d &lt;table_name&gt;\n\\d+ &lt;table_name&gt;\n\nSELECT column_name, data_type, character_maximum_length\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE table_name = '&lt;table_name&gt;';\n</code></pre> <p>Create table</p> <pre><code>CREATE TABLE &lt;table_name&gt;(\n  &lt;column_name&gt; &lt;column_type&gt;,\n  &lt;column_name&gt; &lt;column_type&gt;\n);\n</code></pre> <p>Create table, with an auto-incrementing primary key</p> <pre><code>CREATE TABLE &lt;table_name&gt; (\n  &lt;column_name&gt; SERIAL PRIMARY KEY\n);\n</code></pre> <p>Delete table</p> <pre><code>DROP TABLE IF EXISTS &lt;table_name&gt; CASCADE;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#permissions","title":"Permissions","text":"<p>Become the postgres user, if you have permission errors</p> <pre><code>sudo su - postgres\npsql\n</code></pre> <p>Grant all permissions on database</p> <pre><code>GRANT ALL PRIVILEGES ON DATABASE &lt;db_name&gt; TO &lt;user_name&gt;;\n</code></pre> <p>Grant connection permissions on database</p> <pre><code>GRANT CONNECT ON DATABASE &lt;db_name&gt; TO &lt;user_name&gt;;\n</code></pre> <p>Grant permissions on schema</p> <pre><code>GRANT USAGE ON SCHEMA public TO &lt;user_name&gt;;\n</code></pre> <p>Grant permissions to functions</p> <pre><code>GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO &lt;user_name&gt;;\n</code></pre> <p>Grant permissions to select, update, insert, delete, on a all tables</p> <pre><code>GRANT SELECT, UPDATE, INSERT ON ALL TABLES IN SCHEMA public TO &lt;user_name&gt;;\n</code></pre> <p>Grant permissions, on a table</p> <pre><code>GRANT SELECT, UPDATE, INSERT ON &lt;table_name&gt; TO &lt;user_name&gt;;\n</code></pre> <p>Grant permissions, to select, on a table</p> <pre><code>GRANT SELECT ON ALL TABLES IN SCHEMA public TO &lt;user_name&gt;;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#columns","title":"Columns","text":"<p>Add column</p> <pre><code>ALTER TABLE &lt;table_name&gt; IF EXISTS\nADD &lt;column_name&gt; &lt;data_type&gt; [&lt;constraints&gt;];\n</code></pre> <p>Update column</p> <pre><code>ALTER TABLE &lt;table_name&gt; IF EXISTS\nALTER &lt;column_name&gt; TYPE &lt;data_type&gt; [&lt;constraints&gt;];\n</code></pre> <p>Delete column</p> <pre><code>ALTER TABLE &lt;table_name&gt; IF EXISTS\nDROP &lt;column_name&gt;;\n</code></pre> <p>Update column to be an auto-incrementing primary key</p> <pre><code>ALTER TABLE &lt;table_name&gt;\nADD COLUMN &lt;column_name&gt; SERIAL PRIMARY KEY;\n</code></pre> <p>Insert into a table, with an auto-incrementing primary key</p> <pre><code>INSERT INTO &lt;table_name&gt;\nVALUES (DEFAULT, &lt;value1&gt;);\n\n\nINSERT INTO &lt;table_name&gt; (&lt;column1_name&gt;,&lt;column2_name&gt;)\nVALUES ( &lt;value1&gt;,&lt;value2&gt; );\n</code></pre>"},{"location":"quick-ref/postgres/basics/#data","title":"Data","text":"<p>Select all data</p> <pre><code>SELECT * FROM &lt;table_name&gt;;\n</code></pre> <p>Read one row of data</p> <pre><code>SELECT * FROM &lt;table_name&gt; LIMIT 1;\n</code></pre> <p>Search for data</p> <pre><code>SELECT * FROM &lt;table_name&gt; WHERE &lt;column_name&gt; = &lt;value&gt;;\n</code></pre> <p>Insert data</p> <pre><code>INSERT INTO &lt;table_name&gt; VALUES( &lt;value_1&gt;, &lt;value_2&gt; );\n</code></pre> <p>Update data</p> <pre><code>UPDATE &lt;table_name&gt;\nSET &lt;column_1&gt; = &lt;value_1&gt;, &lt;column_2&gt; = &lt;value_2&gt;\nWHERE &lt;column_1&gt; = &lt;value&gt;;\n</code></pre> <p>Delete all data</p> <pre><code>DELETE FROM &lt;table_name&gt;;\n</code></pre> <p>Delete specific data</p> <pre><code>DELETE FROM &lt;table_name&gt;\nWHERE &lt;column_name&gt; = &lt;value&gt;;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#users","title":"Users","text":"<p>List roles</p> <pre><code>SELECT rolname FROM pg_roles;\n</code></pre> <p>Create user</p> <pre><code>CREATE USER &lt;user_name&gt; WITH PASSWORD '&lt;password&gt;';\n</code></pre> <p>Drop user</p> <pre><code>DROP USER IF EXISTS &lt;user_name&gt;;\n</code></pre> <p>Alter user password</p> <pre><code>ALTER ROLE &lt;user_name&gt; WITH PASSWORD '&lt;password&gt;';\n</code></pre>"},{"location":"quick-ref/postgres/basics/#schema","title":"Schema","text":"<p>List schemas</p> <pre><code>\\dn\n\nSELECT schema_name FROM information_schema.schemata;\n\nSELECT nspname FROM pg_catalog.pg_namespace;\n</code></pre> <p>Create schema</p> <pre><code>CREATE SCHEMA IF NOT EXISTS &lt;schema_name&gt;;\n</code></pre> <p>Drop schema</p> <pre><code>DROP SCHEMA IF EXISTS &lt;schema_name&gt; CASCADE;\n</code></pre>"},{"location":"quick-ref/postgres/basics/#dates","title":"Dates","text":"<p>Show current date YYYY-MM-DD</p> <pre><code>SELECT current_date;\n</code></pre> <p>Calculate age between two dates</p> <pre><code>SELECT age(timestamp, timestamp);\n</code></pre> <p>Show current time with time zone</p> <pre><code>SELECT current_time;\n</code></pre> <p>Make dates using integers</p> <pre><code>SELECT make_date(2021,03,25);\n</code></pre>"},{"location":"quick-ref/postgres/commands/","title":"Commands","text":""},{"location":"quick-ref/postgres/commands/#tables","title":"Tables","text":"- - <code>\\d &lt;table&gt;</code> Describe table <code>\\d+ &lt;table&gt;</code> Describe table with details <code>\\dt</code> List tables from current schema <code>\\dt *.*</code> List tables from all schemas <code>\\dt &lt;schema&gt;.*</code> List tables for a schema <code>\\dp</code> List table access privileges <code>\\det[+]</code> List foreign tables"},{"location":"quick-ref/postgres/commands/#query-buffer","title":"Query buffer","text":"- - <code>\\e [FILE]</code> Edit the query buffer (or file) <code>\\ef [FUNC]</code> Edit function definition <code>\\p</code> Show the contents <code>\\r</code> Reset (clear) the query buffer <code>\\s [FILE]</code> Display history or save it to file <code>\\w FILE</code> Write query buffer to file"},{"location":"quick-ref/postgres/commands/#informational","title":"Informational","text":"- - <code>\\l[+]</code> List all databases <code>\\dn[S+]</code> List schemas <code>\\di[S+]</code> List indexes <code>\\du[+]</code> List roles <code>\\ds[S+]</code> List sequences <code>\\df[antw][S+]</code> List functions <code>\\deu[+]</code> List user mappings <code>\\dv[S+]</code> List views <code>\\dl</code> List large objects <code>\\dT[S+]</code> List data types <code>\\da[S]</code> List aggregates <code>\\db[+]</code> List tablespaces <code>\\dc[S+]</code> List conversions <code>\\dC[+]</code> List casts <code>\\ddp</code> List default privileges <code>\\dd[S]</code> Show object descriptions <code>\\dD[S+]</code> List domains <code>\\des[+]</code> List foreign servers <code>\\dew[+]</code> List foreign-data wrappers <code>\\dF[+]</code> List text search configurations <code>\\dFd[+]</code> List text search dictionaries <code>\\dFp[+]</code> List text search parsers <code>\\dFt[+]</code> List text search templates <code>\\dL[S+]</code> List procedural languages <code>\\do[S]</code> List operators <code>\\dO[S+]</code> List collations <code>\\drds</code> List per-database role settings <code>\\dx[+]</code> List extensions <p><code>S</code>: show system objects, <code>+</code>: additional detail</p>"},{"location":"quick-ref/postgres/commands/#connection","title":"Connection","text":"- - <code>\\c [DBNAME]</code> Connect to new database <code>\\encoding [ENCODING]</code> Show or set client encoding <code>\\password [USER]</code> Change the password <code>\\conninfo</code> Display information"},{"location":"quick-ref/postgres/commands/#formatting","title":"Formatting","text":"- - <code>\\a</code> Toggle between unaligned and aligned <code>\\C [STRING]</code> Set table title, or unset if none <code>\\f [STRING]</code> Show or set field separator for unaligned <code>\\H</code> Toggle HTML output mode <code>\\t [on|off]</code> Show only rows <code>\\T [STRING]</code> Set or unset HTML \\&lt;table&gt; tag attributes <code>\\x [on|off]</code> Toggle expanded output"},{"location":"quick-ref/postgres/commands/#inputoutput","title":"Input/Output","text":"- - <code>\\copy ...</code> Import/export table See also: copy <code>\\echo [STRING]</code> Print string <code>\\i FILE</code> Execute file <code>\\o [FILE]</code> Export all results to file <code>\\qecho [STRING]</code> String to output stream"},{"location":"quick-ref/postgres/commands/#variables","title":"Variables","text":"- - <code>\\prompt [TEXT] NAME</code> Set variable <code>\\set [NAME [VALUE]]</code> Set variable (or list all if no parameters) <code>\\unset NAME</code> Delete variable"},{"location":"quick-ref/postgres/commands/#misc","title":"Misc","text":"- - <code>\\cd [DIR]</code> Change the directory <code>\\timing [on|off]</code> Toggle timing <code>\\! [COMMAND]</code> Execute in shell <code>\\! ls -l</code> List all in shell"},{"location":"quick-ref/postgres/commands/#large-objects","title":"Large Objects","text":"<ul> <li><code>\\lo_export LOBOID FILE</code></li> <li><code>\\lo_import FILE [COMMENT]</code></li> <li><code>\\lo_list</code></li> <li><code>\\lo_unlink LOBOID</code></li> </ul>"},{"location":"quick-ref/postgres/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/postgres/getting-started/#getting-started_1","title":"Getting started","text":"<p>Switch and connect</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>List all databases</p> <pre><code>postgres=# \\l\n</code></pre> <p>Connect to the database named postgres</p> <pre><code>postgres=# \\c postgres\n</code></pre> <p>Disconnect</p> <pre><code>postgres=# \\q\npostgres=# \\!\n</code></pre>"},{"location":"quick-ref/postgres/getting-started/#psql-commands","title":"psql commands","text":"Option Example Description <code>[-d] &lt;database&gt;</code> psql -d mydb Connecting to database <code>-U</code> psql -U john mydb Connecting as a specific user <code>-h</code> <code>-p</code> psql -h localhost -p 5432 mydb Connecting to a host/port <code>-U</code> <code>-h</code> <code>-p</code> <code>-d</code> psql -U admin -h 192.168.1.5 -p 2506 -d mydb Connect remote PostgreSQL <code>-W</code> psql -W mydb Force password <code>-c</code> psql -c '\\c postgres' -c '\\dt' Execute a SQL query or command <code>-H</code> psql -c \"\\l+\" -H postgres &gt; database.html Generate HTML report <code>-l</code> psql -l List all databases <code>-f</code> psql mydb -f file.sql Execute commands from a file <code>-V</code> psql -V Print the psql version"},{"location":"quick-ref/postgres/getting-started/#getting-help","title":"Getting help","text":"- - <code>\\h</code> Help on syntax of SQL commands <code>\\h</code> DELETE DELETE SQL statement syntax <code>\\?</code> List of PostgreSQL command <p>Run in PostgreSQL console</p>"},{"location":"quick-ref/postgres/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/postgres/miscellaneous/#backup","title":"Backup","text":"<p>Use pg_dumpall to backup all databases</p> <pre><code>pg_dumpall -U postgres &gt; all.sql\n</code></pre> <p>Use pg_dump to backup a database</p> <pre><code>pg_dump -d mydb -f mydb_backup.sql\n</code></pre> - - <code>-a</code> Dump only the data, not the schema <code>-s</code> Dump only the schema, no data <code>-c</code> Drop database before recreating <code>-C</code> Create database before restoring <code>-t</code> Dump the named table(s) only <code>-F</code> Format (<code>c</code>: custom, <code>d</code>: directory, <code>t</code>: tar) <p>Use <code>pg_dump -?</code> to get the full list of options</p>"},{"location":"quick-ref/postgres/miscellaneous/#restore","title":"Restore","text":"<p>Restore a database with psql</p> <pre><code>psql -U user mydb &lt; mydb_backup.sql\n</code></pre> <p>Restore a database with pg_restore</p> <pre><code>pg_restore -d mydb mydb_backup.sql -c\n</code></pre> - - <code>-U</code> Specify a database user <code>-c</code> Drop database before recreating <code>-C</code> Create database before restoring <code>-e</code> Exit if an error has encountered <code>-F</code> Format (<code>c</code>: custom, <code>d</code>: directory, <code>t</code>: tar, <code>p</code>: plain text sql(default)) <p>Use <code>pg_restore -?</code> to get the full list of options</p>"},{"location":"quick-ref/postgres/miscellaneous/#remote-access","title":"Remote access","text":"<p>Get location of postgresql.conf</p> <pre><code>psql -U postgres -c 'SHOW config_file'\n</code></pre> <p>Append to postgresql.conf</p> <pre><code>listen_addresses = '*'\n</code></pre> <p>Append to pg_hba.conf (Same location as postgresql.conf)</p> <pre><code>host  all  all  0.0.0.0/0  md5\nhost  all  all  ::/0       md5\n</code></pre> <p>Restart PostgreSQL server</p> <pre><code>sudo systemctl restart postgresql\n</code></pre>"},{"location":"quick-ref/postgres/miscellaneous/#importexport-csv","title":"Import/Export CSV","text":"<p>Export table into CSV file</p> <pre><code>\\copy table TO '&lt;path&gt;' CSV\n\\copy table(col1,col1) TO '&lt;path&gt;' CSV\n\\copy (SELECT...) TO '&lt;path&gt;' CSV\n</code></pre> <p>Import CSV file into table</p> <pre><code>\\copy table FROM '&lt;path&gt;' CSV\n\\copy table(col1,col1) FROM '&lt;path&gt;' CSV\n</code></pre> <p>See also: Copy</p>"},{"location":"quick-ref/python/","title":"Python","text":"<p>Abstract</p> <p>A concise and practical Python cheat sheet covering key syntax, core concepts, and useful features for quick reference.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Built-in Data Types</li> <li>Advanced Data Types</li> <li>Strings</li> <li>F-Strings</li> <li>Lists</li> <li>Flow Control</li> <li>Loops</li> <li>Functions</li> <li>Modules</li> <li>File Handling</li> <li>Classes and Inheritance</li> <li>Type Hints</li> <li>Operators</li> <li>Miscellaneous</li> </ul>","tags":["script","interpret"]},{"location":"quick-ref/python/advanced-data-types/","title":"Advanced Data Types","text":""},{"location":"quick-ref/python/advanced-data-types/#heaps","title":"Heaps","text":"<pre><code>import heapq\n\nmyList = [9, 5, 4, 1, 3, 2]\nheapq.heapify(myList) # turn myList into a Min Heap\nprint(myList)    # =&gt; [1, 3, 2, 5, 9, 4]\nprint(myList[0]) # first value is always the smallest in the heap\n\nheapq.heappush(myList, 10) # insert 10\nx = heapq.heappop(myList)  # pop and return smallest item\nprint(x)                   # =&gt; 1\n</code></pre>"},{"location":"quick-ref/python/advanced-data-types/#negate-all-values-to-use-min-heap-as-max-heap","title":"Negate all values to use Min Heap as Max Heap","text":"<pre><code>myList = [9, 5, 4, 1, 3, 2]\nmyList = [-val for val in myList] # multiply by -1 to negate\nheapq.heapify(myList)\n\nx = heapq.heappop(myList)\nprint(-x) # =&gt; 9 (making sure to multiply by -1 again)\n</code></pre> <p>Heaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for accessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See: Heapq</p>"},{"location":"quick-ref/python/advanced-data-types/#stacks-and-queues","title":"Stacks and Queues","text":"<pre><code>from collections import deque\n\nq = deque()          # empty\nq = deque([1, 2, 3]) # with values\n\nq.append(4)     # append to right side\nq.appendleft(0) # append to left side\nprint(q)    # =&gt; deque([0, 1, 2, 3, 4])\n\nx = q.pop() # remove &amp; return from right\ny = q.popleft() # remove &amp; return from left\nprint(x)    # =&gt; 4\nprint(y)    # =&gt; 0\nprint(q)    # =&gt; deque([1, 2, 3])\n\nq.rotate(1) # rotate 1 step to the right\nprint(q)    # =&gt; deque([3, 1, 2])\n</code></pre> <p>Deque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See: Deque</p>"},{"location":"quick-ref/python/built-in-data-types/","title":"Built-in Data Types","text":""},{"location":"quick-ref/python/built-in-data-types/#strings","title":"Strings","text":"<pre><code>hello = \"Hello World\"\nhello = 'Hello World'\n\nmulti_string = \"\"\"Multiline Strings\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit \"\"\"\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#numbers","title":"Numbers","text":"<pre><code>x = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n&gt;&gt;&gt; print(type(x))\n&lt;class 'int'&gt;\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#booleans","title":"Booleans","text":"<pre><code>my_bool = True\nmy_bool = False\n\nbool(0)     # =&gt; False\nbool(1)     # =&gt; True\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#lists","title":"Lists","text":"<pre><code>list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [True, False, False]\nlist3 = [1, 5, 7, 9, 3]\nlist4 = list((1, 5, 7, 9, 3))\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#tuple","title":"Tuple","text":"<pre><code>my_tuple = (1, 2, 3)\nmy_tuple = tuple((1, 2, 3))\n</code></pre> <p>Similar to List but immutable</p>"},{"location":"quick-ref/python/built-in-data-types/#set","title":"Set","text":"<pre><code>set1 = {\"a\", \"b\", \"c\"}\nset2 = set((\"a\", \"b\", \"c\"))\n</code></pre> <p>Set of unique items/objects</p>"},{"location":"quick-ref/python/built-in-data-types/#dictionary","title":"Dictionary","text":"<pre><code>&gt;&gt;&gt; empty_dict = {}\n&gt;&gt;&gt; a = {\"one\": 1, \"two\": 2, \"three\": 3}\n&gt;&gt;&gt; a[\"one\"]\n1\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three'])\n&gt;&gt;&gt; a.values()\ndict_values([1, 2, 3])\n&gt;&gt;&gt; a.update({\"four\": 4})\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three', 'four'])\n&gt;&gt;&gt; a['four']\n4\n</code></pre> <p>Key: Value pair, JSON like object</p>"},{"location":"quick-ref/python/built-in-data-types/#casting","title":"Casting","text":""},{"location":"quick-ref/python/built-in-data-types/#integers","title":"Integers","text":"<pre><code>x = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#floats","title":"Floats","text":"<pre><code>x = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#strings_1","title":"Strings","text":"<pre><code>x = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/","title":"Classes and Inheritance","text":""},{"location":"quick-ref/python/classes-and-inheritance/#defining","title":"Defining","text":"<pre><code>class MyNewClass:\n    pass\n\n# Class Instantiation\nmy = MyNewClass()\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#constructors","title":"Constructors","text":"<pre><code>class Animal:\n    def __init__(self, voice):\n        self.voice = voice\n\ncat = Animal('Meow')\nprint(cat.voice)    # =&gt; Meow\n\ndog = Animal('Woof')\nprint(dog.voice)    # =&gt; Woof\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#method","title":"Method","text":"<pre><code>class Dog:\n\n    # Method of the class\n    def bark(self):\n        print(\"Ham-Ham\")\n\ncharlie = Dog()\ncharlie.bark()   # =&gt; \"Ham-Ham\"\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#class-variables","title":"Class Variables","text":"<pre><code>class MyClass:\n    class_variable = \"A class variable!\"\n\n# =&gt; A class variable!\nprint(MyClass.class_variable)\n\nx = MyClass()\n\n# =&gt; A class variable!\nprint(x.class_variable)\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#super-function","title":"Super() Function","text":"<pre><code>class ParentClass:\n    def print_test(self):\n        print(\"Parent Method\")\n\nclass ChildClass(ParentClass):\n    def print_test(self):\n        print(\"Child Method\")\n        # Calls the parent's print_test()\n        super().print_test()\n</code></pre> <pre><code>&gt;&gt;&gt; child_instance = ChildClass()\n&gt;&gt;&gt; child_instance.print_test()\nChild Method\nParent Method\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#repr-method","title":"repr() method","text":"<pre><code>class Employee:\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n\njohn = Employee('John')\nprint(john)  # =&gt; John\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#user-defined-exceptions","title":"User-defined exceptions","text":"<pre><code>class CustomError(Exception):\n    pass\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#polymorphism","title":"Polymorphism","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print('A')\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print('B')\n\nobj_A = ParentClass()\nobj_B = ChildClass()\n\nobj_A.print_self() # =&gt; A\nobj_B.print_self() # =&gt; B\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#overriding","title":"Overriding","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print(\"Parent\")\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print(\"Child\")\n\nchild_instance = ChildClass()\nchild_instance.print_self() # =&gt; Child\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#inheritance","title":"Inheritance","text":"<pre><code>class Animal:\n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nYoki = Dog(\"Yoki\", 4)\nprint(Yoki.name) # =&gt; YOKI\nprint(Yoki.legs) # =&gt; 4\nYoki.sound()     # =&gt; Woof!\n</code></pre>"},{"location":"quick-ref/python/f-strings/","title":"F-Strings","text":""},{"location":"quick-ref/python/f-strings/#f-strings-usage","title":"f-Strings usage","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n\n&gt;&gt;&gt; f\"\"\"He said {\"I'm John\"}\"\"\"\n\"He said I'm John\"\n\n&gt;&gt;&gt; f'5 {\"{stars}\"}'\n'5 {stars}'\n&gt;&gt;&gt; f'5 {\"stars\"}'\n'{5} stars'\n\n&gt;&gt;&gt; name = 'Eric'\n&gt;&gt;&gt; age = 27\n&gt;&gt;&gt; f\"\"\"Hello!\n...     I'm {name}.\n...     I'm {age}.\"\"\"\n\"Hello!\\n    I'm Eric.\\n    I'm 27.\"\n</code></pre> <p>It is available since Python 3.6, also see: Formatted string literals</p>"},{"location":"quick-ref/python/f-strings/#f-strings-fill-align","title":"f-Strings Fill Align","text":"<pre><code>&gt;&gt;&gt; f'{\"text\":10}'     # [width]\n'text      '\n&gt;&gt;&gt; f'{\"test\":*&gt;10}'   # fill left\n'******test'\n&gt;&gt;&gt; f'{\"test\":*&lt;10}'   # fill right\n'test******'\n&gt;&gt;&gt; f'{\"test\":*^10}'   # fill center\n'***test***'\n&gt;&gt;&gt; f'{12345:0&gt;10}'    # fill with numbers\n'0000012345'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-type","title":"f-Strings Type","text":"<pre><code>&gt;&gt;&gt; f'{10:b}'        # binary type\n'1010'\n&gt;&gt;&gt; f'{10:o}'        # octal type\n'12'\n&gt;&gt;&gt; f'{200:x}'       # hexadecimal type\n'c8'\n&gt;&gt;&gt; f'{200:X}'\n'C8'\n&gt;&gt;&gt; f'{345600000000:e}' # scientific notation\n'3.456000e+11'\n&gt;&gt;&gt; f'{65:c}'       # character type\n'A'\n&gt;&gt;&gt; f'{10:#b}'      # [type] with notation (base)\n'0b1010'\n&gt;&gt;&gt; f'{10:#o}'\n'0o12'\n&gt;&gt;&gt; f'{10:#x}'\n'0xa'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-others","title":"F-Strings Others","text":"<pre><code>&gt;&gt;&gt; f'{-12345:0=10}'  # negative numbers\n'-000012345'\n&gt;&gt;&gt; f'{12345:010}'    # [0] shortcut (no align)\n'0000012345'\n&gt;&gt;&gt; f'{-12345:010}'\n'-000012345'\n&gt;&gt;&gt; import math       # [.precision]\n&gt;&gt;&gt; math.pi\n3.141592653589793\n&gt;&gt;&gt; f'{math.pi:.2f}'\n'3.14'\n&gt;&gt;&gt; f'{1000000:,.2f}' # [grouping_option]\n'1,000,000.00'\n&gt;&gt;&gt; f'{1000000:_.2f}'\n'1_000_000.00'\n&gt;&gt;&gt; f'{0.25:0%}'      # percentage\n'25.000000%'\n&gt;&gt;&gt; f'{0.25:.0%}'\n'25%'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-sign","title":"F-Strings Sign","text":"<pre><code>&gt;&gt;&gt; f'{12345:+}'      # [sign] (+/-)\n'+12345'\n&gt;&gt;&gt; f'{-12345:+}'\n'-12345'\n&gt;&gt;&gt; f'{-12345:+10}'\n'    -12345'\n&gt;&gt;&gt; f'{-12345:+010}'\n'-000012345'\n</code></pre>"},{"location":"quick-ref/python/file-handling/","title":"File Handling","text":""},{"location":"quick-ref/python/file-handling/#read-file","title":"Read file","text":""},{"location":"quick-ref/python/file-handling/#line-by-line","title":"Line by line","text":"<pre><code>with open(\"myfile.txt\") as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#with-line-number","title":"With line number","text":"<pre><code>file = open('myfile.txt', 'r')\nfor i, line in enumerate(file, start=1):\n    print(\"Number %s: %s\" % (i, line))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#string","title":"String","text":""},{"location":"quick-ref/python/file-handling/#write-a-string","title":"Write a string","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-a-string","title":"Read a string","text":"<pre><code>with open('myfile1.txt', \"r+\") as file:\n    contents = file.read()\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#object","title":"Object","text":""},{"location":"quick-ref/python/file-handling/#write-an-object","title":"Write an object","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-an-object","title":"Read an object","text":"<pre><code>with open('myfile2.txt', \"r+\") as file:\n    contents = json.load(file)\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-a-file","title":"Delete a File","text":"<pre><code>import os\nos.remove(\"myfile.txt\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#check-and-delete","title":"Check and Delete","text":"<pre><code>import os\nif os.path.exists(\"myfile.txt\"):\n    os.remove(\"myfile.txt\")\nelse:\n    print(\"The file does not exist\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-folder","title":"Delete Folder","text":"<pre><code>import os\nos.rmdir(\"myfolder\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/","title":"Flow control","text":""},{"location":"quick-ref/python/flow-control/#basic","title":"Basic","text":"<pre><code>num = 5\nif num &gt; 10:\n    print(\"num is totally bigger than 10.\")\nelif num &lt; 10:\n    print(\"num is smaller than 10.\")\nelse:\n    print(\"num is indeed 10.\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#one-line-ternary-operator","title":"One line (ternary operator)","text":"<pre><code>&gt;&gt;&gt; a = 330\n&gt;&gt;&gt; b = 200\n&gt;&gt;&gt; r = \"a\" if a &gt; b else \"b\"\n&gt;&gt;&gt; print(r)\na\n</code></pre>"},{"location":"quick-ref/python/flow-control/#else-if","title":"else if","text":"<pre><code>value = True\nif not value:\n    print(\"Value is False\")\nelif value is None:\n    print(\"Value is None\")\nelse:\n    print(\"Value is True\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#match-case","title":"match case","text":"<pre><code>x = 1\nmatch x:\n  case 0:\n    print(\"zero\")\n  case 1:\n    print(\"one\")\n  case _:\n    print(\"multiple\")\n</code></pre>"},{"location":"quick-ref/python/functions/","title":"Functions","text":""},{"location":"quick-ref/python/functions/#basic","title":"Basic","text":"<pre><code>def hello_world():\n    print('Hello, World!')\n</code></pre>"},{"location":"quick-ref/python/functions/#return","title":"Return","text":"<pre><code>def add(x, y):\n    print(\"x is %s, y is %s\" %(x, y))\n    return x + y\n\nadd(5, 6)    # =&gt; 11\n</code></pre>"},{"location":"quick-ref/python/functions/#positional-arguments","title":"Positional arguments","text":"<pre><code>def varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # =&gt; (1, 2, 3)\n</code></pre> <p>Type of \"args\" is tuple.</p>"},{"location":"quick-ref/python/functions/#keyword-arguments","title":"Keyword arguments","text":"<pre><code>def keyword_args(**kwargs):\n    return kwargs\n\n# =&gt; {\"big\": \"foot\", \"loch\": \"ness\"}\nkeyword_args(big=\"foot\", loch=\"ness\")\n</code></pre> <p>Type of \"kwargs\" is dict.</p>"},{"location":"quick-ref/python/functions/#returning-multiple","title":"Returning multiple","text":"<pre><code>def swap(x, y):\n    return y, x\n\nx = 1\ny = 2\nx, y = swap(x, y)  # =&gt; x = 2, y = 1\n</code></pre>"},{"location":"quick-ref/python/functions/#default-value","title":"Default Value","text":"<pre><code>def add(x, y=10):\n    return x + y\n\nadd(5)      # =&gt; 15\nadd(5, 20)  # =&gt; 25\n</code></pre>"},{"location":"quick-ref/python/functions/#anonymous-functions","title":"Anonymous functions","text":"<pre><code># =&gt; True\n(lambda x: x &gt; 2)(3)\n\n# =&gt; 5\n(lambda x, y: x ** 2 + y ** 2)(2, 1)\n</code></pre>"},{"location":"quick-ref/python/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/python/getting-started/#introduction","title":"Introduction","text":"<ul> <li>Python (python.org)</li> <li>Python Document (docs.python.org)</li> <li>Learn X in Y minutes (learnxinyminutes.com)</li> <li>Regex in python (cheatsheets.zip)</li> </ul>"},{"location":"quick-ref/python/getting-started/#hello-world","title":"Hello World","text":"<pre><code>&gt;&gt;&gt; print(\"Hello, World!\")\nHello, World!\n</code></pre> <p>The famous \"Hello World\" program in Python</p>"},{"location":"quick-ref/python/getting-started/#variables","title":"Variables","text":"<pre><code>age = 18      # age is of type int\nname = \"John\" # name is now of type str\nprint(name)\n</code></pre> <p>Python can't declare a variable without assignment.</p>"},{"location":"quick-ref/python/getting-started/#data-types","title":"Data Types","text":"<code>str</code> Text <code>int</code>, <code>float</code>, <code>complex</code> Numeric <code>list</code>, <code>tuple</code>, <code>range</code> Sequence <code>dict</code> Mapping <code>set</code>, <code>frozenset</code> Set <code>bool</code> Boolean <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code> Binary"},{"location":"quick-ref/python/getting-started/#slicing-string","title":"Slicing String","text":"<pre><code>&gt;&gt;&gt; msg = \"Hello, World!\"\n&gt;&gt;&gt; print(msg[2:5])\nllo\n</code></pre>"},{"location":"quick-ref/python/getting-started/#lists","title":"Lists","text":"<pre><code>mylist = []\nmylist.append(1)\nmylist.append(2)\nfor item in mylist:\n    print(item) # prints out 1,2\n</code></pre>"},{"location":"quick-ref/python/getting-started/#if-else","title":"If Else","text":"<pre><code>num = 200\nif num &gt; 0:\n    print(\"num is greater than 0\")\nelse:\n    print(\"num is not greater than 0\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#loops","title":"Loops","text":"<pre><code>for item in range(6):\n    if item == 3: break\n    print(item)\nelse:\n    print(\"Finally finished!\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#functions","title":"Functions","text":"<pre><code>&gt;&gt;&gt; def my_function():\n...     print(\"Hello from a function\")\n...\n&gt;&gt;&gt; my_function()\nHello from a function\n</code></pre>"},{"location":"quick-ref/python/getting-started/#file-handling","title":"File Handling","text":"<pre><code>with open(\"myfile.txt\", \"r\", encoding='utf8') as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/getting-started/#arithmetic","title":"Arithmetic","text":"<pre><code>result = 10 + 30 # =&gt; 40\nresult = 40 - 10 # =&gt; 30\nresult = 50 * 5  # =&gt; 250\nresult = 16 / 4  # =&gt; 4.0 (Float Division)\nresult = 16 // 4 # =&gt; 4 (Integer Division)\nresult = 25 % 2  # =&gt; 1\nresult = 5 ** 3  # =&gt; 125\n</code></pre> <p>The <code>/</code> means quotient of x and y, and the <code>//</code> means floored quotient of x and y, also see StackOverflow</p>"},{"location":"quick-ref/python/getting-started/#plus-equals","title":"Plus-Equals","text":"<pre><code>counter = 0\ncounter += 10           # =&gt; 10\ncounter = 0\ncounter = counter + 10  # =&gt; 10\n\nmessage = \"Part 1.\"\n\n# =&gt; Part 1.Part 2.\nmessage += \"Part 2.\"\n</code></pre>"},{"location":"quick-ref/python/getting-started/#f-strings-python-36","title":"f-Strings (Python 3.6+)","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n</code></pre>"},{"location":"quick-ref/python/lists/","title":"Lists","text":""},{"location":"quick-ref/python/lists/#defining","title":"Defining","text":"<pre><code>&gt;&gt;&gt; li1 = []\n&gt;&gt;&gt; li1\n[]\n&gt;&gt;&gt; li2 = [4, 5, 6]\n&gt;&gt;&gt; li2\n[4, 5, 6]\n&gt;&gt;&gt; li3 = list((1, 2, 3))\n&gt;&gt;&gt; li3\n[1, 2, 3]\n&gt;&gt;&gt; li4 = list(range(1, 11))\n&gt;&gt;&gt; li4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/python/lists/#generate","title":"Generate","text":"<pre><code>&gt;&gt;&gt; list(filter(lambda x : x % 2 == 1, range(1, 20)))\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n&gt;&gt;&gt; [x ** 2 for x in range (1, 11) if  x % 2 == 1]\n[1, 9, 25, 49, 81]\n\n&gt;&gt;&gt; [x for x in [3, 4, 5, 6, 7] if x &gt; 5]\n[6, 7]\n\n&gt;&gt;&gt; list(filter(lambda x: x &gt; 5, [3, 4, 5, 6, 7]))\n[6, 7]\n</code></pre>"},{"location":"quick-ref/python/lists/#append","title":"Append","text":"<pre><code>&gt;&gt;&gt; li = []\n&gt;&gt;&gt; li.append(1)\n&gt;&gt;&gt; li\n[1]\n&gt;&gt;&gt; li.append(2)\n&gt;&gt;&gt; li\n[1, 2]\n&gt;&gt;&gt; li.append(4)\n&gt;&gt;&gt; li\n[1, 2, 4]\n&gt;&gt;&gt; li.append(3)\n&gt;&gt;&gt; li\n[1, 2, 4, 3]\n</code></pre>"},{"location":"quick-ref/python/lists/#list-slicing","title":"List Slicing","text":"<p>Syntax of list slicing:</p> <pre><code>a_list[start:end]\na_list[start:end:step]\n</code></pre>"},{"location":"quick-ref/python/lists/#slicing","title":"Slicing","text":"<pre><code>&gt;&gt;&gt; a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:5]\n['bacon', 'tomato', 'ham']\n&gt;&gt;&gt; a[-5:-2]\n['egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[1:4]\n['egg', 'bacon', 'tomato']\n</code></pre>"},{"location":"quick-ref/python/lists/#omitting-index","title":"Omitting index","text":"<pre><code>&gt;&gt;&gt; a[:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[0:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[2:]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:len(a)]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[:]\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n</code></pre>"},{"location":"quick-ref/python/lists/#with-a-stride","title":"With a stride","text":"<pre><code>['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[0:6:2]\n['spam', 'bacon', 'ham']\n&gt;&gt;&gt; a[1:6:2]\n['egg', 'tomato', 'lobster']\n&gt;&gt;&gt; a[6:0:-2]\n['lobster', 'tomato', 'egg']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[::-1]\n['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']\n</code></pre>"},{"location":"quick-ref/python/lists/#remove","title":"Remove","text":"<pre><code>&gt;&gt;&gt; li = ['bread', 'butter', 'milk']\n&gt;&gt;&gt; li.pop()\n'milk'\n&gt;&gt;&gt; li\n['bread', 'butter']\n&gt;&gt;&gt; del li[0]\n&gt;&gt;&gt; li\n['butter']\n</code></pre>"},{"location":"quick-ref/python/lists/#access","title":"Access","text":"<pre><code>&gt;&gt;&gt; li = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; li[0]\n'a'\n&gt;&gt;&gt; li[-1]\n'd'\n&gt;&gt;&gt; li[4]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre>"},{"location":"quick-ref/python/lists/#concatenating","title":"Concatenating","text":"<pre><code>&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd.extend([9, 11, 13])\n&gt;&gt;&gt; odd\n[1, 3, 5, 9, 11, 13]\n&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd + [9, 11, 13]\n[1, 3, 5, 9, 11, 13]\n</code></pre>"},{"location":"quick-ref/python/lists/#sort-reverse","title":"Sort &amp; Reverse","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.sort()\n&gt;&gt;&gt; li\n[1, 2, 3, 3, 5]\n&gt;&gt;&gt; li.reverse()\n&gt;&gt;&gt; li\n[5, 3, 3, 2, 1]\n</code></pre>"},{"location":"quick-ref/python/lists/#count","title":"Count","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.count(3)\n2\n</code></pre>"},{"location":"quick-ref/python/lists/#repeating","title":"Repeating","text":"<pre><code>&gt;&gt;&gt; li = [\"re\"] * 3\n&gt;&gt;&gt; li\n['re', 're', 're']\n</code></pre>"},{"location":"quick-ref/python/loops/","title":"Loops","text":""},{"location":"quick-ref/python/loops/#basic","title":"Basic","text":"<pre><code>primes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n</code></pre> <p>Prints: 2 3 5 7</p>"},{"location":"quick-ref/python/loops/#with-index","title":"With index","text":"<pre><code>animals = [\"dog\", \"cat\", \"mouse\"]\n# enumerate() adds counter to an iterable\nfor i, value in enumerate(animals):\n    print(i, value)\n</code></pre> <p>Prints: 0 dog 1 cat 2 mouse</p>"},{"location":"quick-ref/python/loops/#while","title":"While","text":"<pre><code>x = 0\nwhile x &lt; 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n</code></pre> <p>Prints: 0 1 2 3</p>"},{"location":"quick-ref/python/loops/#break","title":"Break","text":"<pre><code>x = 0\nfor index in range(10):\n    x = index * 10\n    if index == 5:\n     break\n    print(x)\n</code></pre> <p>Prints: 0 10 20 30 40</p>"},{"location":"quick-ref/python/loops/#continue","title":"Continue","text":"<pre><code>for index in range(3, 8):\n    x = index * 10\n    if index == 5:\n     continue\n    print(x)\n</code></pre> <p>Prints: 30 40 60 70</p>"},{"location":"quick-ref/python/loops/#range","title":"Range","text":"<pre><code>for i in range(4):\n    print(i) # Prints: 0 1 2 3\n\nfor i in range(4, 8):\n    print(i) # Prints: 4 5 6 7\n\nfor i in range(4, 10, 2):\n    print(i) # Prints: 4 6 8\n</code></pre>"},{"location":"quick-ref/python/loops/#with-zip","title":"With zip()","text":"<pre><code>words = ['Mon', 'Tue', 'Wed']\nnums = [1, 2, 3]\n# Use zip to pack into a tuple list\nfor w, n in zip(words, nums):\n    print('%d:%s, ' %(n, w))\n</code></pre> <p>Prints: 1:Mon, 2:Tue, 3:Wed,</p>"},{"location":"quick-ref/python/loops/#forelse","title":"for/else","text":"<pre><code>nums = [60, 70, 30, 110, 90]\nfor n in nums:\n    if n &gt; 100:\n        print(\"%d is bigger than 100\" %n)\n        break\nelse:\n    print(\"Not found!\")\n</code></pre> <p>Also see: Python Tips</p>"},{"location":"quick-ref/python/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/python/miscellaneous/#comments","title":"Comments","text":"<pre><code># This is a single line comments.\n</code></pre> <pre><code>\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n</code></pre> <pre><code>''' Multiline strings can be written\n    using three 's, and are often used\n    as documentation.\n'''\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#generators","title":"Generators","text":"<pre><code>def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n</code></pre> <p>Generators help you make lazy code.</p>"},{"location":"quick-ref/python/miscellaneous/#generator-to-list","title":"Generator to list","text":"<pre><code>values = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\n\n# =&gt; [-1, -2, -3, -4, -5]\nprint(gen_to_list)\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#handle-exceptions","title":"Handle exceptions","text":"<pre><code>try:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be handled together, if required.\nelse:                    # Optional clause to the try/except block. Must follow all except blocks\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n</code></pre>"},{"location":"quick-ref/python/modules/","title":"Modules","text":""},{"location":"quick-ref/python/modules/#import-modules","title":"Import modules","text":"<pre><code>import math\nprint(math.sqrt(16))  # =&gt; 4.0\n</code></pre>"},{"location":"quick-ref/python/modules/#from-a-module","title":"From a module","text":"<pre><code>from math import ceil, floor\nprint(ceil(3.7))   # =&gt; 4.0\nprint(floor(3.7))  # =&gt; 3.0\n</code></pre>"},{"location":"quick-ref/python/modules/#import-all","title":"Import all","text":"<pre><code>from math import *\n</code></pre>"},{"location":"quick-ref/python/modules/#shorten-module","title":"Shorten module","text":"<pre><code>import math as m\n\n# =&gt; True\nmath.sqrt(16) == m.sqrt(16)\n</code></pre>"},{"location":"quick-ref/python/modules/#functions-and-attributes","title":"Functions and attributes","text":"<pre><code>import math\ndir(math)\n</code></pre>"},{"location":"quick-ref/python/operators/","title":"Operators","text":""},{"location":"quick-ref/python/operators/#walrus","title":"Walrus","text":"<pre><code>values = [1, \"text\", True, \"\", 2]\ni = 0\n\n# It assigns a value to a variable and compares it in a boolean expression\nwhile (data := values[i]):\n\n    print(data, end=\",\")\n    i = i + 1\n\n# Expected result: 1, \"text\", True\n</code></pre>"},{"location":"quick-ref/python/strings/","title":"Strings","text":""},{"location":"quick-ref/python/strings/#array-like","title":"Array-like","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World\"\n&gt;&gt;&gt; print(hello[1])\ne\n&gt;&gt;&gt; print(hello[-1])\nd\n</code></pre> <p>Get the character at position 1 or last</p>"},{"location":"quick-ref/python/strings/#looping","title":"Looping","text":"<pre><code>&gt;&gt;&gt; for char in \"foo\":\n...     print(char)\nf\no\no\n</code></pre> <p>Loop through the letters in the word \"foo\"</p>"},{"location":"quick-ref/python/strings/#slicing-string","title":"Slicing string","text":"<pre><code> \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n | m | y | b | a | c | o | n |\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n 0   1   2   3   4   5   6   7\n-7  -6  -5  -4  -3  -2  -1\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[2:5]\n'bac'\n&gt;&gt;&gt; s[0:2]\n'my'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[:2]\n'my'\n&gt;&gt;&gt; s[2:]\n'bacon'\n&gt;&gt;&gt; s[:2] + s[2:]\n'mybacon'\n&gt;&gt;&gt; s[:]\n'mybacon'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[-5:-1]\n'baco'\n&gt;&gt;&gt; s[2:6]\n'baco'\n</code></pre>"},{"location":"quick-ref/python/strings/#with-a-stride","title":"With a stride","text":"<pre><code>&gt;&gt;&gt; s = '12345' * 5\n&gt;&gt;&gt; s\n'1234512345123451234512345'\n&gt;&gt;&gt; s[::5]\n'11111'\n&gt;&gt;&gt; s[4::5]\n'55555'\n&gt;&gt;&gt; s[::-5]\n'55555'\n&gt;&gt;&gt; s[::-1]\n'5432154321543215432154321'\n</code></pre>"},{"location":"quick-ref/python/strings/#string-length","title":"String Length","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World!\"\n&gt;&gt;&gt; print(len(hello))\n13\n</code></pre> <p>The len() function returns the length of a string</p>"},{"location":"quick-ref/python/strings/#multiple-copies","title":"Multiple copies","text":"<pre><code>&gt;&gt;&gt; s = '===+'\n&gt;&gt;&gt; n = 8\n&gt;&gt;&gt; s * n\n'===+===+===+===+===+===+===+===+'\n</code></pre>"},{"location":"quick-ref/python/strings/#check-string","title":"Check String","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; s in 'I saw spamalot!'\nTrue\n&gt;&gt;&gt; s not in 'I saw The Holy Grail!'\nTrue\n</code></pre>"},{"location":"quick-ref/python/strings/#concatenates","title":"Concatenates","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; t = 'egg'\n&gt;&gt;&gt; s + t\n'spamegg'\n&gt;&gt;&gt; 'spam' 'egg'\n'spamegg'\n</code></pre>"},{"location":"quick-ref/python/strings/#formatting","title":"Formatting","text":"<pre><code>name = \"John\"\nprint(\"Hello, %s!\" % name)\n</code></pre> <pre><code>name = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\n</code></pre>"},{"location":"quick-ref/python/strings/#format-method","title":"format() Method","text":"<pre><code>txt1 = \"My name is {fname}, I'm {age}\".format(fname=\"John\", age=36)\ntxt2 = \"My name is {0}, I'm {1}\".format(\"John\", 36)\ntxt3 = \"My name is {}, I'm {}\".format(\"John\", 36)\n</code></pre>"},{"location":"quick-ref/python/strings/#input","title":"Input","text":"<pre><code>&gt;&gt;&gt; name = input(\"Enter your name: \")\nEnter your name: Tom\n&gt;&gt;&gt; name\n'Tom'\n</code></pre> <p>Get input data from console</p>"},{"location":"quick-ref/python/strings/#join","title":"Join","text":"<pre><code>&gt;&gt;&gt; \"#\".join([\"John\", \"Peter\", \"Vicky\"])\n'John#Peter#Vicky'\n</code></pre>"},{"location":"quick-ref/python/strings/#endswith","title":"Endswith","text":"<pre><code>&gt;&gt;&gt; \"Hello, world!\".endswith(\"!\")\nTrue\n</code></pre>"},{"location":"quick-ref/python/type-hints/","title":"Type Hints","text":"<p><code>Type hints</code> was introduced in <code>Python 3.5</code>, and it is a way to specify the type of a variable or an argument.</p>"},{"location":"quick-ref/python/type-hints/#variable-parameter","title":"Variable &amp; Parameter","text":"<pre><code>string: str = \"ha\"\ntimes: int = 3\n\n\n# wrong hit, but run correctly\nresult: str = 1 + 2\nprint(result)  # =&gt; 3\n\n\ndef say(name: str, start: str = \"Hi\"):\n    return start + \", \" + name\n\nprint(say(\"Python\"))  # =&gt; Hi, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type","title":"Built-in date type","text":"<pre><code>from typing import Dict, Tuple, List\n\nbill: Dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: Tuple[str] = (\"DONE\",)\nsucceeded: Tuple[int, str] = (1, \"SUCCESS\")\nstatuses: Tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: List[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type-310","title":"Built-in date type (3.10+)","text":"<pre><code>bill: dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: tuple[str] = (\"DONE\",)\nsucceeded: tuple[int, str] = (1, \"SUCCESS\")\nstatuses: tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: list[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#positional-argument","title":"Positional argument","text":"<pre><code>def calc_summary(*args: int):\n    return sum(args)\n\nprint(calc_summary(3, 1, 4))  # =&gt; 8\n</code></pre> <p>Indicate all arguments' type is int.</p>"},{"location":"quick-ref/python/type-hints/#returned","title":"Returned","text":"<pre><code>def say_hello(name) -&gt; str:\n    return \"Hello, \" + name\n\nvar = \"Python\"\nprint(say_hello(var))  # =&gt; Hello, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned","title":"Union returned","text":"<pre><code>from typing import Union\n\ndef resp200(meaningful) -&gt; Union[int, str]:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Means returned value type may be int or str.</p>"},{"location":"quick-ref/python/type-hints/#keyword-argument","title":"Keyword argument","text":"<pre><code>def calc_summary(**kwargs: int):\n    return sum(kwargs.values())\n\nprint(calc_summary(a=1, b=2))  # =&gt; 3\n</code></pre> <p>Indicate all parameters' value type is int.</p>"},{"location":"quick-ref/python/type-hints/#multiple-returns","title":"Multiple returns","text":"<pre><code>def resp200() -&gt; (int, str):\n    return 200, \"OK\"\n\nreturns = resp200()\nprint(returns)  # =&gt; (200, 'OK')\nprint(type(returns))  # tuple\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned-310","title":"Union returned (3.10+)","text":"<pre><code>def resp200(meaningful) -&gt; int | str:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Since Python 3.10</p>"},{"location":"quick-ref/python/type-hints/#property","title":"Property","text":"<pre><code>class Employee:\n    name: str\n    age: int\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.graduated: bool = False\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance","title":"Self instance","text":"<pre><code>class Employee:\n    name: str\n\n    def set_name(self, name) -&gt; \"Employee\":\n        self.name = name\n        return self\n\n    def copy(self) -&gt; 'Employee':\n        return type(self)(self.name)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance-311","title":"Self instance (3.11+)","text":"<pre><code>from typing import Self\n\nclass Employee:\n    name: str\n    age: int\n\n    def set_name(self: Self, name) -&gt; Self:\n        self.name = name\n        return self\n</code></pre>"},{"location":"quick-ref/python/type-hints/#type-generic","title":"Type &amp; Generic","text":"<pre><code>from typing import TypeVar, Type\n\nT = TypeVar(\"T\")\n\n# \"mapper\" is a type, like int, str, MyClass and so on.\n# \"default\" is an instance of type T, such as 314, \"string\", MyClass() and so on.\n# returned is an instance of type T too.\ndef converter(raw, mapper: Type[T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\nraw: str = input(\"Enter an integer: \")\nresult: int = converter(raw, mapper=int, default=0)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#function","title":"Function","text":"<pre><code>from typing import TypeVar, Callable, Any\n\nT = TypeVar(\"T\")\n\ndef converter(raw, mapper: Callable[[Any], T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\n# Callable[[Any], ReturnType] means a function declare like:\n# def func(arg: Any) -&gt; ReturnType:\n#     pass\n\n# Callable[[str, int], ReturnType] means a function declare like:\n# def func(string: str, times: int) -&gt; ReturnType:\n#     pass\n\n# Callable[..., ReturnType] means a function declare like:\n# def func(*args, **kwargs) -&gt; ReturnType:\n#     pass\n\ndef is_success(value) -&gt; bool:\n    return value in (0, \"OK\", True, \"success\")\n\nresp = dict(code=0, message=\"OK\", data=[])\nsuccessed: bool = converter(resp[\"message\"], mapper=is_success, default=False)\n</code></pre>"},{"location":"quick-ref/ruby/","title":"Ruby","text":"<p>Abstract</p> <p>The Ruby cheat sheet is a one-page reference sheet for the Ruby programming language.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Flow Control</li> <li>Strings</li> <li>Methods</li> <li>Blocks</li> <li>Procs</li> <li>Lambdas</li> <li>Arrays</li> <li>Boolean Enumerable Method</li> <li>Combination Method</li> <li>Loops</li> <li>Classes</li> <li>See Also</li> </ul>","tags":["script","interpret"]},{"location":"quick-ref/ruby/arrays/","title":"Arrays","text":""},{"location":"quick-ref/ruby/arrays/#initialize-an-empty-array","title":"Initialize an empty array","text":"<pre><code>array = Array.new   #=&gt; []\n# or\narray = []\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#array-containing-objects-of-different-types","title":"Array containing objects of different types","text":"<pre><code>array = [1, \"two\", 3.0]\n#=&gt; [1, \"two\", 3.0]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#fill-array-with-initial-size-and-default-objects","title":"Fill array with initial size and default objects","text":"<pre><code>numbers = Array.new(3)\n#=&gt; [nil, nil, nil]\nnumbers = Array.new(3, 7)\n#=&gt; [7, 7, 7]\nnumbers = Array.new(3, true)\n#=&gt; [true, true, true]\nnumbers = []\nnumbers.fill(7, 0..2)   #=&gt; [7, 7, 7]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#array-of-different-hashes","title":"array of different hashes","text":"<pre><code>array_with_hashes = Array.new(2) { {} } #=&gt; [{}, {}]\narray_with_hashes[0][:name] = \"Bob\"\narray_with_hashes[0][:id] = 10          #=&gt; [{:name=&gt;\"Bob\", :id=&gt;10}, {}]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#two-dimensional-array","title":"Two-dimensional array","text":"<pre><code>temperature_data = [\n              [\"A908\", 38],\n              [\"A909\", 37],\n              [\"A910\", 38],\n          ]\ntemperature_data[0]    #=&gt; [\"A908\", 38]\ntemperature_data[0][0] #=&gt; \"A908\"\ntemperature_data[0][1] #=&gt; 38\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#array-index","title":"array index","text":"<pre><code>str_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\nstr_array[0]            #=&gt; \"This\"\nstr_array[1]            #=&gt; \"is\"\nstr_array[4]            #=&gt; \"array\"\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#negative-index","title":"negative index","text":"<pre><code>str_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\n# Index -1 represents the last element\nstr_array[-1]        #=&gt; \"array\"\n# Index -2 represents the second to last element\nstr_array[-2]        #=&gt; \"small\"\nstr_array[-6]        #=&gt; nil\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#array-method-at","title":"array method at","text":"<pre><code>str_array = [\n  \"This\", \"is\", \"a\", \"small\", \"array\"\n]\n\nputs str_array.at(0)      #=&gt; \"This\"\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#range-acquisition","title":"Range acquisition","text":"<pre><code>arr = [1, 2, 3, 4, 5, 6]\narr[100]                  #=&gt; nil\narr[-3]                   #=&gt; 4\narr[2, 3]                 #=&gt; [3, 4, 5]\narr[1..4]                 #=&gt; [2, 3, 4, 5]\narr[1..-3]                #=&gt; [2, 3, 4]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#array-method-fetch","title":"Array method fetch","text":"<pre><code>arr = ['a', 'b', 'c', 'd', 'e', 'f']\narr.fetch(100)\n#=&gt; IndexError: Index outside array bounds 100\uff1a-6...6\narr.fetch(100, \"oops\")    #=&gt; \"oops\"\n</code></pre> <p>Out of bounds, give default value</p>"},{"location":"quick-ref/ruby/arrays/#get-array-elements","title":"Get array elements","text":"<pre><code>arr = [1, 2, 3, 4, 5, 6]\n\narr.first     # first value =&gt; 1\narr.last      # last value =&gt; 6\n# take Returns the first n elements\narr.take(3)   #=&gt; [1, 2, 3]\n# drop after n elements have been deleted\narr.drop(3)   #=&gt; [4, 5, 6]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#add-value-to-end-of-array-push","title":"Add value to end of array push","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.push(11)\n#=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nnumbers.push(12, 13, 14)\n#=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#delete-the-value-at-the-end-of-the-array-pop","title":"Delete the value at the end of the array pop","text":"<pre><code>num_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnum_array.pop             #=&gt; 10\nnum_array\n#=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#add-value-to-beginning-of-array-unshift","title":"Add value to beginning of array unshift","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.unshift(0)\n#=&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.unshift(-3, -2, -1)\n#=&gt; [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#retrieve-and-simultaneously-delete-the-first-element-shift","title":"Retrieve and simultaneously delete the first element shift","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.shift #=&gt; 1\nnumbers\n#=&gt; [2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-element-at-specific-index-delete_at","title":"Remove element at specific index delete_at","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete_at(2) #=&gt; 4\nnumbers\n#=&gt; [2, 3, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-a-specific-element-anywhere-in-an-array","title":"Remove a specific element anywhere in an array","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete(2) #=&gt; 2\nnumbers           #=&gt; [3, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#insert-value-at-given-index-insert","title":"Insert value at given index insert","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.insert(0, 0)\n#=&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.insert(0, -3, -2, -1)\n#=&gt; [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nnumbers.insert(-1, 12, 13, 14)\n#=&gt; [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]\nnumbers.insert(-4, 11)\n#=&gt; [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#a-block-to-fill-the-array-with-values","title":"A block to fill the array with values","text":"<pre><code>numbers = Array.new(10) { |n| n = n * 2 }\n#=&gt; [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#filling-arrays-becomes-easier","title":"Filling arrays becomes easier","text":"<pre><code>numbers = Array(100..110)\n#=&gt; [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]\n\n# Or we can convert the range to an array\n(100..110).to_a\n#=&gt; [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-nil-value-from-array","title":"Remove nil value from array","text":"<pre><code>arr = ['foo', 0, nil, 'bar', 7, nil]\narr.compact  #=&gt; ['foo', 0, 'bar', 7]\narr      #=&gt; ['foo', 0, nil, 'bar', 7, nil]\narr.compact! #=&gt; ['foo', 0, 'bar', 7]\narr      #=&gt; ['foo', 0, 'bar', 7]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-duplicates-uniq","title":"Remove duplicates uniq","text":"<pre><code>arr = [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\narr.uniq #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]\narr # =&gt; [2, 5, 6, 556, 6, 6, 8, 9, 0, 123, 556]\narr.uniq! #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]\narr #=&gt; [2, 5, 6, 556, 8, 9, 0, 123]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#check-if-a-value-exists-in-an-arrayinclude","title":"Check if a value exists in an array\uff08<code>include\uff1f</code>\uff09","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.include? \"Mars\"\n# output =&gt; true\nplanets.include? \"Pluto\"\n# output =&gt; false\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-array-size","title":"Get array size","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.size\n# output =&gt; 8\nplanets.length\n# output =&gt; 8\n</code></pre> <p>You can use size or length, both are synonyms</p>"},{"location":"quick-ref/ruby/arrays/#clear-array","title":"clear array","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.clear\n# output =&gt; []\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-the-first-element-of-the-array","title":"Get the first element of the array","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers[0]\n# or\nnumbers.first\n# output =&gt; 1\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-the-last-element-of-the-array","title":"Get the last element of the array","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers[-1]\n# or\nnumbers.last\n# output =&gt; 10\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#merge-two-arrays","title":"Merge two arrays","text":"<pre><code>a = [\"tom\", \"mot\", \"otm\"]\nb = [2, 3, 5]\na.zip(b)\n# output\n# [[\"tom\", 2], [\"mot\", 3], [\"otm\", 5]]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#sort-array","title":"Sort array","text":"<pre><code>primes = [7, 2, 3, 5]\nsorted_primes = primes.sort\nputs \"#{sorted_primes}\"\n# output =&gt; [2, 3, 5, 7]\n</code></pre> <p>or in-place sort</p> <pre><code>primes = [7, 2, 3, 5]\nprimes.sort!\nputs \"#{primes}\"\n# output =&gt; [2, 3, 5, 7]\n</code></pre> <pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.sort\n# output\n# [\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Saturn\", \"Uranus\", \"Venus\"]\nplanets.sort_by { |p| p }\n# output\n# [\"Earth\", \"Jupiter\", \"Mars\", \"Mercury\", \"Neptune\", \"Saturn\", \"Uranus\", \"Venus\"]\nplanets.sort_by { |p| p.length }\n# output\n# [\"Mars\", \"Earth\", \"Venus\", \"Saturn\", \"Uranus\", \"Neptune\", \"Jupiter\", \"Mercury\"]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-maximum-value-from-array","title":"Get maximum value from array","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.max_by { |p| p }\n# output =&gt; 7\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-array-elements-using-range","title":"Get array elements using range","text":"<pre><code># numbers[start..end], both index are inclusive\nputs numbers[0..3]\n# 1\n# 2\n# 3\n# 4\n# numbers[start..end], end index is exclusive\nputs numbers[0...3]\n# 1\n# 2\n# 3\n# or numbers[start..length]\nputs numbers[0, 1]\n# 1\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#get-the-first-n-elements-of-the-array","title":"Get the first n elements of the array","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.take(3)\n# [7, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#access-element","title":"access element","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.fetch(3)\n# 5\n# Fetch will throw an error if the element does not exist\nprimes.fetch(10)\n# (index 10 outside of array bounds: -4...4)\n# or get an default value\nprimes.fetch(10, -1)\n# -1\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#delete-first-n-elements","title":"Delete first n elements","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.drop(3)\n# [5]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#delete-the-first-element","title":"Delete the first element","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.shift\n# [2, 3, 5]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-last-element","title":"Remove last element","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.pop\n# [7, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#delete-element-with-index","title":"Delete element with index","text":"<pre><code>primes = [7, 2, 3, 5]\nprimes.delete_at(-1)\n# [7, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#remove-all-occurrences-of-elements","title":"Remove all occurrences of elements","text":"<pre><code>primes = [7, 2, 3, 5, 5]\nprimes.delete(5)\n# [7, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#each","title":"each","text":"<pre><code># When you have single line blocks\nsalary = [399, 234, 566, 533, 233]\nsalary.each { |s| puts s }\n# output\n# 399\n# 234\n# 566\n# 533\n# 233\n</code></pre> <p>When you have a multi-line block, you can replace the curly braces <code>{}</code> with <code>do</code> and <code>end</code></p> <pre><code>salary.each do |s|\n  a = 10\n  res = a * s\n  puts res\nend\n# output\n# 3990\n# 2340\n# 5660\n# 5330\n# 2330\n</code></pre> <p>Or you can do the same thing using braces {} and semicolon as separator instead of newline</p> <pre><code>salary.each { |s| a = 10 ; res = a * s ; puts res }\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#each_with_index","title":"each_with_index","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.each_with_index { |value, index| puts \"#{index} #{value}\" }\n# output\n# 0 399\n# 1 234\n# 2 566\n# 3 533\n# 4 233\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#each_index","title":"each_index","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.each_index { |i| puts i}\n# output\n# 0\n# 1\n# 2\n# 3\n# 4\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#map","title":"map","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.map { |s|  s * 10  }\n# return\n# [3990, 2340, 5660, 5330, 2330]\n# On the other hand, each returns the original value\nsalary = [399, 234, 566, 533, 233]\nsalary.each { |s|  s * 10  }\n# return\n# [399, 234, 566, 533, 233]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#collect","title":"collect","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.collect { |s| s &gt; 400 }\n# output\n# [false, false, true, true, false]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#for","title":"for","text":"<pre><code>for value in [2, 3, 5, 7]\n    puts value\nend\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#each_with_object","title":"each_with_object","text":"<pre><code>colors = [\n  {color: \"red\", count: 3}, {color: \"red\", count: 5}, {color: \"black\", count: 4}\n]\ncolors.each_with_object(Hash.new(0)) { |color, hash| hash[\"color_\"+color[:color]] = color[:color].upcase; hash[\"count_\"+color[:color]] += color[:count] }\n# output\n{\"color_red\"=&gt;\"RED\", \"count_red\"=&gt;8, \"color_black\"=&gt;\"BLACK\", \"count_black\"=&gt;4}\n\n[1, 2, 3].each_with_object(0) { |number, sum| sum += number}\n# output\n# 0\n# Because 0 is immutable, and since the initial object is 0, the method returns 0\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#while","title":"while","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = 0\nwhile index &lt; planets.size\n    puts \"#{planets[index]}\"\n    index += 1\nend\n</code></pre> <pre><code>a = 1\nstar = '*'\nwhile a &lt;= 10\n    puts star\n    star += '*'\n    a += 1\nend\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#do-while","title":"do while","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = 0\nloop do\n    puts \"#{planets[index]}\"\n    index += 1\n    break if planets[index] == \"Mars\" or index &gt; planets.size\nend\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#until","title":"until","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nindex = planets.size - 1\nuntil index &lt; 0\n    puts \"#{planets[index]}\"\n    index -= 1\nend\n</code></pre> <pre><code>a = 1\nstar = '*'\nuntil star.length &gt; 10\n    puts star\n    star += '*'\n    a += 1\nend\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#times","title":"times","text":"<pre><code>10.times { puts \"#{rand(1..100)}\"}\n# output\n# will print 10 random numbers\n</code></pre> <p>Just because you can doesn't mean you should iterate over an array like this</p> <pre><code>data_sample = [2, 3, 5, 7]\ndata_sample.size.times { |index| puts \"#{data_sample[index]}\" }\n# output\n# 2\n# 3\n# 5\n# 7\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#upto","title":"upto","text":"<pre><code>data_sample = [2, 3, 5, 7]\n0.upto((data_sample.size - 1) / 2) { |index| puts \"#{data_sample[index]}\" }\n# output\n# 2\n# 3\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#downto","title":"downto","text":"<pre><code>data_sample = [2, 3, 5, 7]\n(data_sample.size - 1).downto(data_sample.size / 2) { |index| puts \"#{data_sample[index]}\" }\n# output\n# 7\n# 5\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#step","title":"step","text":"<pre><code>1.step(20, 2) { |number| puts \"#{number}\"}\n# output\n# 1\n# 3\n# 5\n# 7\n# 9\n# 11\n# 13\n# 15\n# 17\n# 19\n</code></pre> <pre><code>19.step(1, -2) { |number| puts \"#{number}\"}\n# output\n# 19\n# 17\n# 15\n# 13\n# 11\n# 9\n# 7\n# 5\n# 3\n# 1\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#inject","title":"inject","text":"<pre><code>numbers = [2, 2, 2, 2, 2]\nnumbers.inject{ |res, n| res + n }\n# The output is the sum of all numbers\n# If no initial value is set for res, the first element of the array is used as the initial value of res.\n#10\n# Now set the value of res to 11\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject(11) { |res, n| res + n }\n# so 11 + 2, 13 + 2, 15 + 2, 17 + 2 and 19 + 2\n# 21\n# using symbol\nnumbers = [2, 2, 2, 2, 2]\nnumbers.inject(:+)\n# output\n# 10\n</code></pre> <p>Use initial values and symbols</p> <pre><code>numbers = [2, 2, 2, 2, 2]\nnumbers.inject(11, :+)\n# output\n# 21\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#reduce","title":"reduce","text":"<pre><code>numbers = [2, 2, 2, 2, 2]\nnumbers.reduce(11, :+)\n# output\n# 21\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#detect","title":"detect","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.detect { |name| name.start_with?(\"E\") and name.end_with?(\"h\") }\n# output\n# Earth\nsalary = [399, 234, 566, 533, 233]\nsalary.detect { |s| s &gt; 1000 }\n# output\n# nil\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#find","title":"find","text":"<pre><code>planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nplanets.find { |name| name.start_with?(\"E\") and name.end_with?(\"h\") }\n# output\n# Earth\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#select","title":"select","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.select { |n| n % 2 == 0 }\n# Now you have an even array\n# [2, 4, 6, 8, 10]\n# If there are no values that satisfy your logic, return an empty array\n[1, 1, 1].select { |n| n % 2 == 0 }\n# no even numbers\n# []\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#reject","title":"reject","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.reject { |n| n % 2 == 0 }\n# Reject if the number is even, so now we have an odd array\n# [1, 3, 5, 7, 9]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#keep_if","title":"keep_if","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.keep_if { |n| n % 2 == 0 }\n# numbers Array contains only even numbers\n# [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#delete_if","title":"delete_if","text":"<pre><code>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.delete_if { |n| n % 2 == 0 }\n# numbers Array contains only odd numbers\n# [1, 3, 5, 7, 9]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#drop_while","title":"drop_while","text":"<pre><code>numbers = [1, 2, 3, 1, 2, 3, 0]\nnumbers.drop_while { |n| n &lt; 3 }\n# is 3 less than 3, returns false, so delete 1, 2\n# [3, 1, 2, 3, 0]\n</code></pre>"},{"location":"quick-ref/ruby/arrays/#reverse_each","title":"reverse_each","text":"<pre><code>words = %w[first second third fourth fifth sixth]\nstr = \"\"\nwords.reverse_each {|word| str += \"#{word} \"}\np str #=&gt; \"sixth fifth fourth third second first \"\n</code></pre>"},{"location":"quick-ref/ruby/blocks/","title":"Blocks","text":""},{"location":"quick-ref/ruby/blocks/#block-example","title":"Block example","text":"<pre><code># return value\ndef give_me_data\n    data = yield\n    puts \"data = #{data}\"\nend\ngive_me_data { \"Big data\" }\n# output =&gt; data = Big data\n</code></pre> <p>The code between <code>do</code> and <code>end</code> (for multiple lines) or curly braces <code>{</code> and <code>}</code> (for a single line) is called a block, and they can define multiple parameters between two pipes <code>( |arg1, arg2|)</code></p>"},{"location":"quick-ref/ruby/blocks/#single-line-block","title":"Single line block","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.each { |s| puts s }\n# puts s = block body\n# |s| = block arguments\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#multi-line-block","title":"Multi-line block","text":"<pre><code>salary.each do |s|\n    a = 10\n    res = a * s\n    puts res\nend\n# Block\n# a = 10\n# res = a * s\n# puts res\n# block parameters\n# |s|\n</code></pre> <p>Blocks can be passed as method parameters or associated with method calls. block returns the last evaluated statement</p>"},{"location":"quick-ref/ruby/blocks/#implicitly-passing-a-block","title":"Implicitly passing a block","text":"<pre><code>def give_me_data\n    puts \"I am inside give_me_data method\"\n    yield\n    puts \"I am back in give_me_data method\"\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# I am inside give_me_data method\n# Big data\n# I am back in give_me_data method\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#called-multiple-times","title":"Called multiple times","text":"<pre><code>def give_me_data\n    yield\n    yield\n    yield\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# Big data\n# Big data\n# Big data\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#called-with-block-parameters","title":"Called with block parameters","text":"<pre><code>def give_me_data\n    yield 10\n    yield 100\n    yield 30\nend\n\ngive_me_data { |data| puts \"Big data #{data} TB\" }\n\n# output\n# Big data 10 TB\n# Big data 100 TB\n# Big data 30 TB\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#called-with-multiple-block-parameters","title":"Called with multiple block parameters","text":"<pre><code>def give_me_data\n    yield \"Big data\", 10, \"TB\"\n    yield \"Big data\", 100, \"GB\"\n    yield \"Big data\", 30, \"MB\"\nend\n\ngive_me_data { |text, data, unit| puts \"#{text} #{data} #{unit}\" }\n\n# output\n# Big data 10 TB\n# Big data 100 GB\n# Big data 30 MB\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#block-will-attempt-to-return-from-the-current-context","title":"Block will attempt to return from the current context","text":"<pre><code>give_me_data\n    puts \"I'm inside the give_me_data method\"\nend\n\ndef test\n  puts \"I'm inside the test method\"\n  give_me_data { return 10 } # Code returns from here\n  puts \"I am back in test method\"\nend\n\nreturn_value = test\n\n# output\n# I'm inside the test method\n# I'm inside the give_me_data method\n# 10\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#pass-the-block-explicitly-by-using-the-parameter","title":"Pass the block explicitly by using the &amp; parameter","text":"<pre><code>def give_me_data(&amp;block)\n    block.call\n    block.call\nend\n\ngive_me_data { puts \"Big data\" }\n\n# output\n# Big data\n# Big data\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#check-if-block-is-given","title":"Check if block is given","text":"<pre><code>def give_me_data\n    yield\nend\n\ngive_me_data\n\n# output\n# LocalJumpError: no block given (yield)\n</code></pre>"},{"location":"quick-ref/ruby/blocks/#ways-to-handle-exceptions-and-make-blocks-optional","title":"Ways to handle exceptions and make blocks optional","text":"<pre><code>def give_me_data\n    return \"no block\" unless block_given?\n    yield\nend\n\ngive_me_data { puts \"Big data\" }\ngive_me_data\n\n# output\n# Big data\n</code></pre>"},{"location":"quick-ref/ruby/boolean-enumerable-method/","title":"Boolean Enumerable Method","text":""},{"location":"quick-ref/ruby/boolean-enumerable-method/#boolean-enumerable-method_1","title":"boolean enumerable method","text":"Name When to use <code>all?</code> When you want to check if all elements meet your condition <code>any?</code> When you want to check if at least one item meets your condition <code>one?</code> When you want to check if one element meets your requirement <code>none?</code> When you want to check if no item meets your condition, the opposite of? <code>empty?</code> When you want to check if an object is empty <code>include?</code> When you want to check if an element exists in the object"},{"location":"quick-ref/ruby/boolean-enumerable-method/#all","title":"all?","text":"<pre><code>[2, 4, 6, 8, 10].all? { |num| num % 2 == 0 }\n# true\n[1, 4, 6, 8, 10].all? { |num| num % 2 == 0 }\n# false\n</code></pre>"},{"location":"quick-ref/ruby/boolean-enumerable-method/#any","title":"any?","text":"<pre><code>[1, 3, 5, 7, 10].any? { |num| num % 2 == 0 }\n# true\n[1, 3, 5, 7, 19].any? { |num| num % 2 == 0 }\n# false\n</code></pre>"},{"location":"quick-ref/ruby/boolean-enumerable-method/#one","title":"one?","text":"<pre><code>[1, 3, 2, 5, 7].one? { |num| num % 2 == 0 }\n# true\n[1, 3, 2, 5, 4].one? { |num| num % 2 == 0 }\n# false\n</code></pre>"},{"location":"quick-ref/ruby/boolean-enumerable-method/#none","title":"none?","text":"<pre><code>[1, 3, 5, 7, 9].none? { |num| num % 2 == 0 }\n# true\n[2, 3, 5, 7, 9].none? { |num| num % 2 == 0 }\n# false\n</code></pre>"},{"location":"quick-ref/ruby/boolean-enumerable-method/#empty","title":"empty?","text":"<pre><code>[].empty?\n# true\n[1, 3, 5, 7, 9].empty?\n# false\n</code></pre>"},{"location":"quick-ref/ruby/classes/","title":"Classes","text":""},{"location":"quick-ref/ruby/classes/#classes-example","title":"Classes Example","text":"<pre><code>class Person\n    # when you create a new object, it looks for a method named initialize and executes it, like a constructor in java\n    # def initialize(name, number)\n    #    @name = name\n    #    @number = number\n    # end\n    # instance variable\n    # @name\n    # class variable\n    # @@count\n    # attr_accessor acts as a getter and setter for the following instance attributes\n    attr_accessor :name, :number\n    # class variable must be initialized\n    @@count = 0\n    def self.count\n        @@count\n    end\n    def self.count=(count)\n        @@count = count\n    end\n    def initialize\n        @@count += 1\n    end\nend\n# create an instance of the Person class\np1 = Person.new\n# set attributes of the Person class\np1.name = \"Yukihiro Matsumoto\"\np1.number = 9999999999\n# get attributes of the Person class\nputs \"#{p1.name}\"\nputs \"#{p1.number}\"\nputs \"#{Person.count}\"\n# Yukihiro Matsumoto\n# 9999999999\n# 1\np2 = Person.new\np2.name = \"Yukihiro Matsumoto\"\np2.number = 9999999999\n# get attributes of the Person class\nputs \"#{p2.name}\"\nputs \"#{p2.number}\"\nputs \"#{Person.count}\"\n# Yukihiro Matsumoto\n# 9999999999\n# 2\n# set class variable\nPerson.count = 3\nputs \"#{Person.count}\"\n# 3\n</code></pre>"},{"location":"quick-ref/ruby/classes/#inherit-a-class","title":"Inherit a class","text":"<pre><code>class Person\n    attr_accessor :name, :number\nend\n# Inherit methods and properties from parent class using &lt; symbol\nclass Student &lt; Person\n    attr_accessor :id\nend\ns = Student.new\ns.name = \"James Bond\"\ns.number = 700\ns.id = 678\nputs \"#{p.name}\"\nJames Bond\nputs \"#{p.number}\"\n700\nputs \"#{p.id}\"\n678\n</code></pre>"},{"location":"quick-ref/ruby/classes/#check-instance-type","title":"Check instance type","text":"<pre><code>class Vehicle; end\nclass Car &lt; Vehicle; end\nclass Audi &lt; Car; end\ncar = Car.new\ncar.instance_of? Vehicle\nfalse\ncar.instance_of? Car\ntrue\ncar.instance_of? Audi\nfalse\na = 7\na.instance_of? Integer\ntrue\na.instance_of? Numeric\nfalse\n</code></pre> <p>Returns true if the object is an instance of the given class and not a subclass or superclass</p>"},{"location":"quick-ref/ruby/classes/#print-all-method-names-of-a-class","title":"Print all method names of a class","text":"<pre><code>puts (String.methods).sort\n# Exclude methods inherited from Object class\nputs (String.methods - Object.public_instance_methods).sort\n</code></pre>"},{"location":"quick-ref/ruby/classes/#check-if-a-class-has-a-specific-method","title":"Check if a class has a specific method","text":"<pre><code>String.respond_to?(:prepend)\ntrue\nString.respond_to?(:append)\nfalse\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/","title":"Combination Method","text":""},{"location":"quick-ref/ruby/combination-method/#combination-method_1","title":"Combination method","text":"<ul> <li><code>&amp;</code> Returns a new array containing each element found in array and array other_array; duplicates are omitted; use eql?   to compare items</li> <li><code>intersection</code> Returns a new array containing each element found in self and all given arrays other_arrays; duplicates   are omitted; use eql? to compare items</li> <li><code>+</code> Returns an array containing all elements of self followed by all elements of the given array</li> <li><code>-</code> Returns an array containing all elements of self not found in the given array</li> <li><code>union</code> Returns an array containing all elements of self and all elements of the given array, with duplicates removed</li> <li><code>difference</code> Returns an array containing all elements of self not found in any given array</li> <li><code>product</code> self Returns or produces all combinations of elements from self and the given array</li> </ul>"},{"location":"quick-ref/ruby/combination-method/#_1","title":"&amp;","text":"<pre><code>[0, 1, 2, 3] &amp; [1, 2] # =&gt; [1, 2]\n[0, 1, 0, 1] &amp; [0, 1] # =&gt; [0, 1]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#intersection","title":"intersection","text":"<pre><code>[0, 1, 2, 3].intersection([0, 1, 2], [0, 1, 3])\n# =&gt; [0, 1]\n[0, 0, 1, 1, 2, 3].intersection([0, 1, 2], [0, 1, 3])\n# =&gt; [0, 1]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#_2","title":"+","text":"<pre><code>a = [0, 1] + [2, 3]\na # =&gt; [0, 1, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#-","title":"-","text":"<pre><code>[0, 1, 1, 2, 1, 1, 3, 1, 1] - [1]\n# =&gt; [0, 2, 3]\n[0, 1, 2, 3] - [3, 0]\n# =&gt; [1, 2]\n[0, 1, 2] - [4]\n# =&gt; [0, 1, 2]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#union","title":"union","text":"<pre><code>[0, 1, 2, 3].union([4, 5], [6, 7])\n# =&gt; [0, 1, 2, 3, 4, 5, 6, 7]\n[0, 1, 1].union([2, 1], [3, 1])\n# =&gt; [0, 1, 2, 3]\n[0, 1, 2, 3].union([3, 2], [1, 0])\n# =&gt; [0, 1, 2, 3]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#difference","title":"difference","text":"<pre><code>[0, 1, 1, 2, 1, 1, 3, 1, 1].difference([1])\n# =&gt; [0, 2, 3]\n[0, 1, 2, 3].difference([3, 0], [1, 3])\n# =&gt; [2]\n[0, 1, 2].difference([4])\n# =&gt; [0, 1, 2]\n</code></pre>"},{"location":"quick-ref/ruby/combination-method/#product","title":"product","text":"<pre><code>a = [0, 1, 2]\na1 = [3, 4]\np = a.product(a1)\np.size # =&gt; 6 # a.size * a1.size\np # =&gt; [[0, 3], [0, 4], [1, 3], [1, 4], [2, 3], [2, 4]]\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/","title":"Flow Control","text":""},{"location":"quick-ref/ruby/flow-control/#if","title":"if","text":"<pre><code>num = 2\nputs 'two' if num == 2\n</code></pre> <p>If the condition is true, execute the code</p>"},{"location":"quick-ref/ruby/flow-control/#if-elsif-else","title":"if elsif else","text":"<pre><code>temp = 19\nif temp &gt;= 25\n  puts \"hot\"\nelsif temp &lt; 25 &amp;&amp; temp &gt;= 18\n  puts \"normal\"\nelse\n  puts \"cold\"\nend\n# output =&gt; normal\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/#unless","title":"unless","text":"<pre><code># Unless contrary to if , evaluates when the statement is false\nname = \"rob\"\n# if name != \"bob\"\nunless name == \"bob\"\n  puts \"hello stranger\"\nelse\n  puts \"hello bob\"\nend\n# output =&gt; hello stranger\nnum = 6\nputs 'not two' unless num == 2\n# output =&gt; not two\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/#case","title":"case","text":"<pre><code># case returns the value of the last expression executed\ncase input\n# Check for an integer, 19\nwhen 19\n  puts \"It's 19\"\n  # \u68c0\u67e5\u4e00\u4e2a\u786e\u5207\u7684\u5b57\u7b26\u4e32\uff0c\u201cZaman\u201d\nwhen \"Zaman\"\n  puts \"Hi Zaman\"\nwhen 7..11\n  puts \"It's between 7 and 11\"\n  # Check multiple values, \"coffee\"\nwhen \"tea\", \"coffee\"\n  puts \"Happy days\"\nend\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/#case-short-syntax","title":"case( short syntax )","text":"<pre><code>case input\n  when 19 then puts \"It's 19\"\nend\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/#case-optional-failure","title":"case( Optional failure )","text":"<pre><code>case input\n  when 19 then puts \"It's 19\"\nelse\n  puts \"It's not 19\"\nend\n</code></pre>"},{"location":"quick-ref/ruby/flow-control/#case-get-return-value","title":"case( Get return value )","text":"<pre><code>marks = 86\nresult = case marks\n        when 0..49 then \"Fail\"\n        when 50..64 then \"Pass\"\n        when 65..74 then \"Credit\"\n        when 75..84 then \"Distinction\"\n        when 85..100 then \"High Distinction\"\n        else \"Invalid marks\"\n        end\n\nputs result\n# High Distinction\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/ruby/getting-started/#install","title":"Install","text":"<pre><code># Debian, Ubuntu\n$ sudo apt-get install ruby-full\n# Windows\n$ winget install RubyInstallerTeam.Ruby\n$ brew install ruby # macOS\n$ docker run -it --rm ruby:latest # Docker\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#what-is-gemfile-and-gemfilelock","title":"What is Gemfile and Gemfile.lock","text":"<ul> <li>Gemfile Is the Bundler (also gem) configuration file that contains the   project's gem list (dependencies)</li> </ul> <pre><code># Specify gem in the Gemfile in the project root directory\nruby '3.1.2'\n\nsource 'https://rubygems.org'\ngem 'nokogiri'\ngem 'rack', '~&gt;3.0.10'\ngem 'rspec', :require =&gt; 'spec'\n</code></pre> <p>Install all gems in Gemfile</p> <pre><code>bundle install\n</code></pre> <p>Solve the problem of Gemfile.lock inconsistency between mac for development and linux for production</p> <pre><code>bundle lock --add-platform x86_64-linux\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#install-a-specific-version-of-a-specific-ruby-gem","title":"Install a specific version of a specific ruby gem","text":"<pre><code>gem install bundler -v 2.4.20\ngem install minitest -v 5.22.3\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#update-gems-using-bundler","title":"Update gems using Bundler","text":"<pre><code># Updating a single gem using Bundler\n$ bundle update nokogiri\n# Use Bundler to update each gem in the Gemfile\n$ bundle update\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#comment","title":"Comment","text":"<pre><code># This is a single line comments.\n=begin\nMulti-line\nComment\n=end\nputs \"Hello world!\"  # Inline comments for code\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#reserved-words","title":"reserved words","text":"Reserved words Description <code>__ENCODING__</code> The script encoding of the current file <code>__LINE__</code> The line number of this keyword in the current file <code>__FILE__</code> The path of the current file <code>BEGIN</code> Code enclosed in { } is run before the program is run <code>END</code> Code enclosed in { } is run at the end of the program <code>alias</code> Create an alias for an existing method, operator, or global variable <code>and</code> Logical AND operator <code>begin</code> Begin a block of code <code>break</code> Terminate a loop <code>case</code> Compare an expression with matching <code>when</code> clauses, terminated with  <code>end</code> <code>class</code> Define a class <code>def</code> define a function/method <code>defined?</code> Check if a variable or function exist <code>do</code> Start a block of code, terminated with the  <code>end</code> keyword <code>else</code> Execute the following code if previous conditions are not met <code>elsif</code> Alternative condition for if expressions <code>end</code> End blocks of code starting with keywords like <code>begin</code>, <code>class</code>,<code>def</code>,<code>do</code>,<code>if</code>, etc. <code>ensure</code> Always execute at the end of a block <code>false</code> Logical boolean value false <code>for</code> Start a <code>for</code> loop <code>if</code> Execute the code block <code>if</code> the condition is <code>true</code> <code>in</code> Used with <code>for</code> loop <code>module</code> Define a module <code>next</code> jump to the point before the evaluation of the loop condition <code>nil</code> Stand for null, invalid, or always false <code>not</code> Logical NOT operator <code>or</code> Logical OR operator <code>redo</code> Jump back to the loop condition evaluation <code>rescue</code> Evaluate expressions after an exception is raised <code>retry</code> Repeat method calls when called outside <code>rescue</code>, jump to the top of the block when called inside <code>rescue</code> <code>return</code> Return a value from a method or block <code>self</code> Refer to the current object <code>super</code> Call the same-named method in the superclass <code>then</code> Used as a separator with<code>if</code>,<code>unless</code>,<code>when</code>,<code>case</code>,<code>rescue</code> <code>true</code> Logical boolean value true <code>undef</code> Undefine methods/functions within the current class <code>until</code> Execute the code block until the condition is false <code>when</code> Begin a clause under a <code>case</code> statement <code>while</code> Execute the code block while the condition is true <code>yield</code> Execute the code block passed to a method"},{"location":"quick-ref/ruby/getting-started/#operator","title":"Operator","text":""},{"location":"quick-ref/ruby/getting-started/#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code></li> <li><code>or</code></li> <li><code>not</code></li> <li><code>&amp;&amp;</code></li> <li><code>||</code></li> <li><code>!</code></li> </ul>"},{"location":"quick-ref/ruby/getting-started/#bit-operators","title":"Bit operators","text":"<ul> <li><code>&amp;</code></li> <li><code>|</code></li> <li><code>^</code></li> <li><code>~</code></li> <li><code>&lt;&lt;</code></li> <li><code>&gt;&gt;</code></li> </ul>"},{"location":"quick-ref/ruby/getting-started/#arithmetic-operators","title":"Arithmetic operators","text":"<ul> <li><code>+</code></li> <li><code>-</code></li> <li><code>*</code></li> <li><code>/</code></li> <li><code>%</code></li> <li><code>**</code></li> </ul>"},{"location":"quick-ref/ruby/getting-started/#comparison-operator","title":"Comparison operator","text":"<ul> <li><code>==</code></li> <li><code>!=</code></li> <li><code>&gt;</code></li> <li><code>&lt;</code></li> <li><code>&gt;=</code></li> <li><code>&lt;=</code></li> <li><code>&lt;=&gt;</code></li> <li><code>===</code></li> <li><code>eql?</code></li> <li><code>equal?</code></li> </ul>"},{"location":"quick-ref/ruby/getting-started/#operator-examples","title":"Operator examples","text":"<pre><code># Addition\n1 + 1   #=&gt; 2\n# Subtraction\n2 - 1   #=&gt; 1\n# Multiplication\n2 * 2   #=&gt; 4\n# Division\n10 / 5  #=&gt; 2\n17 / 5    #=&gt; 3, not 3.4\n17 / 5.0  #=&gt; 3.4\n# Exponentiation\n2 ** 2  #=&gt; 4\n3 ** 4  #=&gt; 81\n# Modulus (remainder of division)\n8 % 2   #=&gt; 0  (8 / 2 = 4; no remainder)\n10 % 4  #=&gt; 2  (10 / 4 = 2 remainder 2)\na = 10\nb = 20\na == b #=&gt; false\na != b #=&gt; true\na &gt; b #=&gt; false\na &lt; b #=&gt; true\na &gt;= b #=&gt; false\na &lt;= b #=&gt; true\n\n# Comparison operators\na &lt;=&gt; b #=&gt; -1\nc = 20\nc &lt;=&gt; b #=&gt; 0\nc &lt;=&gt; a  #=&gt; 1\n# Equality used in when clauses for case statements\n(1...10) === 5 #=&gt; true\n# True if the receiver and the argument have the same type and equal values\n1.eql?(1.0) #=&gt; false\nc = a + b  #=&gt; 30\nc += a #=&gt; 40\nc -= a #=&gt; 30\nc *= a #=&gt; 300\nc /= a #=&gt; 30\nc %= a #=&gt; 3\nc **= a #=&gt; 59049\n\n# Ruby parallel assignment\na = 10\nb = 20\nc = 30\na, b, c = 10, 20, 30\n# Ruby bitwise operators\na = 60\nb = 13\n# &amp; Binary AND operator copies a bit to the result if it exists in both operands.\na &amp; b #=&gt; 12\n# | Binary OR operator copies a bit if it exists in either operand.\na | b #=&gt; 61\n# ^ Binary XOR operator copies a bit if it is set in one operand but not both.\na ^ b #=&gt; 49\n# ~ Binary Ones Complement is unary and has the effect of 'flipping' bits.\n~a\n# &lt;&lt; Binary Left Shift Operator. The left operand's value is moved\n# left by the number of bits specified by the right operand.\na &lt;&lt; 2\n# &gt;&gt; Binary Right Shift Operator. The left operand's value is moved\n# right by the number of bits specified by the right operand.\na &gt;&gt; 2\n\n# Ruby logical operators\na and b #=&gt; true.\na or b #=&gt; true.\na &amp;&amp; b #=&gt; true.\n(a || b) #=&gt; true.\n!(a &amp;&amp; b) #=&gt; false.\nnot(a &amp;&amp; b) #=&gt; false.\n# Ruby ternary operator\n# ? :\n# If condition is true ? Then value X : Otherwise value Y\na == 10 ? puts 'Right' : puts 'Wrong'\n# Ruby range operators\n# .. Creates a range from the start point to the end point (inclusive)\n1..10 #=&gt; Creates a range from 1 to 10 (inclusive of 1 and 10)\n# ... Creates an exclusive range from the start point to the end point\n1...10 #=&gt; Creates an exclusive range from 1 to 10\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#operator-precedence-table","title":"Operator precedence table","text":"<p>From highest to lowest, this is the precedence table for ruby. High precedence operations happen before low precedence operations.</p> <ul> <li>!, ~, unary +</li> <li>**</li> <li>unary -</li> <li>*, /, %</li> <li>+, -</li> <li>&lt;&lt;, &gt;&gt;</li> <li>&amp;</li> <li>|, ^</li> <li> <p>, &gt;=, &lt;, &lt;=</p> </li> <li>&lt;=&gt;, ==, ===, !=, =~, !~</li> <li>&amp;&amp;</li> <li>||</li> <li>.., ...</li> <li>?, :</li> <li>modifier-rescue</li> <li>=, +=, -=, etc.</li> <li>defined?</li> <li>not</li> <li>or, and</li> <li>modifier-if, modifier-unless, modifier-while, modifier-until</li> <li>{ } blocks</li> </ul>"},{"location":"quick-ref/ruby/getting-started/#variables-and-scope","title":"Variables and scope","text":"- - - - Name Scope Example Explanation <code>[a-z]</code> or <code>_</code> Local <code>count = 10</code> or <code>_count = 10</code> Local variables must be initialized <code>@</code> Instance variable <code>@id = []</code> Instance variables have a \"nil\" value before initialization <code>@@</code> Class variable <code>@@name = []</code> Class variables must be initialized <code>$</code> Global variable <code>$version = \"0.8.9\"</code> Global variables have a \"nil\" value before initialization <code>[A-Z]</code> Constant <code>PI = 3.14</code> Constant variables must be initialized, you can change constants, but you will receive a warning <p>There are five different types of variables. The first character determines the range To read in deap about variables check User Guide cap 19,20,21,22,23 Pre-Defined Variables and Constants</p>"},{"location":"quick-ref/ruby/getting-started/#check-the-scope-of-a-variable","title":"Check the scope of a variable","text":"<pre><code>defined? count\n\"local-variable\"\ndefined? @id\n\"instance-variable\"\ndefined? @@name\n\"class variable\"\ndefined? $version\n\"global-variable\"\ndefined? PI\n\"constant\"\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#data-types","title":"Data Types","text":"- - - - Type Example Class Documentation <code>Integer</code> a = 17 a.class &gt; Integer a.class.superclass &gt; Numeric # <code>Float</code> a = 87.23 a.class &gt; Float a.class.superclass &gt; Numeric # <code>String</code> a = \"Hello universe\" a.class &gt; String # <code>Array</code> a = [12, 34] a.class &gt; Array # <code>Hash</code> a = a.class &gt; Hash # <code>Boolean</code> a = falsea = true a.class &gt; FalseClass a.class &gt; TrueClass TrueClass FalseClass <code>Symbol</code> a = :status a.class &gt; Symbol # <code>Range</code> a = 1..3 a.class &gt; Range # <code>Nil</code> a = nil a.class &gt; NilClass # <p>further reading</p>"},{"location":"quick-ref/ruby/getting-started/#check-data-type","title":"Check data type","text":"<pre><code># Both are synonyms\na = 37\na.kind_of? Integer\n# true\na.is_a? Integer\n# true\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#symbol","title":"Symbol","text":"<pre><code>week_days = {sunday: 11, monday: 222}\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#integer-useful-methods","title":"Integer useful methods","text":"<pre><code>2.even?\n# true\n3.even?\n# false\n</code></pre>"},{"location":"quick-ref/ruby/getting-started/#range","title":"Range","text":"<p><code>..</code> Used to create inclusive ranges</p> <pre><code>range = 1..10\nrange.to_a\n# output =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p><code>...</code> Used to create exclusive ranges</p> <pre><code>range = 1...10\nrange.to_a\n# output =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>some useful methods</p> Method name Output <code>cover?</code> <code>(1..5).cover?(5)</code> =&gt; <code>true</code> <code>end</code> <code>('a'..'z').end</code> =&gt; <code>\"z\"</code> <code>first</code> <code>(1..5).first</code> =&gt; <code>1</code> <code>first(3)</code> <code>('A'..'Z').first(2)</code> =&gt; <code>[\"A\", \"B\"]</code> <code>eql?</code> <code>((0..2).eql?(0..5)</code> =&gt; <code>false</code>"},{"location":"quick-ref/ruby/getting-started/#using-step-in-range","title":"Using <code>step</code> in Range","text":"<pre><code>(1..20).step(2) { |number| puts \"#{number}\"}\n# output\n# 1\n# 3\n# 5\n# 7\n# 9\n# 11\n# 13\n# 15\n# 17\n# 19\n</code></pre>"},{"location":"quick-ref/ruby/lambdas/","title":"Lambdas","text":""},{"location":"quick-ref/ruby/lambdas/#declare-a-lambda","title":"Declare a lambda","text":"<pre><code>l = lambda { puts \"Hello World\" }\n# shorthand\nl = -&gt; { puts \"Hello World\" }\n# transfer lambda\nl.call\n# output =&gt; Hello World\n</code></pre> <p>There are multiple ways to call a lambda</p> <pre><code>l.()\nl[]\n</code></pre>"},{"location":"quick-ref/ruby/lambdas/#strict-arguments","title":"strict arguments","text":"<pre><code>l = -&gt; (count) { \"Hello World \" * count }\nl.call 5\n# output\n# \"Hello World Hello World Hello World Hello World Hello World \"\nl.call 5, 2\n# output\nwrong number of arguments (given 2, expected 1)\n</code></pre>"},{"location":"quick-ref/ruby/lambdas/#declare-a-lambda-in-block","title":"declare a lambda in block","text":"<pre><code>def give_me_data\n    puts \"I am inside give_me_data method\"\n    l = -&gt; { return 10 }\n    l.call\n    puts \"I am back in give_me_data method\"\nend\n\nreturn_value = give_me_data\nputs return_value\n\n# output\n# I am inside give_me_data method\n# I am back in give_me_data method\n# nil # because puts return nil\n</code></pre>"},{"location":"quick-ref/ruby/lambdas/#lambdas-are-returned-from-the-lambda-itself-just-like-regular-methods","title":"lambdas are returned from the lambda itself, just like regular methods","text":"<pre><code>l = -&gt; { return 10 }\nl.call\n\n# output =&gt; 10\n</code></pre>"},{"location":"quick-ref/ruby/loops/","title":"Loops","text":""},{"location":"quick-ref/ruby/loops/#while-loop","title":"while loop","text":"<pre><code># variable count\ncount = 4\n# using while loop\n# here conditional is count i.e. 4\nwhile count &gt;= 1\n  # statements to be executed\n  puts \"Ruby Cheatsheet\"\n  count = count - 1\n  # while loop ends here\nend\n</code></pre> <p>output</p> <pre><code>Ruby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\n</code></pre>"},{"location":"quick-ref/ruby/loops/#for-loop","title":"for loop","text":"<pre><code># loop using range as expression\ntext = \"Ruby Cheatsheet\"\n# using for loop with the range\nfor count in 1..5 do\n  puts text\nend\n</code></pre> <p>output</p> <pre><code>Ruby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\nRuby Cheatsheet\n</code></pre>"},{"location":"quick-ref/ruby/loops/#dowhile-loop","title":"do..while loop","text":"<pre><code># starting of do..while loop\nloop do\n  puts \"Ruby Cheatsheet\"\n  val = '7'\n  # using boolean expressions\n  if val == '7'\n    break\n  end\n  # ending of ruby do..while loop\nend\n</code></pre> <p>output</p> <pre><code>Ruby Cheatsheet\n</code></pre>"},{"location":"quick-ref/ruby/loops/#until-loop","title":"until loop","text":"<pre><code>var = 7\n# here do is optional\nuntil var == 11 do\n  # code to be executed\n  puts var * 10\n  var = var + 1\n  # here loop ends\nend\n</code></pre> <p>output</p> <pre><code>70\n80\n90\n100\n</code></pre>"},{"location":"quick-ref/ruby/loops/#break-out-of-loop","title":"Break out of loop","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.each do |s|\n  break if s == 566\n  puts s\nend\n# output\n# 399\n# 234\n</code></pre> <p>By using the <code>break</code> keyword</p>"},{"location":"quick-ref/ruby/loops/#skip-within-loop","title":"skip within loop","text":"<pre><code>salary = [399, 234, 566, 533, 233]\nsalary.each do |s|\n  next if s == 533\n  puts s\nend\n# output\n# 399\n# 234\n# 566\n# 233\n</code></pre> <p>By using next keyword</p>"},{"location":"quick-ref/ruby/loops/#repeat-current-iteration","title":"Repeat current iteration","text":"<pre><code>data = [456, 3000]\nretry_count = 0\nstatus = \"network failure\"\nsum = 0\ndata.each do |d|\n    if retry_count == 3\n        status = \"connection established\"\n        retry_count = 0\n        redo\n    elsif status == \"network failure\" and retry_count &lt; 5\n        puts \"network failure #{retry_count}\"\n        retry_count += 1\n        redo\n    elsif status == \"connection established\"\n        puts d\n        sum += d\n    end\nend\n# output of sum\n# 3456\n</code></pre>"},{"location":"quick-ref/ruby/loops/#start-the-cycle-again","title":"Start the cycle again","text":"<pre><code>numbers = [2, 2, 44, 44]\nsum = 0\nbegin\n    numbers.each do |s|\n        if rand(1..10) == 5\n            puts \"hi 5, let's do it again!\"\n            sum = 0\n            raise \"hi 5\"\n        end\n        puts s\n        sum += s\n    end\nrescue\n    retry\nend\n</code></pre>"},{"location":"quick-ref/ruby/methods/","title":"Methods","text":""},{"location":"quick-ref/ruby/methods/#declare-a-method","title":"Declare a method","text":"<pre><code>def method_name(parameter1, parameter2)\n    puts \"#{parameter1} #{parameter2}\"\n    parameter1 + parameter2\nend\n</code></pre> <pre><code>res = method_name(20, 10)\n# output =&gt; 30\ndef method_name(parameter1, parameter2)\n    puts \"#{parameter1} #{parameter2}\"\n    return parameter1 + parameter2\nend\n# output =&gt; 30\n</code></pre>"},{"location":"quick-ref/ruby/methods/#call-method","title":"Call method","text":"<pre><code>res = method_name(parameter1, parameter2)\n# Methods can be called without parentheses\nres = method_name parameter1, parameter2\n</code></pre>"},{"location":"quick-ref/ruby/methods/#class-method","title":"Class method","text":"<p>Class methods are class-level methods. There are multiple ways to define class methods</p> <pre><code>class Mobile\n    def self.ring\n        \"ring ring ring...\"\n    end\nend\n\nMobile.ring\n</code></pre> <pre><code>class Mobile\n    def Mobile.ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n</code></pre> <pre><code>class Mobile\n    class &lt;&lt; self\n    def ring\n        \"ring ring ring...\"\n       end\n    end\nend\nMobile.ring\n</code></pre> <p>Class methods are instance methods of class objects. When a new class is created, an object of type \"Class\" is initialized and assigned to a global constant (in this case Mobile)</p> <pre><code>Mobile = Class.new do\n    def self.ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n</code></pre> <pre><code>Mobile = Class.new\nclass &lt;&lt; Mobile\n    def ring\n        \"ring ring ring...\"\n    end\nend\nMobile.ring\n</code></pre>"},{"location":"quick-ref/ruby/methods/#use-another-parameter-as-default-value","title":"Use another parameter as default value","text":"<pre><code>def method_name(num1, num2 = num1)\n    return num1 + num2\nend\nres = method_name(10)\n# output =&gt; 20\n</code></pre>"},{"location":"quick-ref/ruby/methods/#define-default-values-for-method-parameters","title":"Define default values for method parameters","text":"<pre><code>def method_name(parameter1, parameter2, type = \"ADD\")\n    puts \"#{parameter1} #{parameter2}\"\n    return parameter1 + parameter2 if type == \"ADD\"\n    return parameter1 - parameter2 if type == \"SUB\"\nend\nres = method_name(20, 10)\n# output =&gt; 30\n</code></pre>"},{"location":"quick-ref/ruby/methods/#pass-variable-length-arguments-to-method-parameters","title":"Pass variable length arguments to method parameters","text":"<pre><code>def method_name(type, *values)\n    return values.reduce(:+) if type == \"ADD\"\n    return values.reduce(:-) if type == \"SUB\"\nend\nnumbers = [2, 2, 2, 3, 3, 3]\nres = method_name(\"ADD\", *numbers)\n# output =&gt; 15\nres = method_name(\"SUB\", *numbers)\n# output =&gt; -11\n# Or you can provide a value like this\nres = method_name(\"ADD\", 2, 2, 2, 3, 3, 3)\n# output =&gt; 15\n</code></pre>"},{"location":"quick-ref/ruby/methods/#modify-object","title":"Modify object","text":"<pre><code>a = [\"Drama\", \"Mystery\", \"Crime\",\n\"Sci-fi\", \"Disaster\", \"Thriller\"]\na.sort\nputs a\n# We did not modify the object\n# Drama\n# Mystery\n# Crime\n# Sci-fi\n# Disaster\n# Thriller\na.sort!\nputs a\n# Modify object\n# Crime\n# Disaster\n# Drama\n# Mystery\n# Sci-fi\n# Thriller\n</code></pre> <p>When you want to modify the object, use <code>!</code> after the method</p>"},{"location":"quick-ref/ruby/methods/#boolean-method","title":"Boolean method","text":"<p>In ruby, methods ending with a question mark (?) are called boolean methods, which return <code>true</code> or <code>false</code></p> <pre><code>\"some text\".nil?\n# false\nnil.nil?\n# true\n</code></pre> <p>You can have your own boolean method</p> <pre><code>def is_vowel?(char)\n    ['a','e','i','o','u'].include? char\nend\nis_vowel? 'a'\n# true\nis_vowel? 'b'\n# false\n</code></pre>"},{"location":"quick-ref/ruby/procs/","title":"Procs","text":""},{"location":"quick-ref/ruby/procs/#proc","title":"Proc","text":"<pre><code>p = Proc.new { puts \"Hello World\" }\n\ndef give_me_data(proc)\n    proc.call\nend\n\ngive_me_data p\n\n# output\n# Hello World\n</code></pre> <p>proc is like a block that can be stored in a variable</p>"},{"location":"quick-ref/ruby/procs/#any-parameter","title":"any parameter","text":"<pre><code>p = Proc.new { |count| \"Hello World \" * count }\n\ndef give_me_data(proc)\n    proc.call 5, 2\nend\n\ngive_me_data p\n\n# output\n# \"Hello World Hello World Hello World Hello World Hello World \"\n</code></pre>"},{"location":"quick-ref/ruby/procs/#proc-will-attempt-to-return-from-the-current-context","title":"proc will attempt to return from the current context","text":"<pre><code>p = Proc.new { return 10 }\np.call\n# output\nLocalJumpError: unexpected return\n</code></pre>"},{"location":"quick-ref/ruby/procs/#cannot-return-from-top-level-context","title":"Cannot return from top-level context","text":"<pre><code>def give_me_data\n    puts \"I'm inside the give_me_data method\"\n    p = Proc.new { return 10 }\n    p.call # Code returns from here\n    puts \"I am back in give_me_data method\"\nend\n\nreturn_value = give_me_data\nputs return_value\n\n# output\n# I'm inside the give_me_data method\n# 10\n</code></pre>"},{"location":"quick-ref/ruby/see-also/","title":"See Also","text":"<ul> <li>Ruby (ruby-lang.org)</li> <li>Ruby Cheatsheet (github.com)</li> </ul>"},{"location":"quick-ref/ruby/strings/","title":"Strings","text":""},{"location":"quick-ref/ruby/strings/#string-interpolation","title":"String interpolation","text":"<pre><code>name = \"World\"\nputs \"Hello #{name}\"\nputs \"The total is #{1+1}\"\n# \"the total is 2\"\n</code></pre> <p>String interpolation allows you to combine strings together</p>"},{"location":"quick-ref/ruby/strings/#extract-substring","title":"Extract substring","text":"<pre><code>string = \"abc123\"\nstring[0,3]\n# \"abc\"\nstring[3,3]\n# \"123\"\nstring[0..-2]\n# \"abc12\"\n#remove or replace the substring\nstring[0..2] = \"\"\nputs string\n# \"123\"\n</code></pre> <p>A substring is a small part of a string, which is useful if you only want that specific part, like the beginning, middle, or end</p>"},{"location":"quick-ref/ruby/strings/#convert-a-string-to-lowercase-or-uppercase","title":"Convert a string to lowercase or uppercase","text":"<pre><code>\"HELLO World\".downcase  # \"hello world\"\n\"hello worlD\".upcase    # \"HELLO WORLD\"\n\"hEllo wOrlD\".capitalize # \"Hello world\"\n\"hEllo WOrlD\".swapcase  # \"HeLLO woRLd\"\n</code></pre>"},{"location":"quick-ref/ruby/strings/#useful-methods","title":"useful methods","text":"Function Name Output Note length or size <code>\"HELLO World\".length</code> =&gt; <code>11</code> <code>\"HELLO World\".size</code> =&gt; <code>11</code> Returns the length of the string reverse <code>\"hello worlD\".reverse</code> =&gt; <code>\"Dlrow olleh\"</code> Returns the reversed string include? other_str <code>\"hEllo wOrlD\".include? \"w\"</code> =&gt; <code>true</code> Returns true if the string or character exists, otherwise returns false gsub(pattern, replacement) <code>\"hEllo wOrlD\".gsub(\" \", \"_\")</code> =&gt; <code>\"hEllo_wOrlD\"</code> gsub or global substitute replaces one or more strings with the provided string gsub(pattern, hash) <code>\"organization\".gsub(\"z\", 'z' =&gt; 's')</code> =&gt; <code>\"organisation\"</code> gsub or global substitute replaces one or more strings with the provided hash gsub(pattern) <code>\"Price of the phone is 1000 AUD\".gsub(/\\d+/) {\\| s\\| '$'+s }</code><code>\"Price of the phone is $1000 AUD\"</code> gsub or global substitute replaces one or more strings with the provided block strip <code>\" hEllo WOrlD \".strip</code> <code>\"hEllo WOrlD\"</code> It will remove (trim) any leading and trailing characters: null (\u201c\\x00\u201d), horizontal tab (\u201c\\t\u201d), newline (\\n), vertical tab (\u201c\\v\u201d), form feed (f), carriage return(\\r), space (\" \") prepend <code>a = \"world\" &lt;br&gt; a.prepend(\"hello \")</code> <code>\"hello world\"</code> Adds the string before another string insert <code>a = \"hello\" &lt;br&gt; a.insert(a.length, \" world\")</code> <code>\"hello world\"</code> Inserts the string at a specific position start_with? <code>string = \"ruby programming\"</code> <code>string.start_with? \"ruby\"</code> <code>true</code> Checks if the string starts with a specific prefix end_with? <code>string = \"ruby programming\"</code> <code>string.end_with? \"ruby\"</code> <code>false</code> Checks if the string ends with a specific prefix delete_suffix <code>string = \"sausage is expensive\"</code> <code>string.delete_suffix(\" is expensive\")</code> <code>\"sausage\"</code> Deletes the suffix from the string delete_prefix <code>string = \"sausage is expensive\"</code> <code>string.delete_prefix(\"sausage\")</code> <code>\" is expensive\"</code> Deletes the prefix from the string split <code>string = \"a b c d\" &lt;br&gt; string.split</code> <code>[\"a\", \"b\", \"c\", \"d\"]</code> Converts the string into an array of characters join <code>arr = ['a', 'b', 'c'] &lt;br&gt; arr.join</code> =&gt; <code>\"abc\"</code> Converts an array into a string to_i <code>a = \"49\" &lt;br&gt; a.to_i</code> =&gt; <code>49</code> Converts the string into an integer chop <code>\"abcd?\".chop(\"?\")</code> =&gt; <code>\"abcd\"</code> Deletes the last character from the string count <code>str = \"aaab\" &lt;br&gt; str.count(\"a\")</code> <code>3</code> Counts the characters in the string to_f <code>a = \"49\"</code> <code>a.to_f</code> <code>49.0</code> Converts the string into a floating point number to_sym <code>a = \"key\"</code> <code>a.to_sym</code> <code>:key</code> Converts the string into a symbol match <code>\"abcd?\".match(/ab/)</code> =&gt; <code>#&lt;MatchData \"ab\"&gt;</code> Converts the pattern into a regular expression and calls its match method on the string empty? <code>\"hello\".empty?</code> =&gt; <code>false</code> Returns true if the length of the string is zero squeeze <code>\"Booook\".squeeze</code> =&gt; <code>\"Bok\"</code> Returns a copy of the string where runs of the same character are replaced by a single character * <code>puts \"Ruby \" * 4</code> =&gt; <code>Ruby Ruby Ruby Ruby</code> Returns the concatenation of multiple copies of self + <code>\"sammy \" + \"shark\"</code> =&gt; <code>\"sammyshark\"</code> Returns the concatenation of self and the given other string eql? <code>s = 'foo'</code> =&gt; <code>true</code> <code>s.eql?('foo')</code> =&gt; <code>true</code> Returns true if the objects have the same length and content; false otherwise"},{"location":"quick-ref/rust/","title":"Rust","text":"<p>Abstract</p> <p>The Rust quick reference cheat sheet that aims at providing help on writing basic syntax and methods.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Types</li> <li>Strings</li> <li>Operators</li> <li>Flow Control</li> <li>Functions</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["rust"]},{"location":"quick-ref/rust/also-see/","title":"Also See","text":"<ul> <li>The Rust Document (doc.rust-lang.org)</li> <li>The Rust Reference (doc.rust-lang.org)</li> <li>Rust Cheatsheet (phaiax.github.io)</li> </ul>"},{"location":"quick-ref/rust/flow-control/","title":"Flow Control","text":""},{"location":"quick-ref/rust/flow-control/#if-expression","title":"If Expression","text":"<pre><code>let case1: i32 = 81;\nlet case2: i32 = 82;\n\nif case1 &lt; case2 {\n  println!(\"case1 is greater than case2\");\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#ifelse-expression","title":"If...Else Expression","text":"<pre><code>let case3 = 8;\nlet case4 = 9;\n\nif case3 &gt;= case4 {\n    println!(\"case3 is better than case4\");\n} else {\n    println!(\"case4 is greater than case3\");\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#ifelseifelse-expression","title":"If...Else...if...Else Expression","text":"<pre><code>let foo = 12;\nlet bar = 13;\n\nif foo == bar {\n    println!(\"foo is equal to bar\");\n} else if foo &lt; bar {\n    println!(\"foo less than bar\");\n} else if foo != bar {\n    println!(\"foo is not equal to bar\");\n} else {\n    println!(\"Nothing\");\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#iflet-expression","title":"If...Let Expression","text":"<pre><code>let mut arr1: [i64; 3] = [1, 2, 3];\nif let [1, 2, _] = arr1 {\n    println!(\"Works with array\");\n}\n\nlet mut arr2: [&amp;str; 2] = [\"one\", \"two\"];\nif let [\"Apple\", _] = arr2 {\n    println!(\"Works with str array too\");\n}\n</code></pre> <pre><code>let tuple_1 = (\"India\", 7, 90, 90.432);\nif let (_, 7, 9, 78.99) = tuple_1 {\n    println!(\"Works with tuples too\");\n}\n\nlet tuple_2 = (9, 7, 89, 12, \"Okay\");\nif let (9, 7, 89, 12, blank) = tuple_2 {\n    println!(\"Everything {blank} mate?\");\n}\n\nlet tuple_3 = (89, 90, \"Yes\");\nif let (9, 89, \"Yes\") = tuple_3 {\n    println!(\"Pattern did match\");\n} else {\n    println!(\"Pattern did not match\");\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#match-expression","title":"Match Expression","text":"<pre><code>let day_of_week = 2;\nmatch day_of_week {\n    1 =&gt; {\n        println!(\"Its Monday my dudes\");\n    }\n    2 =&gt; {\n        println!(\"It's Tuesday my dudes\");\n    }\n    3 =&gt; {\n        println!(\"It's Wednesday my dudes\");\n    }\n    4 =&gt; {\n        println!(\"It's Thursday my dudes\");\n    }\n    5 =&gt; {\n        println!(\"It's Friday my dudes\");\n    }\n    6 =&gt; {\n        println!(\"It's Saturday my dudes\");\n    }\n    7 =&gt; {\n        println!(\"It's Sunday my dudes\");\n    }\n    _ =&gt; {\n        println!(\"Default!\")\n    }\n};\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#nestedif-expression","title":"Nested...If Expression","text":"<pre><code>let nested_conditions = 89;\nif nested_conditions == 89 {\n    let just_a_value = 98;\n    if just_a_value &gt;= 97 {\n        println!(\"Greater than 97\");\n    }\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#for-loop","title":"For Loop","text":"<pre><code>for mut i in 0..15 {\n    i -= 1;\n    println!(\"The value of i is : {i}\");\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#while-loop","title":"While Loop","text":"<pre><code>let mut check = 0;\nwhile check &lt; 11 {\n    println!(\"Check is : {check}\");\n    check += 1;\n    println!(\"After incrementing: {check}\");\n\n    if check == 10 {\n        break; // stop while\n    }\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#loop-keyword","title":"Loop keyword","text":"<pre><code>loop {\n    println!(\"hello world forever!\");\n}\n</code></pre> <p>The infinite loop indicated.</p>"},{"location":"quick-ref/rust/flow-control/#break-statement","title":"Break Statement","text":"<pre><code>let mut i = 1;\nloop {\n    println!(\"i is {i}\");\n    if i &gt; 100 {\n        break;\n    }\n    i *= 2;\n}\n</code></pre>"},{"location":"quick-ref/rust/flow-control/#continue-statement","title":"Continue Statement","text":"<pre><code>for (v, c) in (0..10 + 1).enumerate() {\n    println!(\"The {c} number loop\");\n    if v == 9 {\n        println!(\"Here we go continue?\");\n        continue;\n    }\n    println! {\"The value of v is : {v}\"};\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/","title":"Functions","text":""},{"location":"quick-ref/rust/functions/#basic-function","title":"Basic function","text":"<pre><code>fn print_message() {\n    println!(\"Hello, CheatSheets.zip!\");\n}\n\nfn main() {\n    //Invoking a function in Rust.\n    print_message();\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/#pass-by-value","title":"Pass by Value","text":"<pre><code>fn main() {\n    let x: u32 = 10;\n    let y: u32 = 20;\n\n    // =&gt; 200\n    println!(\"Calc: {}\", cal_rect(x, y));\n}\n\nfn cal_rect(x: u32, y: u32) -&gt; u32 {\n    x * y\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/#pass-by-reference","title":"Pass by Reference","text":"<pre><code>fn main() {\n    let mut by_ref = 3; // =&gt; 3\n    power_of_three(&amp;mut by_ref);\n    println!(\"{by_ref}\"); // =&gt; 9\n}\n\nfn power_of_three(by_ref: &amp;mut i32) {\n    // de-referencing is important\n    *by_ref = *by_ref * *by_ref;\n    println!(\"{by_ref}\"); // =&gt; 9\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/#returns","title":"Returns","text":"<pre><code>fn main() {\n    let (mut radius, mut pi) = (3.0, 3.14);\n    let (area, _perimeter) = calculate(\n        &amp;mut radius,\n        &amp;mut pi\n    );\n    println!(\"The area and the perimeter of the circle are: {area} &amp; {_perimeter}\");\n}\n\nfn calculate(radius: &amp;mut f64, pi: &amp;mut f64) -&gt; (f64, f64) {\n    let perimeter = 2.0 * *pi * *radius;\n    let area = *pi * *radius * *radius;\n    return (area, perimeter);\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/#arrays-as-arguments","title":"Arrays as Arguments","text":"<pre><code>fn main() {\n    let mut array: [i32; 5] = [1, 2, 3, 4, 6];\n    print_arrays(array);\n    println!(\"The elements: {array:?}\");\n}\n\nfn print_arrays(mut array: [i32; 5]) {\n    array[0] = 89;\n    array[1] = 90;\n    array[2] = 91;\n    array[3] = 92;\n    array[4] = 93;\n    println!(\"The elements: {array:?}\");\n}\n</code></pre>"},{"location":"quick-ref/rust/functions/#returning-arrays","title":"Returning Arrays","text":"<pre><code>fn main() {\n    let mut arr: [i32; 5] = [2, 4, 6, 8, 10];\n    multiply(arr);\n    println!(\"The array is : {:?}\", multiply(arr));\n}\n\nfn multiply(mut arr: [i32; 5]) -&gt; [i32; 5] {\n    arr[2] = 90;\n    for mut i in 0..5 {\n        arr[i] = arr[i] * arr[2];\n    }\n    return arr;\n}\n</code></pre>"},{"location":"quick-ref/rust/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/rust/getting-started/#hello_worldrs","title":"Hello_World.rs","text":"<pre><code>fn main() {\n    println!(\"Hello, World!\");\n}\n</code></pre>"},{"location":"quick-ref/rust/getting-started/#compiling-and-running","title":"Compiling and Running","text":"<pre><code>$ rustc Hello_World.rs\n$ ./Hello_World\nHello, World!\n</code></pre>"},{"location":"quick-ref/rust/getting-started/#primitive-types","title":"Primitive types","text":"<code>bool</code> Boolean (<code>true</code> / <code>false</code>) <code>char</code> character <code>f32</code>, <code>f64</code> 32-bits, 64-bits floats <code>i64</code>, <code>i32</code>, <code>i16</code>, <code>i8</code> signed 16- ... integers <code>u64</code>, <code>u32</code>, <code>u16</code>, <code>u8</code> unsigned 16-bits, ... integers <code>isize</code> pointer-sized signed integers <code>usize</code> pointer-sized unsigned integers"},{"location":"quick-ref/rust/getting-started/#formatting","title":"Formatting","text":"<pre><code>// Single Placeholder\nprintln!(\"{}\", 1);\n\n// Multiple Placeholder\nprintln!(\"{} {}\", 1, 3);\n\n// Positional Arguments\nprintln!(\n    \"{0} is {1} {2}, also {0} is a {3} programming language\",\n    \"Rust\", \"cool\", \"language\", \"safe\"\n);\n\n// Named Arguments\nprintln!(\n    \"{country} is a diverse nation with unity.\",\n    country = \"India\"\n);\n\n// Placeholder traits :b for binary, :0x is for hex and :o is octal\nprintln!(\"Let us print 76 is binary which is {:b} , and hex equivalent is {:0x} and octal equivalent is {:o}\", 76, 76, 76);\n\n// Debug Trait\nprintln!(\n    \"Print whatever we want to here using debug trait {:?}\",\n    (76, 'A', 90)\n);\n\n// New Format Strings in 1.58\nlet x = \"world\";\nprintln!(\"Hello {x}!\");\n</code></pre>"},{"location":"quick-ref/rust/getting-started/#printing-styles","title":"Printing Styles","text":"<pre><code>// Prints the output\nprint!(\"Hello World\\n\");\n\n// Appends a new line after printing\nprintln!(\"Appending a new line\");\n\n// Prints as an error\neprint!(\"This is an error\\n\");\n\n// Prints as an error with new line\neprintln!(\"This is an error with new line\");\n</code></pre>"},{"location":"quick-ref/rust/getting-started/#variables","title":"Variables","text":"<pre><code>// Initializing and declaring a variable\nlet some_variable = \"This_is_a_variable\";\n\n// Making a variable mutable\nlet mut mutable_variable = \"Mutable\";\n\n// Assigning multiple variables\nlet (name, age) = (\"ElementalX\", 20);\n\n// (Global) constant\nconst SCREAMING_SNAKE_CASE: i64 = 9;\n</code></pre>"},{"location":"quick-ref/rust/getting-started/#comments","title":"Comments","text":"<pre><code>// Line Comments\n/*.............Block Comments */\n/// Outer doc comments\n//! Inner doc comments\n</code></pre> <p>See: Comment</p>"},{"location":"quick-ref/rust/getting-started/#functions","title":"Functions","text":"<pre><code>fn test() {\n    println!(\"This is a function!\");\n}\n\nfn main() {\n    test();\n}\n</code></pre>"},{"location":"quick-ref/rust/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/rust/miscellaneous/#type-casting","title":"Type Casting","text":"<pre><code>let a_int = 90; // int\n// int to float\nlet mut type_cast = (a_int as f64);\n</code></pre> <pre><code>let original: char = 'I';\n// char to int =&gt; 73\nlet type_casted: i64 = original as i64;\n</code></pre> <p>To perform type-casting in Rust one must use the <code>as</code> keyword.</p>"},{"location":"quick-ref/rust/miscellaneous/#borrowing","title":"Borrowing","text":"<pre><code>let mut foo = 4;\nlet mut borrowed_foo = &amp;foo;\nprintln!(\"{borrowed_foo}\");\n</code></pre> <pre><code>let mut bar = 3;\nlet mut mutable_borrowed_bar = &amp;mut bar;\nprintln!(\"{mutable_borrowed_bar}\");\n</code></pre> <p>Here borrowed value borrows the value from value one using <code>&amp;</code> operator.</p>"},{"location":"quick-ref/rust/miscellaneous/#de-referencing","title":"De-referencing","text":"<pre><code>let mut borrow = 10;\nlet deref = &amp;mut borrow;\n\nprintln!(\"{}\", *deref);\n</code></pre> <p>De-referencing in rust can be done using the <code>*</code> operator</p>"},{"location":"quick-ref/rust/miscellaneous/#variable-scope","title":"Variable Scope","text":"<pre><code>{\n    // The scope limited to this braces\n    let a_number = 1;\n}\nprintln!(\"{a_number}\");\n</code></pre> <p>This will produce error as the scope of the variable <code>a_number</code> ends at the braces</p>"},{"location":"quick-ref/rust/operators/","title":"Operators","text":""},{"location":"quick-ref/rust/operators/#comparison-operators","title":"Comparison Operators","text":"<code>e == f</code> <code>e</code> is equal to <code>f</code> <code>e != f</code> <code>e</code> is NOT equal to <code>f</code> <code>e &lt; f</code> <code>e</code> is less than <code>f</code> <code>e &gt; f</code> <code>e</code> is greater <code>f</code> <code>e &lt;= f</code> <code>e</code> is less than or equal to <code>f</code> <code>e &gt;= f</code> <code>e</code> is greater or equal to <code>f</code> <pre><code>let (e, f) = (1, 100);\n\nlet greater = f &gt; e;        // =&gt; true\nlet less = f &lt; e;           // =&gt; false\nlet greater_equal = f &gt;= e; // =&gt; true\nlet less_equal = e &lt;= f;    // =&gt; true\nlet equal_to = e == f;      // =&gt; false\nlet not_equal_to = e != f;  // =&gt; true\n</code></pre>"},{"location":"quick-ref/rust/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<code>a +  b</code> <code>a</code> is added to <code>b</code> <code>a -  b</code> <code>b</code> is subtracted from <code>a</code> <code>a /  b</code> <code>a</code> is divided by <code>b</code> <code>a % b</code> Gets remainder of <code>a</code> by dividing with <code>b</code> <code>a * b</code> <code>a</code> is multiplied with <code>b</code> <pre><code>let (a, b) = (4, 5);\n\nlet sum: i32 = a + b;            // =&gt; 9\nlet subtractions: i32 = a - b;   // =&gt; -1\nlet multiplication: i32 = a * b; // =&gt; 20\nlet division: i32 = a / b;       // =&gt; 0\nlet modulus: i32 = a % b;        // =&gt; 4\n</code></pre>"},{"location":"quick-ref/rust/operators/#bitwise-operators","title":"Bitwise Operators","text":"Operator Description <code>g &amp; h</code> Binary AND <code>g | h</code> Binary OR <code>g ^ h</code> Binary XOR <code>!g</code> Binary one's complement <code>g &lt;&lt; h</code> Binary shift left <code>g &gt;&gt; h</code> Binary shift right <pre><code>let (g, h) = (0x1, 0x2);\n\nlet bitwise_and = g &amp; h;  // =&gt; 0\nlet bitwise_or = g | h;   // =&gt; 3\nlet bitwise_xor = g ^ h;  // =&gt; 3\nlet right_shift = g &gt;&gt; 2; // =&gt; 0\nlet left_shift = h &lt;&lt; 4;  // =&gt; 32\n</code></pre>"},{"location":"quick-ref/rust/operators/#logical-operators","title":"Logical Operators","text":"Example Meaning <code>c &amp;&amp; d</code> Both are true (AND) <code>c || d</code> Either is true (OR) <code>!c</code> <code>c</code> is false (NOT) <pre><code>let (c, d) = (true, false);\n\nlet and = c &amp;&amp; d;  // =&gt; false\nlet or = c || d;   // =&gt; true\nlet not = !c;      // =&gt; false\n</code></pre>"},{"location":"quick-ref/rust/operators/#compound-assignment-operator","title":"Compound Assignment Operator","text":"<pre><code>let mut k = 9;\nlet mut l = k;\n</code></pre> Operator Description <code>k += l</code> Add a value and assign, then k=9 <code>k -= l</code> Substrate a value and assign, then k=18 <code>k /= l</code> Divide a value and assign, then k=9 <code>k *= l</code> Multiply a value and assign, then k=81 <code>k |= l</code> Bitwise OR and assign, then k=89"},{"location":"quick-ref/rust/strings/","title":"Strings","text":""},{"location":"quick-ref/rust/strings/#string-literal","title":"String Literal","text":"<pre><code>let cs: &amp;str = \"cheat sheet\";\n\n// =&gt; Share cheat sheet for developers\nprintln!(\"Share {cs} for developers\");\n</code></pre>"},{"location":"quick-ref/rust/strings/#string-object","title":"String Object","text":"<pre><code>// Creating an empty string object\nlet my_string = String::new();\n\n// Converting to a string object\nlet S_string = a_string.to_string()\n\n// Creating an initialized string object\nlet lang = String::from(\"Rust\");\nprintln!(\"First language is {lang}\");\n</code></pre>"},{"location":"quick-ref/rust/strings/#capacity","title":".capacity()","text":"<pre><code>let rand = String::from(\"Random String\");\nrand.capacity() // =&gt; 13\n</code></pre> <p>Calculates the capacity of the string in bytes.</p>"},{"location":"quick-ref/rust/strings/#contains","title":".contains()","text":"<pre><code>let name = String::from(\"ElementalX\");\nname.contains(\"Element\") // =&gt; true\n</code></pre> <p>Checks if the substring is contained inside the original string or not.</p>"},{"location":"quick-ref/rust/strings/#pushing-a-single-character","title":"Pushing a single character","text":"<pre><code>let mut half_text = String::from(\"Hal\");\nhalf_text.push('f'); // =&gt; Half\n</code></pre>"},{"location":"quick-ref/rust/strings/#pushing-an-entire-string","title":"Pushing an entire String","text":"<pre><code>let mut hi = String::from(\"Hey there...\");\nhi.push_str(\"How are you doing??\");\n\n// =&gt; Hey there...How are you doing??\nprintln!(\"{hi}\");\n</code></pre>"},{"location":"quick-ref/rust/types/","title":"Types","text":""},{"location":"quick-ref/rust/types/#integer","title":"Integer","text":"<pre><code>let mut a: u32 = 8;\nlet b: u64 = 877;\nlet c: i64 = 8999;\nlet d = -90;\n</code></pre>"},{"location":"quick-ref/rust/types/#floating-point","title":"Floating-Point","text":"<pre><code>let mut sixty_bit_float: f64 = 89.90;\nlet thirty_two_bit_float: f32 = 7.90;\nlet just_a_float = 69.69;\n</code></pre>"},{"location":"quick-ref/rust/types/#boolean","title":"Boolean","text":"<pre><code>let true_val: bool = true;\nlet false_val: bool = false;\nlet just_a_bool = true;\nlet is_true = 8 &lt; 5; // =&gt; false\n</code></pre>"},{"location":"quick-ref/rust/types/#character","title":"Character","text":"<pre><code>let first_letter_of_alphabet = 'a';\nlet explicit_char: char = 'F';\nlet implicit_char = '8';\nlet emoji = \"\\u{1f600}\"; // =&gt; \ud83d\ude00\n</code></pre>"},{"location":"quick-ref/rust/types/#string-literal","title":"String Literal","text":"<pre><code>let community_name = \"AXIAL\";\nlet no_of_members: &amp;str = \"ten\";\n\nprintln!(\"The name of the community is {community_name} and it has {no_of_members} members\");\n</code></pre>"},{"location":"quick-ref/rust/types/#arrays","title":"Arrays","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n| 92  | 97  | 98  | 99  | 98  | 94  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n   0     1     2     3     4     5\n</code></pre> <pre><code>let array: [i64; 6] = [92, 97, 98, 99, 98, 94];\n</code></pre>"},{"location":"quick-ref/rust/types/#multi-dimensional-array","title":"Multi-Dimensional Array","text":"<pre><code>     j0   j1   j2   j3   j4   j5\n   \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   \u251c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>let array: [[i64; 6]; 2] = [\n    [1, 2, 3, 4, 5, 6],\n    [6, 5, 4, 3, 2, 1]\n];\n</code></pre>"},{"location":"quick-ref/rust/types/#mutable-array","title":"Mutable Array","text":"<pre><code>let mut array: [i32; 3] = [2, 6, 10];\n\narray[1] = 4;\narray[2] = 6;\n</code></pre> <p>Use the <code>mut</code> keyword to make it mutable.</p>"},{"location":"quick-ref/rust/types/#slices","title":"Slices","text":"<pre><code>let mut array: [i64; 4] = [1, 2, 3, 4];\nlet mut slices: &amp;[i64] = &amp;array[0..3]; // Lower range is inclusive and upper range is exclusive\n\nprintln!(\"The elements of the slices are : {slices:?}\");\n</code></pre>"},{"location":"quick-ref/rust/types/#vectors","title":"Vectors","text":"<pre><code>let some_vector = vec![1, 2, 3, 4, 5];\n</code></pre> <p>A vector is declared using the <code>vec!</code> macro.</p>"},{"location":"quick-ref/rust/types/#tuples","title":"Tuples","text":"<pre><code>let tuple = (1, 'A', \"Cool\", 78, true);\n</code></pre>"},{"location":"quick-ref/swift/","title":"Swift","text":"<p>Abstract</p> <p>This cheat sheet provides examples of using Swift that cover basic Swift knowledge, control flow etc.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Variables</li> <li>Conditions</li> <li>Cycle</li> <li>Arrays and Collections</li> <li>Dictionary</li> <li>Function</li> <li>Structure</li> <li>Class</li> <li>Enumerate</li> <li>Extensions</li> <li>Generics</li> <li>Also See</li> </ul>","tags":["Apple","iOS","iPadOS"]},{"location":"quick-ref/swift/also-see/","title":"Also See","text":"<ul> <li>Swift Documentation (Official) (swift.or)</li> <li>Swift Programming Language (Official) (swift.or)</li> <li>One-Stop Quick Reference for Swift Developers (swiftly.dev)</li> </ul>"},{"location":"quick-ref/swift/arrays-and-collections/","title":"Arrays and collections","text":""},{"location":"quick-ref/swift/arrays-and-collections/#array","title":"Array","text":"<pre><code>var scores = [Int]()\n// array is empty: []\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#count-property","title":"<code>.count</code> Property","text":"<pre><code>var grocery = [\"\ud83e\udd53\", \"\ud83e\udd5e\", \"\ud83c\udf6a\", \"\ud83e\udd5b\", \"\ud83c\udf4a\"]\nprint(grocery.count)\n// print: 5\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#index","title":"Index","text":"<p>The index refers to the item's position in the ordered list, and a single element is retrieved from the array using the subscript syntax <code>array[index]</code>.</p> <pre><code>var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nprint(vowels[0]) // prints: a\nprint(vowels[1]) // prints: e\nprint(vowels[2]) // print: i\nprint(vowels[3]) // prints: o\nprint(vowels[4]) // prints: u\n</code></pre> <p>Note: Swift arrays are zero-indexed, meaning the first element has index 0.</p>"},{"location":"quick-ref/swift/arrays-and-collections/#initialize-with-array-literal","title":"Initialize With Array Literal","text":"<pre><code>// use type inference:\nvar snowfall = [2.4, 3.6, 3.4, 1.8, 0.0]\n// explicit type:\nvar temp: [Int] = [33, 31, 30, 38, 44]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#initialize-with-default-value","title":"Initialize With Default Value","text":"<pre><code>var teams = [Int](repeating: 0, count: 3)\nprint(teams) // prints: [0, 0, 0]\n// or with Array type\nvar sizes = Array&lt;Int&gt;(repeating: 0, count: 3)\nprint(sizes) // prints: [0, 0, 0]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#append-method-and-operator","title":"<code>.append()</code> Method and <code>+=</code> Operator","text":"<pre><code>var gymBadges = [\"Boulder\", \"Cascade\"]\ngymBadges.append(\"Thunder\")\ngymBadges += [\"Rainbow\", \"Soul\"]\n// [\"Boulder\", \"Cascade\", \"Thunder\",\n// \"Rainbow\", \"Soul\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#insert-and-remove-methods","title":"<code>.insert()</code> and <code>.remove()</code> Methods","text":"<pre><code>var moon = [\"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\nmoon.insert(\"\ud83c\udf15\", at: 0)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\n\nmoon.remove(at: 4)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#iterate-over-an-array","title":"Iterate Over an Array","text":"<pre><code>var employees = [\"Peter\", \"Denial\", \"Jame\"]\nfor person in employees {\n  print(person)\n}\n// print: Peter\n// print: Denial\n// print: Jam\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#collection-set","title":"Collection (Set)","text":"<pre><code>var paintingsInMOMA: Set = [\n  \"The Dream\",\n  \"The Starry Night\",\n  \"The False Mirror\"\n]\n</code></pre> <p>We can use a collection (<code>Set</code>) to store <code>unique</code> elements of the same data type</p>"},{"location":"quick-ref/swift/arrays-and-collections/#empty-collection-set","title":"Empty Collection (Set)","text":"<pre><code>var team = Set&lt;String&gt;()\n\nprint(team)\n// print: []\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#populate-the-collection","title":"Populate the Collection","text":"<pre><code>var vowels: Set = [\"a\", \"e\", \"i\", \"o\",\"u\"]\n</code></pre> <p>To create a set filled with values, use the <code>Set</code> keyword before the assignment operator.</p>"},{"location":"quick-ref/swift/arrays-and-collections/#insert","title":"<code>.insert()</code>","text":"<pre><code>var cookieJar: Set = [\n  \"Chocolate Chip\",\n  \"Oatmeal Raisin\"\n]\n// add a new element\ncookieJar.insert(\"Peanut Butter Chip\")\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#remove-and-removeall-methods","title":"<code>.remove()</code> and <code>.removeAll()</code> Methods","text":"<pre><code>var oddNumbers: Set = [1, 2, 3, 5]\n\n// remove existing element\noddNumbers.remove(2)\n// remove all elements\noddNumbers.removeAll()\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#contains","title":"<code>contains()</code>","text":"<pre><code>var names: Set = [\"Rosa\", \"Doug\", \"Waldo\"]\nprint(names.contains(\"Lola\")) // print: false\n\nif names.contains(\"Waldo\"){\n  print(\"There's Waldo!\")\n} else {\n  print(\"Where's Waldo?\")\n}\n// print: There's Waldo!\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#isempty-property","title":"<code>.isEmpty</code> Property","text":"<pre><code>var emptyList = [String]()\nprint(emptyList.isEmpty)     // print: true\n\nvar populatedList: [Int] = [1, 2, 3]\nprint(populatedList.isEmpty) // print: false\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#iterate-over-a-collection","title":"Iterate Over a Collection","text":"<pre><code>var recipe: Set = [\"Egg\", \"Flour\", \"Sugar\"]\n\nfor ingredient in recipe {\n  print (\"Include \\(ingredient) in the recipe\")\n}\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#isempty-property_1","title":"<code>.isEmpty</code> Property","text":"<pre><code>var emptySet = Set&lt;String&gt;()\nprint(emptySet.isEmpty)     // print: true\n\nvar populatedSet: Set = [1, 2, 3]\nprint(populatedSet.isEmpty) // print: false\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#count-property_1","title":"<code>.count</code> Property","text":"<pre><code>var band: Set = [\"Peter\", \"Denial\", \"Jame\"]\n\nprint(\"The band has \\(band.count) players.\")\n// print: Band has 4 players.\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#intersection-intersection","title":"<code>.intersection()</code> Intersection","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.intersection(setB)\nprint(setC) // print: [\"D\", \"C\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#union","title":"<code>.union()</code>","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.union(setB)\nprint(setC)\n// print: [\"B\", \"A\", \"D\", \"F\", \"C\", \"E\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#symmetricdifference-symmetric-difference","title":"<code>.symmetricDifference()</code> Symmetric Difference","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.symmetricDifference(setB)\nprint(setC)\n// print: [\"B\", \"E\", \"F\", \"A\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#subtracting-subtraction","title":"<code>.subtracting()</code> Subtraction","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\"]\n\nvar setC = setA.subtracting(setB)\nprint(setC)\n// print: [\"B\", \"A\"]\n</code></pre>"},{"location":"quick-ref/swift/class/","title":"Class","text":""},{"location":"quick-ref/swift/class/#reference-type-class","title":"reference type (class)","text":"<pre><code>class Player {\n  var name: String\n\n  init(name: String) {\n    self.name = name\n  }\n}\n\nvar player1 = Player(name: \"Tomoko\")\nvar player2 = player1\nplayer2.name = \"Isabella\"\n\nprint(player1.name) // Isabella\nprint(player2.name) // Isabella\n</code></pre>"},{"location":"quick-ref/swift/class/#instance-of-the-class","title":"instance of the class","text":"<pre><code>class Person {\n  var name = \"\"\n  var age = 0\n}\n\nvar sonny = Person()\n// sonny is now an instance of Person\n</code></pre>"},{"location":"quick-ref/swift/class/#init-method","title":"init() method","text":"<pre><code>class Fruit {\n  var hasSeeds = true\n  var color: String\n\n  init(color: String) {\n    self.color = color\n  }\n}\n</code></pre> <p>Using the Fruit class</p> <pre><code>let apple = Fruit(color: \"red\")\n</code></pre> <p>A class can be initialized using the <code>init()</code> method and the corresponding initialization properties. In the <code>init()</code> method, the <code>self</code> keyword is used to refer to the actual instance of the class assigning property values</p>"},{"location":"quick-ref/swift/class/#class-attributes","title":"Class Attributes","text":"<pre><code>var ferris = Student()\n\nferris.name = \"Ferris Bueller\"\nferris.year = 12\nferris.gpa = 3.81\nferris.honors = false\n</code></pre>"},{"location":"quick-ref/swift/class/#inherit","title":"Inherit","text":"<p>Suppose we have a BankAccount class:</p> <pre><code>class BankAccount {\n  var balance = 0.0\n  func deposit(amount: Double) {\n    balance += amount\n  }\n  func withdraw(amount: Double) {\n    balance -= amount\n  }\n}\n</code></pre> <p><code>SavingsAccount</code> extends <code>BankAccount</code> class</p> <pre><code>class SavingsAccount: BankAccount {\n  var interest = 0.0\n\n  func addInterest() {\n    let interest = balance *0.005\n    self.deposit(amount: interest)\n  }\n}\n</code></pre> <p>The new <code>SavingsAccount</code> class (subclass) automatically gets all the characteristics of the <code>BankAccount</code> class (superclass). Additionally, the <code>SavingsAccount</code> class defines an <code>.interest</code> property and an <code>.addInterest()</code> method.</p>"},{"location":"quick-ref/swift/class/#example","title":"Example","text":"<p>use data type</p> <pre><code>class Student {\n  var name: String\n  var year: Int\n  var gpa: Double\n  var honors: Bool\n}\n</code></pre> <p>Use default property values</p> <pre><code>class Student {\n  var name = \"\"\n  var gpa = 0.0\n  var honors = false\n}\n</code></pre>"},{"location":"quick-ref/swift/class/#this-is-an-example-of-a-struct-definition-and-a-class-definition","title":"This is an example of a struct definition and a class definition","text":"<pre><code>struct Resolution {\n  var width = 0\n  var height = 0\n}\nclass VideoMode {\n  var resolution = Resolution()\n  var interlaced = false\n  var frameRate = 0.0\n  var name: String?\n}\n</code></pre> <p>The <code>Resolution</code> structure definition and the <code>VideoMode</code> class definition only describe the appearance of <code>Resolution</code> or <code>VideoMode</code>, create an instance of the structure or class:</p> <pre><code>let resolution = Resolution(width: 1920)\nlet someVideoMode = VideoMode()\n</code></pre>"},{"location":"quick-ref/swift/conditions/","title":"Conditions","text":""},{"location":"quick-ref/swift/conditions/#if-statement","title":"<code>if</code> statement","text":"<pre><code>var halloween = true\nif halloween {\n  print(\"Trick or treat!\")\n}\n// print: Trick or treat!\nif 5 &gt; 3 {\n  print(\"5 is greater than 3\")\n} else {\n  print(\"5 is not more than 3\")\n}\n// output: \"5 is greater than 3\"\n</code></pre>"},{"location":"quick-ref/swift/conditions/#else-statement","title":"<code>else</code> statement","text":"<pre><code>var turbulence = false\n\nif turbulence {\n  print(\"Please sit down.\")\n} else {\n  print(\"You are free to move around.\")\n}\n// print: You are free to move around.\n</code></pre>"},{"location":"quick-ref/swift/conditions/#else-if-statement","title":"<code>else if</code> statement","text":"<pre><code>var weather = \"rainy\"\nif weather == \"sunny\" {\n  print(\"Get some sunscreen\")\n} else if weather == \"rainy\" {\n  print(\"Take an umbrella\")\n} else if weather == \"snowing\" {\n  print(\"Put on your snow boots\")\n} else {\n  print(\"Invalid weather\")\n}\n// print: take an umbrella\n</code></pre>"},{"location":"quick-ref/swift/conditions/#comparison-operators","title":"Comparison Operators","text":"<pre><code>5 &gt; 1      // true\n6 &lt; 10     // true\n2 &gt;= 3     // false\n3 &lt;= 5     // true\n\"A\" == \"a\" // false\n\"B\" != \"b\" // true\n</code></pre> <p>-<code>&lt;</code> less than  -<code>&gt;</code> greater than  -<code>&lt;=</code> less than or equal to  -<code>&gt;=</code> greater than or equal to  -<code>==</code> is equal to  -<code>!=</code> is not equal to</p>"},{"location":"quick-ref/swift/conditions/#range-operators","title":"Range Operators","text":"<pre><code>a...b      // numbers between a and b (including both a and b)\na..&lt;b      // numbers between a and b (including a but excluding b)\n...b      // numbers till b (including b)\n</code></pre> <p>-<code>a...b</code> Closed Range  -<code>a..&lt;b</code> Half-Open Range  -<code>...b</code> One-Sided Range</p>"},{"location":"quick-ref/swift/conditions/#ternary-conditional-operator","title":"Ternary Conditional Operator","text":"<pre><code>var driverLicense = true\n\ndriverLicense\n    ? print(\"driver seat\") : print(\"passenger seat\")\n// print: driver's seat\n</code></pre>"},{"location":"quick-ref/swift/conditions/#switch-statement","title":"<code>switch</code> statement","text":"<pre><code>var secondaryColor = \"green\"\n\nswitch secondaryColor {\n  case \"orange\":\n    print(\"A mixture of red and yellow\")\n  case \"purple\":\n    print(\"A mix of red and blue\")\n  default:\n    print(\"This may not be a secondary color\")\n}\n// print: mix of blue and yellow\n</code></pre>"},{"location":"quick-ref/swift/conditions/#interval-matching","title":"Interval Matching","text":"<pre><code>let year = 1905\nvar artPeriod: String\n\nswitch year {\n  case 1860...1885:\n    artPeriod = \"Impressionism\"\n  case 1886...1910:\n    artPeriod = \"Post-Impressionism\"\n  default:\n    artPeriod = \"Unknown\"\n}\n// print: post-impressionism\n</code></pre>"},{"location":"quick-ref/swift/conditions/#composite-case","title":"Composite Case","text":"<pre><code>let service = \"Seamless\"\n\nswitch service {\ncase \"Uber\", \"Lyft\":\n    print(\"travel\")\n  case \"DoorDash\", \"Seamless\", \"GrubHub\":\n    print(\"Restaurant delivery\")\n  case \"Instacart\", \"FreshDirect\":\n    print(\"Grocery Delivery\")\n  default:\n    print(\"Unknown service\")\n}\n// print: restaurant takeaway\n</code></pre>"},{"location":"quick-ref/swift/conditions/#where-clause","title":"<code>where</code> Clause","text":"<pre><code>let num = 7\n\nswitch num {\n  case let x where x % 2 == 0:\n    print(\"\\(num) is even\")\n  case let x where x % 2 == 1:\n    print(\"\\(num) odd number\")\n  default:\n    print(\"\\(num) is invalid\")\n}\n\n// print: 7 odd\n</code></pre>"},{"location":"quick-ref/swift/conditions/#logical-operators","title":"Logical Operators","text":"<pre><code>!true  // false\n!false //true\n</code></pre>"},{"location":"quick-ref/swift/conditions/#operators","title":"Operators &amp;&amp;","text":"<pre><code>true &amp;&amp; true   // true\ntrue &amp;&amp; false  // false\nfalse &amp;&amp; true  // false\nfalse &amp;&amp; false // false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#operators_1","title":"operators ||","text":"<pre><code>true || true   // true\ntrue || false  // true\nfalse || true  // true\nfalse || false // false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#combined-logical-operators","title":"Combined Logical Operators","text":"<pre><code>!false &amp;&amp; true || false // true\n</code></pre> <p><code>!false &amp;&amp; true</code> first evaluates and returns <code>true</code> Then, the expression, <code>true</code> || <code>false</code> evaluates and returns the final result <code>true</code></p> <pre><code>false || true &amp;&amp; false // false\n</code></pre> <p><code>true &amp;&amp; false</code> first evaluates to return <code>false</code> Then, the expression, <code>false</code> || <code>false</code> evaluates and returns the final result <code>false</code></p>"},{"location":"quick-ref/swift/conditions/#control-the-order-of-execution","title":"Control the order of execution","text":"<pre><code>// without parentheses:\ntrue || true &amp;&amp; false || false\n//----&gt; true\n\n// with brackets:\n(true || true) &amp;&amp; (false || false)\n//----&gt; false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#simple-guards","title":"Simple guards","text":"<pre><code>func greet(name: String?) {\n  guard let unwrapped = name else {\n    print(\"Hello guest!\")\n    return\n  }\n  print(\"Hello \\(unwrapped)!\")\n}\ngreet(name: \"Asma\") // output: Hello Asma!\ngreet(name: nil)    // output: Hello guest!\n</code></pre>"},{"location":"quick-ref/swift/cycle/","title":"Cycle","text":""},{"location":"quick-ref/swift/cycle/#scope","title":"Scope","text":"<pre><code>let zeroToThree = 0...3\n//zeroToThree: 0, 1, 2, 3\n</code></pre>"},{"location":"quick-ref/swift/cycle/#stride-function","title":"Stride() Function","text":"<pre><code>for oddNum in stride(from: 1, to: 5, by: 2) {\n  print(oddNum)\n}\n// print: 1\n// print: 3\n</code></pre>"},{"location":"quick-ref/swift/cycle/#for-in-loop","title":"For-in Loop","text":"<pre><code>for char in \"hehe\" {\n  print(char)\n}\n// print: h\n// print: e\n// print: h\n// print: e\n</code></pre>"},{"location":"quick-ref/swift/cycle/#continue-keyword","title":"Continue keyword","text":"<pre><code>for num in 0...5 {\n  if num % 2 == 0 {\n    continue\n  }\n  print(num)\n}\n// print: 1\n// print: 3\n// print: 5\n</code></pre> <p>The <code>continue</code> keyword will force the loop to continue for the next iteration</p>"},{"location":"quick-ref/swift/cycle/#break-keyword","title":"Break Keyword","text":"<pre><code>for char in \"supercalifragilistic\" {\nif char == \"c\" {\n    break\n  }\n  print(char)\n}\n// print: s\n// print: u\n// print: p\n// print: e\n// print: r\n</code></pre>"},{"location":"quick-ref/swift/cycle/#use-underscores","title":"Use Underscores","text":"<pre><code>for _ in 1...3 {\n  print(\"Ole\")\n}\n// print: Ole\n// print: Ole\n// print: Ole\n</code></pre>"},{"location":"quick-ref/swift/cycle/#while-loop","title":"While Loop","text":"<pre><code>var counter = 1\nvar stopNum = Int.random(in: 1...10)\n\nwhile counter &lt; stopNum {\n  print(counter)\n  counter += 1\n}\n// loop to print until the stop condition is met\n</code></pre> <p>A <code>while</code> loop accepts a condition and keeps executing its body code while the provided condition is <code>true</code>. If the condition is never false, the loop will keep running and the program will get stuck in an <code>infinite loop</code></p>"},{"location":"quick-ref/swift/dictionary/","title":"Dictionary","text":""},{"location":"quick-ref/swift/dictionary/#base-dictionary","title":"Base Dictionary","text":"<pre><code>var dictionaryName = [\n  \"Key1\": \"Value1\",\n  \"Key2\": \"Value2\",\n  \"Key3\": \"Value3\"\n]\n</code></pre> <p>An <code>unordered</code> collection of pairs of data or key-value pairs</p>"},{"location":"quick-ref/swift/dictionary/#keys","title":"Keys","text":"<pre><code>var fruitStand = [\n  \"Coconuts\": 12,\n  \"Pineapples\": 12,\n  \"Papaya\": 12\n]\n</code></pre> <p>Each <code>key</code> is <code>unique</code> even if they all contain the same <code>value</code></p>"},{"location":"quick-ref/swift/dictionary/#type-consistency","title":"Type Consistency","text":"<pre><code>var numberOfSides = [\n  \"triangle\": 3,\n  \"square\": 4,\n  \"rectangle\": 4\n]\n</code></pre> <p>Contains only <code>String</code> keys and <code>Int</code> values</p>"},{"location":"quick-ref/swift/dictionary/#initialize-and-populate-the-dictionary","title":"Initialize and populate the dictionary","text":"<pre><code>var employeeID = [\n  \"Hamlet\": 1367,\n  \"Horatio\": 8261,\n  \"Ophelia\": 9318\n]\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#initialize-an-empty-dictionary","title":"Initialize an empty dictionary","text":"<pre><code>// initializer syntax:\nvar yearlyFishPopulation = [Int: Int]()\n\n// Empty dictionary literal syntax:\nvar yearlyBirdPopulation: [Int: Int] = [:]\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#add-to-dictionary","title":"add to dictionary","text":"<pre><code>var pronunciation = [\n  \"library\": \"lai\u00b7breh\u00b7ree\",\n  \"apple\": \"a\u00b7pl\"\n]\n// new key: \"programming\", new value: \"prow gra\"\npronunciation[\"programming\"] = \"prow\u00b7gra\"\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#delete-key-value-pair","title":"Delete key-value pair","text":"<pre><code>var bookShelf = [\n  \"Goodnight\": \"Margaret Wise Brown\",\n  \"The BFG\": \"Roald Dahl\",\n  \"Falling Up\": \"Shel Silverstein\",\n  \"No, David!\": \"David Shannon\"\n]\n// remove value by setting key to nil\nbookShelf[\"The BFG\"] = nil\n\n// remove value using .removeValue()\nbookShelf.removeValue(forKey: \"Goodnight\")\n\n// remove all values\nbookShelf.removeAll()\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#modify-the-key-value-pair","title":"Modify the key-value pair","text":"<pre><code>var change = [\n  \"Quarter\": 0.29,\n  \"Dime\": 0.15,\n  \"Nickel\": 0.05\n]\n\n// Change the value using subscript syntax\nchange[\"Quarter\"] = .25\n\n// Change the value using .updateValue()\nchange.updateValue(.10, forKey: \"Dime\")\n</code></pre> <p>To change the value of a key-value pair, use the <code>.updateValue()</code> method or the subscript syntax by appending brackets <code>[ ]</code> with the existing keys within to the name of the dictionary, then adding the assignment operator (<code>=</code>) followed by the modified value</p>"},{"location":"quick-ref/swift/dictionary/#isempty-property","title":".isEmpty property","text":"<pre><code>var bakery = [String:Int]()\n\n// check if the dictionary is empty\nprint(bakery.isEmpty) // prints true\nbakery[\"Cupcakes\"] = 12\n// check if the dictionary is empty\nprint(bakery.isEmpty) // print false\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#count-property","title":".count property","text":"<pre><code>var fruitStand = [\n  \"Apples\": 12,\n  \"Oranges\", 17\n]\nprint(fruitStand.count) // print: 2\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#assigning-values-to-variables","title":"Assigning values to variables","text":"<pre><code>var hex = [\n  \"red\": \"#ff0000\",\n  \"yellow\": \"#ffff00\",\n  \"blue\": \"#0000ff\",\n]\n\nprint(\"Blue hexadecimal code \\(hex[\"blue\"])\")\n// print: blue hex code Optional(\"#0000ff\")\n\nif let redHex = hex[\"red\"] {\n  print(\"red hexadecimal code \\(redHex)\")\n}\n// print: red hex code #ff0000\n</code></pre> <p>Assigning the value of a key-value pair to a variable will return an optional value. To extract values, use the optional expansion</p>"},{"location":"quick-ref/swift/dictionary/#traversing-the-dictionary","title":"Traversing the dictionary","text":"<pre><code>var emojiMeaning = [\n  \"\ud83e\udd14\": \"Thinking Face\",\n  \"\ud83d\ude2a\": \"Sleepy Face\",\n  \"\ud83d\ude35\": \"Dizzy Face\"\n]\n// loop through keys and values\nfor (emoji, meaning) in emojiMeaning {\n  print(\"\\(emoji) is called '\\(meaning)Emoji'\")\n}\n// iterate through keys only\nfor emoji in emojiMeaning.keys {\n  print(emoji)\n}\n// iterate through values only\nfor meaning in emojiMeaning.values {\n  print(meaning)\n}\n</code></pre>"},{"location":"quick-ref/swift/enumerate/","title":"Enumerate","text":""},{"location":"quick-ref/swift/enumerate/#define-the-enumeration","title":"Define the enumeration","text":"<pre><code>enum Day {\n  case monday\n  case tuesday\n  case wednesday\n  case thursday\n  case friday\n  case saturday\n  case sunday\n}\n\nlet casualWorkday: Day = .friday\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#switch-statement","title":"Switch statement","text":"<pre><code>enum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet customerOrder: Dessert = .cake(flavor: \"Red Velvet\")\nswitch customerOrder {\n  case let .cake(flavor):\n    print(\"You ordered a \\(flavor) cake\")\n  case .brownie:\n    print(\"You ordered a chocolate cake\")\n}\n// prints: \"You ordered a red velvet cake\"\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#caseiterable","title":"CaseIterable","text":"<pre><code>enum Season: CaseIterable {\n  case winter\n  case spring\n  case summer\n  case falls\n}\n\nfor season in Season.allCases {\n  print(season)\n}\n</code></pre> <p>Add conformance to the <code>CaseIterable</code> protocol to access the <code>allCases</code> property, which returns an array of all cases of the enumeration</p>"},{"location":"quick-ref/swift/enumerate/#original-value","title":"Original value","text":"<pre><code>enum Beatle: String {\n  case john paul george ringo\n}\n\nprint(\"The Beatles are \\(Beatle.john.rawValue).\")\n// print: The Beatles are john.\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#related-values","title":"Related values","text":"<pre><code>enum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet order: Dessert = .cake(flavor: \"Red Velvet\")\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#instance-method","title":"instance method","text":"<pre><code>enum Traffic {\n  case light\n  case heavy\n\n  mutating func reportAccident() {\n    self = .heavy\n  }\n}\n\nvar currentTraffic: Traffic = .light\n\ncurrentTraffic.reportAccident()\n// currentTraffic is now .heavy\n</code></pre> <p>Just like classes and structs, enumerations can have instance methods. If an instance method mutates the value of the enum, it needs to be marked <code>mutating</code></p>"},{"location":"quick-ref/swift/enumerate/#initialize-from-primitive-value","title":"Initialize from primitive value","text":"<pre><code>enum Hello: String {\n  case english = \"Hello\"\n  case japanese = \"Hello!\"\n  case emoji = \"\ud83d\udc4b\"\n}\nlet hello1 = Hello(rawValue: \"Hello!\")\nlet hello2 = Hello(rawValue: \"\u041f\u0440\u0438\u0432\u0435\u0442\")\nprint(hello1) // Optional(Hello.japanese)\nprint(hello2) // nil\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#computed-properties","title":"Computed properties","text":"<pre><code>enum ShirtSize: String {\n  case small = \"S\"\n  case medium = \"M\"\n  case large = \"L\"\n  case extraLarge = \"XL\"\n  var description: String {\n    return \"The size of this shirt is \\(self.rawValue)\"\n  }\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/","title":"Extensions","text":""},{"location":"quick-ref/swift/extensions/#what-are-extensions","title":"What are extensions?","text":"<p>Extensions is a way to add new add new functionality to existing classes, structures, enumerations, or protocol types. This includes adding new methods, properties, initializers, and more.</p>"},{"location":"quick-ref/swift/extensions/#why-use-extensions","title":"Why use extensions?","text":"<p>Extensions are particularly useful for organizing and modularizing our code without needing to modify the original type, especially when we don't have access to the original source code.</p>"},{"location":"quick-ref/swift/extensions/#extension-syntax","title":"Extension syntax","text":"<pre><code>extension SomeType {\n    // New functionalities to be added\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/#computed-properties","title":"Computed properties","text":"<pre><code>extension Int {\n    var isEven: Bool {\n        self % 2 == 0\n    }\n}\n\nprint(4.isEven) // Outputs: true\nprint(7.isEven) // Outputs: false\n</code></pre>"},{"location":"quick-ref/swift/extensions/#methods","title":"Methods","text":"<pre><code>extension String {\n    func reverse() -&gt; String {\n        String(self.reversed())\n    }\n}\n\nprint(\"abc\".reverse()) // Output: cba\n</code></pre>"},{"location":"quick-ref/swift/extensions/#mutating-methods","title":"Mutating methods","text":"<pre><code>extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\n\nvar number = 5\nnumber.square()\nprint(number) // Output: 25\n</code></pre>"},{"location":"quick-ref/swift/extensions/#initializers","title":"Initializers","text":"<pre><code>extension Date {\n    init?(timestamp: Double) {\n        self.init(timeIntervalSince1970: timestamp)\n    }\n}\n\nlet timestamp = 1693982400.0 // Unix timestamp for 2023-09-06 06:40:00\nif let date = Date(timestamp: timestamp) {\n    print(date) // Output: 2023-09-06 06:40:00 +0000\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/#subscripts","title":"Subscripts","text":"<pre><code>extension String {\n    subscript(index: Int) -&gt; Character {\n        self[self.index(startIndex, offsetBy: index)]\n    }\n}\n\nprint(\"Swift\"[0]) // Output: S\nprint(\"Swift\"[1]) // Output: w\nprint(\"Swift\"[2]) // Output: i\nprint(\"Swift\"[3]) // Output: f\nprint(\"Swift\"[4]) // Output: t\n</code></pre>"},{"location":"quick-ref/swift/extensions/#protocol-extensions","title":"Protocol extensions","text":"<p>It works pretty much like abstract classes when regarding a functionality we want to be available in all the classes that implements some protocol (without having to inherit from a base common class).</p> <pre><code>// Define a protocol\nprotocol Describable {\n    func describe() -&gt; String\n}\n\n// Provide a default implementation using a protocol extension\nextension Describable {\n    func describe() -&gt; String {\n        \"This is a generic description\"\n    }\n}\n\n// Define a struct that conforms Describable protocol\nstruct Person: Describable {\n    var name: String\n    var age: Int\n\n    // Overriding the default implementation\n    func describe() -&gt; String {\n        \"My name is \\(name) and I am \\(age) years old.\"\n    }\n}\n\nstruct Employee: Describable {\n    var name: String\n    var age: Int\n\n    // Using the default implementation\n}\n\n// By just implementing the protocol the describe() method is available\n\nlet person = Person(name: \"Ivan\", age: 21)\nlet employee = Employee(name: \"Saul\", age: 25)\n\nprint(person.describe()) // Output: My name is Ivan and I am 21 years old.\nprint(employee.describe()) // Output: This is a generic description\n</code></pre>"},{"location":"quick-ref/swift/extensions/#constraints-for-extensions","title":"Constraints for extensions","text":"<p>This is especially useful when we want to add functionality to a type that conforms to a specific protocol or has certain conditions.</p> <pre><code>extension Array where Element: Numeric {\n    func sum() -&gt; Element {\n        reduce(0, +)\n    }\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.sum()) // Output: 15\n\nlet doubles = [1.5, 2.5, 3.5]\nprint(doubles.sum()) // Output: 7.5\n\n// This will not work because String is not Numeric\n// let strings = [\"a\", \"b\", \"c\"]\n// print(strings.sum()) // Error: Cannot invoke 'sum' with an array of strings\n</code></pre>"},{"location":"quick-ref/swift/extensions/#organizing-code-with-extensions","title":"Organizing code with extensions","text":"<p>Extensions are not limited to adding functionality; they are also handy for code organization. We can group related methods, properties or views in separate extensions.</p> <pre><code>import SwiftUI\n\nstruct HomeView: View {\n    var body: some View {\n        ScrollView {\n            header\n            // Add other views\n        }\n    }\n}\n\nextension HomeView {\n    private var header: some View {\n        Text(\"Header ...\")\n    }\n}\n\n#Preview {\n    HomeView()\n}\n</code></pre>"},{"location":"quick-ref/swift/function/","title":"Function","text":""},{"location":"quick-ref/swift/function/#basic-functions","title":"Basic functions","text":"<pre><code>func washCar() -&gt; Void {\n  print(\"Soap\")\n  print(\"Scrub\")\n  print(\"Rinse\")\n  print(\"Dry\")\n}\n</code></pre>"},{"location":"quick-ref/swift/function/#call-functions","title":"Call functions","text":"<pre><code>func greetLearner() {\n print(\"Welcome to CheatSheets.zip!\")\n}\n// function call:\ngreetLearner()\n// print: Welcome to CheatSheets.zip!\n</code></pre>"},{"location":"quick-ref/swift/function/#return-value","title":"return value","text":"<pre><code>let birthYear = 1994\nvar currentYear = 2020\n\nfunc findAge() -&gt; Int {\n  return currentYear-birthYear\n}\n\nprint(findAge()) // prints: 26\n</code></pre>"},{"location":"quick-ref/swift/function/#multiple-parameters","title":"Multiple parameters","text":"<pre><code>func convertFracToDec(numerator: Double, denominator: Double) -&gt; Double {\n  return numerator / denominator\n}\n\nlet decimal = convertFracToDec(numerator: 1.0, denominator: 2.0)\nprint(decimal) // prints: 0.5\n</code></pre>"},{"location":"quick-ref/swift/function/#omit-parameter-labels","title":"Omit parameter labels","text":"<pre><code>func findDiff(_ a: Int, b: Int) -&gt; Int {\n  return a -b\n}\n\nprint(findDiff(6, b: 4)) // prints: 2\n</code></pre>"},{"location":"quick-ref/swift/function/#return-multiple-values","title":"return multiple values","text":"<pre><code>func smartphoneModel() -&gt; (name: String, version: String, yearReleased: Int) {\n  return (\"iPhone\", \"8 Plus\", 2017)\n}\nlet phone = smartphoneModel()\n\nprint(phone.name)         // print: iPhone\nprint(phone.version)      // print: 8 Plus\nprint(phone.yearReleased) // print: 2017\n</code></pre>"},{"location":"quick-ref/swift/function/#parameters-arguments","title":"Parameters &amp; Arguments","text":"<pre><code>func findSquarePerimet(side: Int) -&gt; Int {\n  return side *4\n}\n\nlet perimeter = findSquarePerimet(side: 5)\nprint(perimeter) // print: 20\n\n// Parameter: side\n// Argument: 5\n</code></pre>"},{"location":"quick-ref/swift/function/#implicit-return","title":"Implicit return","text":"<pre><code>func nextTotalSolarEclipse() -&gt; String {\n  \"April 8th, 2024 \ud83c\udf0e\"\n}\n\nprint(nextTotalSolarEclipse())\n// print: April 8th, 2024 \ud83c\udf0e\n</code></pre>"},{"location":"quick-ref/swift/function/#default-parameters","title":"Default parameters","text":"<pre><code>func greet(person: String = \"guest\") {\n  print(\"Hello \\(person)\")\n}\ngreet() // Hello guest\ngreet(person: \"Aliya\") // Hello Aliya\n</code></pre>"},{"location":"quick-ref/swift/function/#input-and-output-parameters","title":"Input and output parameters","text":"<pre><code>var currentSeason = \"Winter\"\n\nfunc season(month: Int, name: inout String) {\n  switch month {\n    case 1...2:\n      name = \"Winter \u26c4\ufe0f\"\n    case 3...6:\n      name = \"Spring \ud83c\udf31\"\n    case 7...9:\n      name = \"Summer \u26f1\"\n    case 10...11:\n      name = \"Autumn \ud83c\udf42\"\n    default:\n      name = \"Unknown\"\n  }\n}\nseason(month: 4, name: &amp;currentSeason)\n\nprint(currentSeason) // Spring \ud83c\udf31\n</code></pre>"},{"location":"quick-ref/swift/function/#variable-parameter","title":"variable parameter","text":"<pre><code>func totalStudent(data: String...) -&gt; Int {\n  let numStudents = data.count\n  return numStudents\n}\n\nprint(totalStudent(data: \"Denial\", \"Peter\"))\n// print: 2\n</code></pre>"},{"location":"quick-ref/swift/function/#optional-parameters","title":"Optional parameters","text":"<pre><code>func getFirstInitial(from name: String?) -&gt; String? {\n  return name?.first\n}\n</code></pre> <p>Functions can accept optional types and return optional types. When a function cannot return a reasonable instance of the requested type, it should return <code>nil</code></p>"},{"location":"quick-ref/swift/generics/","title":"Generics","text":""},{"location":"quick-ref/swift/generics/#what-are-generics","title":"What are generics?","text":"<p>Generics in Swift are a feature that allows us to create functions, classes, structures, and protocols that can work with any data type.</p>"},{"location":"quick-ref/swift/generics/#why-use-generics","title":"Why use generics?","text":"<p>Generics enable us to write clear and concise code that works with any data type. By using placeholders (like <code>T</code>), this reduces the risk of introducing bugs.</p>"},{"location":"quick-ref/swift/generics/#type-parameters","title":"Type parameters","text":"<pre><code>func foo&lt;T, U&gt;(a: T, b: U) {\n  // ...\n}\n\nstruct Foo&lt;T, U&gt; {\n  var a: T\n  // ...\n}\n</code></pre> <p>The placeholders <code>T</code> is an example of a type parameter, are written inside angle brackets(such as <code>&lt;T&gt;</code>).</p>"},{"location":"quick-ref/swift/generics/#generic-data-structures","title":"Generic Data Structures","text":"<pre><code>struct Box&lt;T&gt; {\n    var value: T\n}\nlet intBox = Box(value: 10)\nlet stringBox = Box(value: \"Hello\")\n\nprint(intBox.value) // Output: 10\nprint(stringBox.value) // Output: \"Hello\"\n</code></pre>"},{"location":"quick-ref/swift/generics/#generic-functions","title":"Generic Functions","text":"<pre><code>func swapValues&lt;T&gt;(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\nvar a = 10\nvar b = 20\nswapValues(&amp;a, &amp;b)\nprint(a) // Output: 20\nprint(b) // Output: 10\n\nvar c = \"Hello\"\nvar d = \"World\"\nswapValues(&amp;c, &amp;d)\nprint(c) // Output: \"World\"\nprint(d) // Output: \"Hello\"\n</code></pre>"},{"location":"quick-ref/swift/generics/#constraints-on-generics","title":"Constraints on Generics","text":"<pre><code>func sum&lt;T: Numeric&gt;(_ array: [T]) -&gt; T {\n    array.reduce(0, +)\n}\n\nprint(sum([1, 1.5, 2])) // Output: 4.5\n\n// This will not work because String is not Numeric\n// print(sum([\"a\", \"b\", \"c\"]))\n// Error: function 'sum' requires that 'String' conform to 'Numeric'\n</code></pre>"},{"location":"quick-ref/swift/generics/#associated-types","title":"Associated Types","text":"<pre><code>protocol Foo {\n    associatedtype T\n    func foo() -&gt; T\n}\n</code></pre> <p>Associated types are used in protocols to define a placeholder for a type that will be specified later. They act as a generic placeholder. The exact type isn't defined in the protocol itself; instead, it's determined when a class, struct, or enum conforms to the protocol.</p>"},{"location":"quick-ref/swift/generics/#generic-protocols","title":"Generic Protocols","text":"<pre><code>protocol Storage {\n    associatedtype Item\n    func store(item: Item)\n    func retrieve() -&gt; Item?\n}\n\nclass SimpleStorage&lt;T&gt;: Storage {\n    private var items: [T] = []\n\n    func store(item: T) {\n        items.append(item)\n    }\n\n    func retrieve() -&gt; T? {\n        return items.isEmpty ? nil : items.removeLast()\n    }\n}\n\nlet intStorage = SimpleStorage&lt;Int&gt;()\nintStorage.store(item: 42)\nprint(intStorage.retrieve() ?? \"Empty\")  // Output: 42\n</code></pre>"},{"location":"quick-ref/swift/generics/#generic-typealiases","title":"Generic Typealiases","text":"<p>Generic typealiases allow us to create a new name for an existing type (i.e., they would not introduce a new type).</p> <pre><code>typealias StringDictionary&lt;T&gt; = [String: T]\ntypealias IntFunction&lt;T&gt; = (Int) -&gt; Int\ntypealias Vector&lt;T&gt; = (T, T, T)\n</code></pre>"},{"location":"quick-ref/swift/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/swift/getting-started/#variable","title":"Variable","text":"<pre><code>var score = 0  // Variable\nlet pi = 3.14  // Constant\n\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// prints \"9\"\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#type-annotations","title":"Type Annotations","text":"<pre><code>var greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\nvar price: Double = 8.99\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> Add</li> <li><code>-</code> Subtraction</li> <li><code>*</code> Multiplication</li> <li><code>/</code> Division</li> <li><code>%</code> Remainder</li> </ul> <pre><code>var x = 0\nx = 4 + 2 // x is now 6\nx = 4 - 2 // x is now 2\nx = 4 * 2 // x is now 8\nx = 4 / 2 // x is now 2\nx = 4 % 2 // x is now 0\n</code></pre> <ul> <li><code>+=</code> Adds and assigns sums</li> <li><code>-=</code> subtract and assign the difference</li> <li><code>*=</code> Multiplication and assignment</li> <li><code>/=</code> Divide and assign quotient</li> <li><code>%=</code> Divide and assign remainder</li> </ul>"},{"location":"quick-ref/swift/getting-started/#compound-assignment-operators","title":"Compound Assignment Operators","text":"<pre><code>var numberOfDogs = 100\nnumberOfDogs += 1\nprint(\"There are \\(numberOfDogs) Dalmatians!\")\n\n// print: There are 101 Dalmatians!\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#string-interpolation","title":"String Interpolation","text":"<pre><code>var apples = 6\nprint(\"I have \\(apples) apples!\")\n\n// print: I have 6 apples!\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#multi-line-string","title":"Multi-line String","text":"<pre><code>let myLongString = \"\"\"\nSwift?\nThis is my favorite language!\nYeah!\n\"\"\"\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#code-comments","title":"Code Comments","text":"<pre><code>// This line represents a comment in Swift.\n\n/*\nThis is all commented out.\nNone will run!\n*/\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#form-a-tuple","title":"Form a Tuple","text":"<pre><code>let player = (\"Maya\", 5, 150)\n\nprint(player) // (\"Maya\", 5, 150)\nprint(\"\\(player.0): level \\(player.1), \\(player.2) pts\") // Maya: level 5, 150 pts\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#decompose-tuple","title":"Decompose Tuple","text":"<pre><code>let player = (name: \"Maya\", level: 5)\nlet (currentName, curLevel) = player\nprint(\"\\(currentName): level \\(curLevel)\")\n// print: Maya: level 5\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#special-comment-syntax","title":"Special Comment Syntax","text":""},{"location":"quick-ref/swift/getting-started/#mark","title":"MARK","text":"<pre><code>// MARK: -view settings\n</code></pre> <p><code>MARK</code> can be used to display comments in the column</p>"},{"location":"quick-ref/swift/getting-started/#todo","title":"TODO","text":"<pre><code>// TODO: update logic to accommodate data changes\n</code></pre> <p><code>TODO</code> is used to display reminders of things that need to be done</p>"},{"location":"quick-ref/swift/getting-started/#fixme","title":"FIXME","text":"<pre><code>// FIXME: Fix buggy behavior when making changes to existing entries\n</code></pre> <p><code>FIXME</code> is used to display reminders about things that need to be fixed</p>"},{"location":"quick-ref/swift/structure/","title":"Structure","text":""},{"location":"quick-ref/swift/structure/#structure-creation","title":"Structure Creation","text":"<pre><code>struct Building {\n  var address: String\n  var floors: Int\n  init(address: String, floors: Int) {\n    self.address = address\n    self.floors = floors\n  }\n}\n</code></pre> <p>Structs or structs are used to programmatically represent real-life objects in code. A structure is created using the <code>struct</code> keyword, followed by its name, followed by a body containing its properties and methods</p>"},{"location":"quick-ref/swift/structure/#default-property-values","title":"Default property values","text":"<pre><code>struct Car {\n  var numOfWheels = 4\n  var topSpeed = 80\n}\n\nvar reliantRobin = Car(numOfWheels: 3)\n\nprint(reliantRobin.numOfWheels) // prints: 3\nprint(reliantRobin.topSpeed)    // print: 80\n</code></pre>"},{"location":"quick-ref/swift/structure/#structural-instance-creation","title":"Structural instance creation","text":"<pre><code>struct Person {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\n// Person instance:\nvar morty = Person(name: \"Peter\", age: 14)\n</code></pre>"},{"location":"quick-ref/swift/structure/#init-method","title":"init() method","text":"<pre><code>struct TV {\n  var size: Int\n  var type: String\n\n  init(size: Int, type: String) {\n    self.size = size\n    self.type = type\n  }\n}\n</code></pre> <p>Using the <code>TV</code> class</p> <pre><code>var newTV = TV(size: 65, type: \"LED\")\n</code></pre>"},{"location":"quick-ref/swift/structure/#check-type","title":"Check type","text":"<pre><code>print(type(of: \"abc\")) // print: String\nprint(type(of: 123))   // print: 123\n</code></pre>"},{"location":"quick-ref/swift/structure/#mutation-method-mutating","title":"Mutation method (mutating)","text":"<pre><code>struct Menu {\n  var menuItems = [\"Fries\", \"Burgers\"]\n  mutating func addToMenu(dish: String) {\n    self.menuItems.append(dish)\n  }\n}\n</code></pre> <p>Using the <code>Menu</code> class</p> <pre><code>var dinerMenu = Menu()\ndinerMenu.addToMenu(dish: \"Toast\")\nprint(dinerMenu.menuItems)\n// prints: [\"Fries\", \"Burgers\", \"Toast\"]\n</code></pre>"},{"location":"quick-ref/swift/structure/#structural-methods","title":"Structural methods","text":"<pre><code>struct Dog {\n  func bark() {\n    print(\"Woof\")\n  }\n}\nlet fido = Dog()\nfido.bark() // prints: Woof\n</code></pre>"},{"location":"quick-ref/swift/variables/","title":"Variables","text":""},{"location":"quick-ref/swift/variables/#variable-declaration","title":"Variable declaration","text":"<p>Variables are declared with <code>var</code>:</p> <pre><code>var greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n</code></pre> <p>For clarity, variable declarations can contain type annotations:</p> <pre><code>var greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\n</code></pre> <p>Variables are mutable. Their values be changed:</p> <pre><code>var numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// print \"9\"\n</code></pre>"},{"location":"quick-ref/swift/variables/#constants","title":"Constants","text":"<p>Constants are declared with <code>let</code>:</p> <pre><code>let greeting = \"Hello\"\nlet numberOfToys = 8\nlet isMorning = true\n</code></pre> <p>For clarity, constant declarations can contain type annotations:</p> <pre><code>let greeting: String = \"Hello\"\nlet numberOfToys: Int = 8\nlet isMorning: Bool = true\n</code></pre> <p>Constants are immutable. Their values be changed:</p> <pre><code>let numberOfToys: Int = 8\nnumberOfToys += 1\n// Error: numberOfToys is immutable\n</code></pre>"},{"location":"quick-ref/swift/variables/#computed-variables-get-and-set","title":"Computed Variables (get and set)","text":"<pre><code>import Foundation\n\nlet df = DateFormatter()\ndf.dateFormat = \"d MMMM yyyy\"\n\nguard var birth = df.date(from: \"5 June 1999\") else {\n    print(\"Date is not valid\")\n    return\n}\n\nvar age: Int {\n    Calendar.current\n        .dateComponents([.year],\n                        from: birth,\n                        to: Date()).year!\n}\n\nprint(age) // 23\nguard let birth2 = df.date(from: \"5 June 2002\") else {\n    print(\"Date is not valid\")\n    return\n}\nbirth = birth2\nprint(age) // 20\n</code></pre> <p>In the example below, distanceInFeet has a <code>getter</code> and a <code>setter</code>. Because of the <code>setter</code>, the <code>getter</code> requires the keyword <code>get</code>:</p> <pre><code>var distanceInMeters: Float = 100\n\nvar distanceInFeet: Float {\n  get {\n    distanceInMeters *3.28\n  }\n  set(newDistance) {\n    distanceInMeters = newDistance /3.28\n  }\n}\n\nprint(distanceInMeters) // 100.0\nprint(distanceInFeet)   // 328.0\n\ndistanceInFeet = 250\nprint(distanceInMeters) // 76.21951\nprint(distanceInFeet)   // 250.0\n\ndistanceInMeters = 800\nprint(distanceInMeters) // 800.0\nprint(distanceInFeet)   // 2624.0\n</code></pre>"},{"location":"quick-ref/swift/variables/#willset","title":"willSet","text":"<pre><code>var distance = 5 {\n  willSet {\n    print(\"The distance will be set\")\n  }\n}\n\ndistance = 10 // print: distance will be set\n</code></pre> <p>The new value can be accessed in <code>willSet</code>:</p> <pre><code>var distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set \\(newDistance)\")\n  }\n}\n\ndistance = 10 // print: distance will be set to 10\n</code></pre> <p><code>willSet</code> can be used to execute some code before setting the variable value</p>"},{"location":"quick-ref/swift/variables/#didset","title":"didSet","text":"<pre><code>var distance = 5 {\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10 // print: distance will be set to 10\n              // print: its old value is: 5\n</code></pre>"},{"location":"quick-ref/swift/variables/#willset-and-didset","title":"willSet and didSet","text":"<pre><code>var distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set to \\(newDistance)\")\n  }\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10\n</code></pre>"},{"location":"quick-ref/typescript/","title":"TypeScript","text":"<p>Abstract</p> <p>A TypeScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Basic Datatypes</li> <li>Modules</li> <li>Union And Intersection Types</li> <li>Utility Types</li> <li>Decorators</li> <li>Also See</li> </ul>","tags":["ts","web"]},{"location":"quick-ref/typescript/also-see/","title":"Also See","text":"<ul> <li>TypeScript</li> </ul>"},{"location":"quick-ref/typescript/basic-datatypes/","title":"Basic Datatypes","text":""},{"location":"quick-ref/typescript/basic-datatypes/#basic-types","title":"basic types","text":"<pre><code>let isDone: boolean = false;\nlet age: number = 30;\nlet userName: string = \"John\";\nlet list: number[] = [1, 2, 3];\nlet tuple: [string, number] = [\"hello\", 10];\nlet notSure: any = 4;\nnotSure = \"maybe a string instead\";\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#enums","title":"enums","text":"<pre><code>enum Color {\n  Red,\n  Green,\n  Blue,\n}\nlet c: Color = Color.Green;\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#interface","title":"interface","text":"<pre><code>interface Person {\n  firstName: string;\n  lastName: string;\n  age?: number; // Optional property\n}\n\nfunction greet(person: Person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#functions","title":"Functions","text":"<pre><code>function add(x: number, y: number): number {\n  return x + y;\n}\n\nlet myAdd = function (x: number, y: number): number {\n  return x + y;\n};\n\nlet myArrowAdd = (x: number, y: number): number =&gt; x + y;\n\nfunction buildName(firstName: string, lastName = \"Smith\") {\n  return firstName + \" \" + lastName;\n}\n\nfunction buildFullName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#classes","title":"Classes","text":"<pre><code>class Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter = new Greeter(\"world\");\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#inheritance","title":"Inheritance","text":"<pre><code>class Animal {\n  move(distance: number = 0) {\n    console.log(`Animal moved ${distance} meters.`);\n  }\n}\n\nclass Dog extends Animal {\n  bark() {\n    console.log(\"Woof! Woof!\");\n  }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#generics","title":"Generics","text":"<pre><code>function identity&lt;T&gt;(arg: T): T {\n  return arg;\n}\n\nlet output1 = identity&lt;string&gt;(\"myString\");\nlet output2 = identity&lt;number&gt;(42);\n</code></pre>"},{"location":"quick-ref/typescript/basic-datatypes/#type-assertions","title":"Type Assertions","text":"<pre><code>let someValue: any = \"this is a string\";\nlet strLength: number = (&lt;string&gt;someValue).length;\n// or\nlet strLength2: number = (someValue as string).length;\n</code></pre>"},{"location":"quick-ref/typescript/decorators/","title":"Decorators","text":""},{"location":"quick-ref/typescript/decorators/#class-decorator","title":"Class Decorator","text":"<pre><code>function sealed(constructor: Function) {\n  Object.seal(constructor);\n  Object.seal(constructor.prototype);\n}\n\n@sealed\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n</code></pre>"},{"location":"quick-ref/typescript/decorators/#method-decorator","title":"Method Decorator","text":"<pre><code>function enumerable(value: boolean) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.enumerable = value;\n  };\n}\n\nclass Greeter {\n  greeting: string;\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  @enumerable(false)\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n</code></pre>"},{"location":"quick-ref/typescript/decorators/#asyncawait","title":"Async/Await","text":"<pre><code>async function fetchData(url: string) {\n  let response = await fetch(url);\n  let data = await response.json();\n  return data;\n}\n</code></pre>"},{"location":"quick-ref/typescript/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/typescript/getting-started/#installing-the-compiler","title":"Installing the Compiler","text":"<pre><code>npm install typescript --save-dev\nnpm tsc\n</code></pre>"},{"location":"quick-ref/typescript/modules/","title":"Modules","text":""},{"location":"quick-ref/typescript/modules/#export","title":"Export","text":"<pre><code>export interface StringValidator {\n  isAcceptable(s: string): boolean;\n}\n\nexport class ZipCodeValidator implements StringValidator {\n  isAcceptable(s: string) {\n    return s.length === 5;\n  }\n}\n</code></pre>"},{"location":"quick-ref/typescript/modules/#import","title":"Import","text":"<pre><code>import { ZipCodeValidator } from \"./ZipCodeValidator\";\n\nlet myValidator = new ZipCodeValidator();\n</code></pre>"},{"location":"quick-ref/typescript/modules/#namespaces","title":"Namespaces","text":"<pre><code>namespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n\n  export class LettersOnlyValidator implements StringValidator {\n    isAcceptable(s: string) {\n      return /^[A-Za-z]+$/.test(s);\n    }\n  }\n}\n\nlet validator = new Validation.LettersOnlyValidator();\n</code></pre>"},{"location":"quick-ref/typescript/union-and-intersection-types/","title":"Union And Intersection Types","text":""},{"location":"quick-ref/typescript/union-and-intersection-types/#union-types","title":"Union Types","text":"<pre><code>function padLeft(value: string, padding: string | number) {\n  if (typeof padding === \"number\") {\n    return Array(padding + 1).join(\" \") + value;\n  }\n  if (typeof padding === \"string\") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got '${padding}'.`);\n}\n</code></pre>"},{"location":"quick-ref/typescript/union-and-intersection-types/#intersection-types","title":"Intersection Types","text":"<pre><code>interface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ntype ArtworksResponse = ArtworksData &amp; ErrorHandling;\n\nconst response: ArtworksResponse = {\n  success: true,\n  artworks: [{ title: \"Mona Lisa\" }],\n};\n</code></pre>"},{"location":"quick-ref/typescript/utility-types/","title":"Utility Types","text":""},{"location":"quick-ref/typescript/utility-types/#partial","title":"Partial","text":"<pre><code>interface User {\n  id: number;\n  name: string;\n  age: number;\n}\n\nlet partialUser: Partial&lt;User&gt; = {\n  name: \"Alice\",\n};\n</code></pre>"},{"location":"quick-ref/typescript/utility-types/#readonly","title":"Readonly","text":"<pre><code>let readonlyUser: Readonly&lt;User&gt; = {\n  id: 1,\n  name: \"Bob\",\n  age: 25,\n};\n\n// readonlyUser.age = 26; // Error: cannot reassign a readonly property\n</code></pre>"},{"location":"quick-ref/typescript/utility-types/#pick","title":"Pick","text":"<pre><code>type UserName = Pick&lt;User, \"name\"&gt;;\n\nlet userName: UserName = {\n  name: \"Charlie\",\n};\n</code></pre>"},{"location":"quick-ref/typescript/utility-types/#omit","title":"Omit","text":"<pre><code>type UserWithoutAge = Omit&lt;User, \"age\"&gt;;\n\nlet userWithoutAge: UserWithoutAge = {\n  id: 2,\n  name: \"Dave\",\n};\n</code></pre>"},{"location":"quick-ref/vim/","title":"Vim","text":"<p>Abstract</p> <p>A useful collection of Vim 8.2 quick reference cheat sheets to help you learn vim editor faster.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Operators</li> <li>Text Objects</li> <li>Working with Multiple Files</li> <li>Search And Replace</li> <li>Vimdiff</li> <li>Miscellaneous</li> <li>Also See</li> </ul>","tags":["vim","vi","text","editor","terminal","shortcut"]},{"location":"quick-ref/vim/also-see/","title":"Also See","text":"<ul> <li>Devhints (devhints.io)</li> <li>Vim cheatsheet (vim.rotrr.com)</li> <li>Vim documentation (vimdoc.sourceforge.net)</li> <li>Interactive Vim tutorial (openvim.com)</li> </ul>"},{"location":"quick-ref/vim/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/vim/getting-started/#motion-diagrams","title":"Motion Diagrams","text":"<pre><code>\u25bc/\u25b6 Cursor   \u25bd/\u25b7 Target\n</code></pre>"},{"location":"quick-ref/vim/getting-started/#left-right-motions","title":"Left-right motions","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 |\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0      $ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ^      fe \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fo     te \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502    \u2502\n\u2502  \u2502  \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500 To     30| \u2500\u2500\u2500\u2510  \u2502\u2502    \u2502\n\u2502  \u2502  \u2502\u2502 \u250c\u2500\u2500\u2500\u2500 ge     w \u2500\u2500\u2500\u2510 \u2502  \u2502\u2502    \u2502\n\u2502  \u2502  \u2502\u2502 \u2502 \u250c\u2500\u2500 b      e \u2500\u2510 \u2502 \u2502  \u2502\u2502    \u2502\n\u2502  \u2502  \u2502\u2502 \u2502 \u2502  \u250ch      l\u2510 \u2502 \u2502 \u2502  \u2502\u2502    \u2502\n\u25bd  \u25bd  \u25bd\u25bd \u25bd \u25bd  \u25bd\u25bc      \u25bc\u25bd \u25bd \u25bd \u25bd  \u25bd\u25bd    \u25bd\n   echo \"A cheatsheet from quickref.me\"\n</code></pre>"},{"location":"quick-ref/vim/getting-started/#up-down-motions","title":"Up-down motions","text":"<pre><code>                 - SCREEN 1 START\n   \u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b7 #!/usr/bin/python\n   \u2502 \u2502     \u250c\u2500\u2500\u2500\u25b7\n   \u2502 \u2502     \u2502     print(\"Hello\")\n   \u2502 \u2502     { } \u25b6 print(\"Vim\")\n   \u2502 \u2502       \u2502   print(\"!\")\n   \u2502 \u2502       \u2514\u2500\u25b7\n   \u2502 \u2502 \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u25b7 print(\"Welcome\")\nG gg H M L k j \u25b6 print(\"to\")\n\u2502        \u2502   \u2514\u2500\u25b7 print(\"cheatsheets.zip\")\n\u2502        \u2502       print(\"/vim\")\n\u2502        \u2502\n\u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u25b7\n\u2502                - SCREEN 1 END\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b7 print(\"SCREEN 2\")\n</code></pre>"},{"location":"quick-ref/vim/getting-started/#motions","title":"Motions","text":"Shortcut Description <code>h</code> | <code>j</code> | <code>k</code> | <code>l</code> Arrow keys <code>&lt;C-u&gt;</code> / <code>&lt;C-d&gt;</code> Half-page up/down <code>&lt;C-b&gt;</code> / <code>&lt;C-f&gt;</code> Page up/down"},{"location":"quick-ref/vim/getting-started/#words","title":"Words","text":"Shortcut Description <code>b</code> / <code>w</code> Previous/Next word <code>ge</code> / <code>e</code> Previous/Next end of word"},{"location":"quick-ref/vim/getting-started/#line","title":"Line","text":"Shortcut Description <code>0</code> (zero) / <code>$</code> Start/End of line <code>^</code> Start of line (non-blank)"},{"location":"quick-ref/vim/getting-started/#character","title":"Character","text":"Shortcut Description <code>Fe</code> / <code>fe</code> Move to previous/next <code>e</code> <code>To</code> / <code>to</code> Move before/after previous/next <code>o</code> <code>|</code>/ <code>n|</code> Go to first/<code>n</code>th column"},{"location":"quick-ref/vim/getting-started/#document","title":"Document","text":"Shortcut Description <code>gg</code> / <code>G</code> First/Last line <code>:n</code> | <code>nG</code> Go to line <code>n</code> <code>}</code> / <code>{</code> Next/Previous empty line"},{"location":"quick-ref/vim/getting-started/#window","title":"Window","text":"Shortcut Description <code>H</code> / <code>M</code> / <code>L</code> Top/Middle/Bottom screen <code>zt</code> / <code>zz</code> / <code>zb</code> Top/Center/Bottom this line"},{"location":"quick-ref/vim/getting-started/#insert-mode","title":"Insert Mode","text":"Shortcut Description <code>i</code> / <code>a</code> Insert before/after cursor <code>I</code> / <code>A</code> Insert start/end of line <code>o</code> / <code>O</code> (letter) Insert new line below/above <code>s</code> / <code>S</code> Delete char/line and insert <code>C</code> / <code>cc</code> Change to end of/current line <code>gi</code> Insert at last insert point <code>Esc</code> | <code>&lt;C-[&gt;</code> Exit insert mode"},{"location":"quick-ref/vim/getting-started/#saving-and-exiting","title":"Saving and Exiting","text":"Shortcut Description <code>:w</code> Save <code>:q</code> Close file <code>:wq</code> | <code>:x</code> | <code>ZZ</code> Save and quit <code>:wqa</code> Save and quit all files <code>:q!</code> | <code>ZQ</code> Force quit <code>:qa</code> Close all files <code>:qa!</code> Force quit all files <code>:w</code> now.txt Write to <code>now.txt</code> <code>:sav</code> new.txt Save and edit <code>new.txt</code> <code>:w</code> !sudo tee % Write to readonly file"},{"location":"quick-ref/vim/getting-started/#normal-mode","title":"Normal Mode","text":"Shortcut Description <code>r</code> Replace one character <code>R</code> Enter Replace mode <code>u</code> / <code>3u</code> Undo changes <code>1</code> / <code>3</code> times <code>U</code> Undo changes on one line <code>J</code> Join with next line <code>&lt;C-r&gt;</code> / 5 <code>&lt;C-r&gt;</code> Redo changes <code>1</code> / <code>5</code> times"},{"location":"quick-ref/vim/getting-started/#cut-and-paste","title":"Cut and paste","text":"Shortcut Description <code>x</code> Delete character (Cut) <code>p</code> / <code>P</code> Paste after/before <code>xp</code> Swap two characters <code>D</code> Delete to end of line (Cut) <code>dw</code> Delete word (Cut) <code>dd</code> Delete line (Cut) <code>ddp</code> Swap two lines <code>yy</code> Yank line (Copy) <code>\"*p</code> | <code>\"+p</code> Paste from system clipboard <code>\"*y</code> | <code>\"+y</code> Paste to system clipboard"},{"location":"quick-ref/vim/getting-started/#in-visual-mode","title":"In visual mode","text":"Shortcut Description <code>d</code> | <code>x</code> Delete selection (Cut) <code>s</code> Replace selection <code>y</code> Yank selection (Copy)"},{"location":"quick-ref/vim/getting-started/#repeating","title":"Repeating","text":"Shortcut Description <code>.</code> Repeat last command <code>;</code> Repeat latest <code>f</code>, <code>t</code>, <code>F</code> or <code>T</code> <code>,</code> Repeat latest <code>f</code>, <code>t</code>, <code>F</code> or <code>T</code> reversed <code>&amp;</code> Repeat last <code>:s</code> <code>@:</code> Repeat a command-line command"},{"location":"quick-ref/vim/getting-started/#visual-mode","title":"Visual mode","text":"Shortcut Description <code>v</code> Enter visual mode <code>V</code> Enter visual line mode <code>&lt;C-v&gt;</code> Enter visual block mode <code>ggVG</code> Select all text <code>&gt;</code> / <code>&lt;</code> Shift text right/left"},{"location":"quick-ref/vim/getting-started/#macros","title":"Macros","text":"- - <code>qi</code> Record macro <code>i</code> <code>q</code> Stop recording macro <code>@i</code> Run macro <code>i</code> <code>7@i</code> Run macro <code>i</code> 7 times <code>@@</code> Repeat last macro <p>You can save macro for any letters not just <code>i</code></p>"},{"location":"quick-ref/vim/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/vim/miscellaneous/#case","title":"Case","text":"Shortcut Description <code>vU</code> Uppercase character <code>vu</code> Lowercase character <code>~</code> Toggle case character <code>viw</code> <code>U</code> Uppercase word <code>viw</code> <code>u</code> Lowercase word <code>viw</code> <code>~</code> Toggle case word <code>VU</code> / <code>gUU</code> Uppercase line <code>Vu</code> / <code>guu</code> Lowercase line <code>V~</code> / <code>g~~</code> Toggle case line <code>gggUG</code> Uppercase all text <code>ggguG</code> Lowercase all text <code>ggg~G</code> Toggle case all text"},{"location":"quick-ref/vim/miscellaneous/#jumping","title":"Jumping","text":"Shortcut Description <code>&lt;C-o&gt;</code> Go back to previous <code>&lt;C-i&gt;</code> Go forward <code>gf</code> Go to file in cursor <code>ga</code> Display hex, ascii value"},{"location":"quick-ref/vim/miscellaneous/#misc-command-lines","title":"Misc command-lines","text":"- - <code>:h</code> Help open help view <code>:edit!</code> Reload current file <code>:2,8m0</code> Move lines <code>2</code>-<code>8</code> to <code>0</code> <code>:noh</code> Clear search highlights <code>:sort</code> Sort lines <code>:ter</code> Open a terminal window <code>:set paste</code> Enable Insert Paste sub-mode <code>:set nopaste</code> disable Insert Paste sub-mode <code>:cq</code> Exiting with an error(aborting Git)"},{"location":"quick-ref/vim/miscellaneous/#navigating","title":"Navigating","text":"Shortcut Description <code>%</code> Nearest/matching <code>{[()]}</code> <code>[(</code> | <code>[{</code> Previous <code>(</code> or <code>{</code> <code>])</code> | <code>]{</code> Next <code>)</code> or <code>}</code> <code>[m</code> Previous method start <code>[M</code> Previous method end"},{"location":"quick-ref/vim/miscellaneous/#counters","title":"Counters","text":"Shortcut Description <code>&lt;C-a&gt;</code> Increase number <code>&lt;C-x&gt;</code> Decrease number"},{"location":"quick-ref/vim/miscellaneous/#tags","title":"Tags","text":"Shortcut Description <code>:tag Classname</code> Jump to first definition of Classname <code>&lt;C-]&gt;</code> Jump to definition <code>g]</code> See all definitions <code>&lt;C-t&gt;</code> Go back to last tag <code>&lt;C-o&gt; &lt;C-i&gt;</code> Back/forward <code>:tselect Classname</code> Find definitions of Classname <code>:tjump Classname</code> Find definitions of Classname (auto-select 1st)"},{"location":"quick-ref/vim/miscellaneous/#formatting","title":"Formatting","text":"- - <code>:ce 8</code> Center lines between <code>8</code> columns <code>:ri 4</code> Right-align lines at <code>4</code> columns <code>:le</code> Left-align lines <p>See <code>:help formatting</code></p>"},{"location":"quick-ref/vim/miscellaneous/#marks","title":"Marks","text":"Shortcut Description <code>`^</code> Last position of cursor in insert mode <code>`.</code> Last change in current buffer <code>`\"</code> Last exited current buffer <code>`0</code> In last file edited <code>''</code> Back to line in current buffer where jumped from <code>``</code> Back to position in current buffer where jumped from <code>`[</code> To beginning of previously changed or yanked text <code>`]</code> To end of previously changed or yanked text <code>`&lt;</code> To beginning of last visual selection <code>`&gt;</code> To end of last visual selection <code>ma</code> Mark this cursor position as <code>a</code> <code>`a</code> Jump to the cursor position <code>a</code> <code>'a</code> Jump to the beginning of the line with position <code>a</code> <code>d'a</code> Delete from current line to line of mark <code>a</code> <code>d`a</code> Delete from current position to position of mark <code>a</code> <code>c'a</code> Change text from current line to line of <code>a</code> <code>y`a</code> Yank text from current position to position of <code>a</code> <code>:marks</code> List all current marks <code>:delm a</code> Delete mark <code>a</code> <code>:delm a-d</code> Delete marks <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> <code>:delm abc</code> Delete marks <code>a</code>, <code>b</code>, <code>c</code>"},{"location":"quick-ref/vim/miscellaneous/#calculator","title":"Calculator","text":"Shortcut Description <code>&lt;C-r&gt;</code> <code>=</code> 7*7 Shows the result <code>&lt;C-r&gt;</code> <code>=</code> 10/2 Shows the result <p>Do this in INSERT mode</p>"},{"location":"quick-ref/vim/miscellaneous/#shell","title":"Shell","text":"- - <code>:!&lt;shell&gt;</code> Interpret Shell Command <code>:r!&lt;shell&gt;</code> Read in output of shell <code>:r!date</code> Insert date <code>:!!date</code> Replace current line with date"},{"location":"quick-ref/vim/miscellaneous/#command-line","title":"Command line","text":"Shortcut Description <code>&lt;C-r&gt;&lt;C-w&gt;</code> Insert current word into the command line <code>&lt;C-r&gt;\"</code> Paste from \" register <code>&lt;C-x&gt;&lt;C-f&gt;</code> Auto-completion of path in insert mode"},{"location":"quick-ref/vim/miscellaneous/#tricks","title":"Tricks","text":"<p>Remove duplicate lines</p> <pre><code>:sort | %!uniq -u\n</code></pre> <p>To number the lines in the file</p> <pre><code>:%!cat -n\n</code></pre> <p>Copy whole doc to clipboard</p> <pre><code>:%w !pbcopy            # Mac OS X\n:%w !xclip -i -sel c   # GNU/Linux\n:%w !xsel -i -b        # GNU/Linux\n</code></pre>"},{"location":"quick-ref/vim/operators/","title":"Operators","text":""},{"location":"quick-ref/vim/operators/#usage","title":"Usage","text":"Shortcut Description <code>d</code> w Operator Motion <p>Combine operators with motions to use them</p>"},{"location":"quick-ref/vim/operators/#available-operators","title":"Available Operators","text":"Shortcut Description <code>d</code> Delete <code>y</code> Yank (copy) <code>c</code> Change (delete then insert) <code>p</code> Paste <code>=</code> Formats code <code>g~</code> Toggle case <code>gU</code> Uppercase <code>gu</code> Lowercase <code>&gt;</code> Indent right <code>&lt;</code> Indent left <code>!</code> Filter through external program"},{"location":"quick-ref/vim/operators/#examples","title":"Examples","text":"Combination Description <code>d</code>d Delete current line <code>d</code>j Delete two lines <code>d</code>w Delete to next word <code>d</code>b Delete to beginning of word <code>d</code>fa Delete until <code>a</code> char <code>d</code>/hello Delete until <code>hello</code> <code>c</code>c Change current line, synonym with <code>S</code> <code>y</code>y Copy current line <code>&gt;</code>j Indent 2 lines gg<code>d</code>G Delete a complete document gg<code>=</code>G Indent a complete document gg<code>y</code>G Copy a whole document"},{"location":"quick-ref/vim/operators/#counts","title":"Counts","text":"<pre><code>[count] &lt;operator&gt; &lt;motion&gt;\n&lt;operator&gt; [count] &lt;motion&gt;\n</code></pre> Combination Description 2<code>d</code>d Delete <code>2</code> lines 6<code>y</code>y Copy <code>6</code> lines <code>d</code>3w Delete <code>3</code> words <code>d</code>5j Delete <code>5</code> lines downwards <code>&gt;</code>4k Indent <code>4</code> lines upwards"},{"location":"quick-ref/vim/search-and-replace/","title":"Search And Replace","text":""},{"location":"quick-ref/vim/search-and-replace/#search","title":"Search","text":"- - <code>/foo</code> Search forward <code>/foo\\c</code> Search forward (case insensitive) <code>?foo</code> Search backward <code>/\\v\\d+</code> Search with regex <code>n</code> Next matching search pattern <code>N</code> Previous match <code>*</code> Search for current word forward <code>#</code> Search for current word backward"},{"location":"quick-ref/vim/search-and-replace/#replace-line","title":"Replace LINE","text":"<pre><code>:[range]s/{pattern}/{str}/[flags]\n</code></pre> <code>:s/old/new</code> Replace first <code>:s/old/new/g</code> Replace all <code>:s/\\vold/new/g</code> Replace all with regex <code>:s/old/new/gc</code> replace all (Confirm) <code>:s/old/new/i</code> Ignore case replace first <code>:2,6s/old/new/g</code> Replace between lines <code>2</code>-<code>6</code>"},{"location":"quick-ref/vim/search-and-replace/#replace-file","title":"Replace FILE","text":"<pre><code>:%s/{pattern}/{str}/[flags]\n</code></pre> <code>:%s/old/new</code> Replace first <code>:%s/old/new/g</code> Replace all <code>:%s/old/new/gc</code> Replace all (Confirm) <code>:%s/old/new/gi</code> Replace all (ignore case) <code>:%s/\\vold/new/g</code> Replace all with regex"},{"location":"quick-ref/vim/search-and-replace/#ranges","title":"Ranges","text":"- - <code>%</code> Entire file <code>\u2019&lt;,\u2019&gt;</code> Current selection <code>5</code> Line <code>5</code> <code>5,10</code> Lines <code>5</code> to <code>10</code> <code>$</code> Last line <code>2,$</code> Lines <code>2</code> to Last <code>.</code> Current line <code>,3</code> Next <code>3</code> lines <code>-3,</code> Forward <code>3</code> lines"},{"location":"quick-ref/vim/search-and-replace/#global-command","title":"Global command","text":"<pre><code>:[range]g/{pattern}/[command]\n</code></pre> <code>:g/foo/d</code> Delete lines containing <code>foo</code> <code>:g!/foo/d</code> Delete lines not containing <code>foo</code> <code>:g/^\\s*$/d</code> Delete all blank lines <code>:g/foo/t$</code> Copy lines containing <code>foo</code> to EOF <code>:g/foo/m$</code> Move lines containing <code>foo</code> to EOF <code>:g/^/m0</code> Reverse a file <code>:g/^/t.</code> Duplicate every line"},{"location":"quick-ref/vim/search-and-replace/#inverse-g","title":"Inverse :g","text":"<pre><code>:[range]v/{pattern}/[command]\n</code></pre> <code>:v/foo/d</code> Delete lines not containing <code>foo</code>(also <code>:g!/foo/d</code>)"},{"location":"quick-ref/vim/search-and-replace/#flags","title":"Flags","text":"- - <code>g</code> Replace all occurrences <code>i</code> Ignore case <code>I</code> Don't ignore case <code>c</code> Confirm each substitution"},{"location":"quick-ref/vim/search-and-replace/#substitute-expression-magic","title":"Substitute expression (magic)","text":"- - <code>&amp;</code> | <code>\\0</code> Replace with the whole matched <code>\\1</code>...<code>\\9</code> Replace with the group 0-9 <code>\\u</code> Uppercase next letter <code>\\U</code> Uppercase following characters <code>\\l</code> Lowercase next letter <code>\\L</code> Lowercase following characters <code>\\e</code> End of <code>\\u</code>, <code>\\U</code>, <code>\\l</code> and <code>\\L</code> <code>\\E</code> End of <code>\\u</code>, <code>\\U</code>, <code>\\l</code> and <code>\\L</code>"},{"location":"quick-ref/vim/search-and-replace/#examples","title":"Examples","text":"<pre><code>:s/a\\|b/xxx\\0xxx/g           # Modifies \"a b\"      to \"xxxaxxx xxxbxxx\"\n:s/test/\\U&amp; file/                # Modifies \"test\"     to \"TEST FILE\"\n:s/\\(test\\)/\\U\\1\\e file/         # Modifies \"test\"     to \"TEST file\"\n:s/\\v([abc])([efg])/\\2\\1/g      # Modifies \"af fa bg\" to \"fa fa gb\"\n:s/\\v\\w+/\\u\\0/g               # Modifies \"bla bla\"  to \"Bla Bla\"\n:s/\\v([ab])|([cd])/\\1x/g         # Modifies \"a b c d\"  to \"ax bx x x\"\n:%s/.*/\\L&amp;/                      # Modifies \"HTML\"     to \"html\"\n:s/\\v&lt;(.)(\\w*)/\\u\\1\\L\\2/g        # Make every first letter of a word uppercase\n:%s/^\\(.*\\)\\n\\1/\\1/              # Remove duplicate lines\n:%s/&lt;\\/\\=\\(\\w\\+\\)\\&gt;/\\U&amp;/g        # Convert HTML-Tags to uppercase\n:g/^pattern/s/$/mytext           # Find and append text to the end\n:g/pattern/norm! @i              # Run a macro on matching lines\n/^\\(.*\\)\\(\\r\\?\\n\\1\\)\\+$          # View the duplicates lines\n/\\v^(.*)(\\r?\\n\\1)+$              # View the duplicates lines (very magic)\n:v/./,/./-j                      # Compress blank lines into a blank line\n:g/&lt;p1&gt;/,/&lt;p2&gt;/d                 # Delete inclusively from &lt;p1&gt; to &lt;p2&gt;\n</code></pre>"},{"location":"quick-ref/vim/text-objects/","title":"Text Objects","text":""},{"location":"quick-ref/vim/text-objects/#usage","title":"Usage","text":"Shortcut Description - <code>v</code> i / a p Operator inner / around Text object <p>Operate with an operator inner or around text blocks</p>"},{"location":"quick-ref/vim/text-objects/#text-objects_1","title":"Text objects","text":"Shortcut Description p Paragraph w Word W WORD (surrounded by whitespace) s Sentence [ ( { \\&lt; A [], (), or {} block ] ) } &gt; A [], (), or {} block ' \" ` A quoted string b A block [( B A block in [{ t A HTML tag block <p>See <code>:help text-objects</code></p>"},{"location":"quick-ref/vim/text-objects/#delete","title":"Delete","text":"Shortcut Description <code>d</code>iw Delete inner word <code>d</code>is Delete inner sentence <code>d</code>i\" Delete in quotes <code>d</code>a\" Delete in quotes (including quotes) <code>d</code>ip Delete a paragraph"},{"location":"quick-ref/vim/text-objects/#selections","title":"Selections","text":"Shortcut Description <code>v</code>i\" Select inner quotes \"<code>...</code>\" <code>v</code>a\" Select quotes <code>\"...\"</code> <code>v</code>i[ Select inner brackets [<code>...</code>] <code>v</code>a[ Select brackets <code>[...]</code> <code>v</code>iw Select inner word <code>v</code>ip Select inner paragraph <code>v</code>ipip Select more paragraph"},{"location":"quick-ref/vim/text-objects/#misc","title":"Misc","text":"Shortcut Description <code>c</code>iw Change inner word <code>c</code>i\" Change inner quotes <code>c</code>it Change inner tags (HTML) <code>c</code>ip Change inner paragraph <code>y</code>ip Yank inner paragraph <code>y</code>ap Yank paragraph (including newline)"},{"location":"quick-ref/vim/vimdiff/","title":"Vimdiff","text":""},{"location":"quick-ref/vim/vimdiff/#usage","title":"Usage","text":"<pre><code>vimdiff file1 file2 [file3]\nvim -d file1 file2 [file3]\n</code></pre>"},{"location":"quick-ref/vim/vimdiff/#editing","title":"Editing","text":"<pre><code>:[range]diffget [bufspec]\n:[range]diffput [bufspec]\n</code></pre> Shortcut Description <code>do</code> / <code>:diffget</code> Obtain (get) difference <code>dp</code> / <code>:diffput</code> Put difference <code>:dif</code> Re-scan differences <code>:diffo</code> Switch off diff mode <code>:1,$+1diffget</code> Get all differences <code>ZQ</code> Quit without changes"},{"location":"quick-ref/vim/vimdiff/#folds","title":"Folds","text":"Shortcut Description <code>zo</code> / <code>zO</code> Open <code>zc</code> / <code>zC</code> Close <code>za</code> / <code>zA</code> Toggle <code>zv</code> Open folds for this line <code>zM</code> Close all <code>zR</code> Open all <code>zm</code> Fold more (foldlevel += 1) <code>zr</code> Fold less (foldlevel -= 1) <code>zx</code> Update folds"},{"location":"quick-ref/vim/vimdiff/#jumping","title":"Jumping","text":"Shortcut Description <code>]c</code> Next difference <code>[c</code> Previous difference"},{"location":"quick-ref/vim/working-with-multiple-files/","title":"Working with Multiple Files","text":""},{"location":"quick-ref/vim/working-with-multiple-files/#buffers","title":"Buffers","text":"- - <code>:e file</code> Edit a file in a new buffer <code>:bn</code> Go to the next buffer <code>:bp</code> Go to the previous buffer <code>:bd</code> Remove file from buffer list <code>:b 5</code> Open buffer #5 <code>:b file</code> Go to a buffer by file <code>:ls</code> List all open buffers <code>:sp file</code> Open and split window <code>:vs file</code> Open and vertically split window <code>:hid</code> Hide this buffer <code>:wn</code> Write file and move to next <code>:tab ba</code> Edit all buffers as tabs"},{"location":"quick-ref/vim/working-with-multiple-files/#windows","title":"Windows","text":"- - <code>&lt;C-w&gt;</code> <code>s</code> Split window <code>&lt;C-w&gt;</code> <code>v</code> Split window vertically <code>&lt;C-w&gt;</code> <code>w</code> Switch windows <code>&lt;C-w&gt;</code> <code>q</code> Quit a window <code>&lt;C-w&gt;</code> <code>T</code> Break out into a new tab <code>&lt;C-w&gt;</code> <code>x</code> Swap current with next <code>&lt;C-w&gt;</code> <code>-</code> / <code>+</code> Decrease/Increase height <code>&lt;C-w&gt;</code> <code>&lt;</code> / <code>&gt;</code> Decrease/Increase width <code>&lt;C-w&gt;</code> <code>|</code> Max out the width <code>&lt;C-w&gt;</code> <code>_</code> Max out the height <code>&lt;C-w&gt;</code> <code>=</code> Equally high and wide <code>&lt;C-w&gt;</code> <code>h</code> / <code>l</code> Go to the left/right window <code>&lt;C-w&gt;</code> <code>j</code> / <code>k</code> Go to the up/down window"},{"location":"quick-ref/vim/working-with-multiple-files/#tabs","title":"Tabs","text":"Shortcut Description <code>:tabe [file]</code> Edit file in a new tab <code>:tabf [file]</code> Open if exists in new tab <code>:tabc</code> Close current tab <code>:tabo</code> Close other tabs <code>:tabs</code> List all tabs <code>:tabr</code> Go to first tab <code>:tabl</code> Go to last tab <code>:tabm 0</code> Move to position <code>0</code> <code>:tabn</code> Go to next tab <code>:tabp</code> Go to previous tab"},{"location":"quick-ref/vim/working-with-multiple-files/#normal-mode","title":"Normal mode","text":"Shortcut Description <code>gt</code> Go to next tab <code>gT</code> Go to previous tab <code>2gt</code> Go to tab number <code>2</code>"}]}
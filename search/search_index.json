{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheatsheets for Developers","text":"<p><code>Cheat-Sheets</code> Your go-to reference developer guide for learning <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code>, and more!</p> <p> </p>"},{"location":"#contribute","title":"Contribute","text":"<p>We're always looking to expand and improve Cheatsheets! If you have a cheat sheet to share or see something that could be improved, feel free to submit a pull request. Let's build a valuable resource for developers together.  </p>"},{"location":"clean-code/","title":"Clean Code","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"community/contributing/","title":"Contributing","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"quick-ref/","title":"Quick Reference","text":"<p><code>Cheat-Sheets</code> Your go-to reference developer guide for learning <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code>, and more!</p>"},{"location":"quick-ref/#programming","title":"Programming","text":"<ul> <li> Python</li> </ul>"},{"location":"quick-ref/#clean-code","title":"Clean Code","text":"<p>WIP</p> <p>This section is still a work in progress...</p>"},{"location":"quick-ref/dart/","title":"Dart","text":"<p>Abstract</p> <p>A Dart cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Operators</li> <li>Control Flows : Conditionals</li> <li>Control Flows : Loops</li> <li>Collections</li> <li>Functions</li> <li>Classes and Objects</li> <li>Implicit Interfaces</li> <li>Exceptions</li> <li>Futures</li> <li>Extensions</li> <li>Miscellaneous</li> </ul>","tags":["dart","flutter","mobile"]},{"location":"quick-ref/dart/classes-and-objects/","title":"Classes and objects","text":""},{"location":"quick-ref/dart/classes-and-objects/#class","title":"Class","text":"<pre><code>class Cat {\n    String name;\n\n    // method\n    void voice(){\n        print(\"Meow\");\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#object","title":"Object","text":"<pre><code>// instance of a class\n// below myCat is Object of class Cat\n\nvoid main(){\n    Cat myCat = Cat();\n    myCat.name = \"Kitty\";\n    myCat.voice(); // Prints: Meow\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#constructors","title":"Constructors","text":"<pre><code>class Cat {\n    String name;\n    Cat(this.name);\n}\nvoid main(){\n    Cat myCat = Cat(\"Kitty\");\n    print(myCat.name); // Prints: Kitty\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#abstract-classes","title":"Abstract Classes","text":"<pre><code>// abstract class\u2014a class that can\u2019t be instantiated\n// This class is declared abstract and thus can't be instantiated.\nabstract class AbstractContainer {\n  // Define constructors, fields, methods...\n\n  void updateChildren(); // Abstract method.\n}\n</code></pre>"},{"location":"quick-ref/dart/classes-and-objects/#getters-setters","title":"Getters Setters","text":"<pre><code>// provide read and write access to an object\u2019s properties\nclass Cat {\n    String name;\n\n    // getter\n    String get catName {\n        return name;\n    }\n\n    // setter\n    void set catName(String name){\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/collections/","title":"Collections","text":""},{"location":"quick-ref/dart/collections/#lists","title":"Lists","text":"<pre><code>// ordered group of objects\nvar list = [1, 2, 3];\n\nprint(list.length); //Print: 3\nprint(list[1]); //Print: 2\n\n// other ways of list declaration and initializations\n\nList&lt;String&gt; cities = &lt;String&gt;[\"New York\", \"Mumbai\", \"Tokyo\"];\n\n// To create a list that\u2019s a compile-time constant\nconst constantCities = const [\"New York\", \"Mumbai\", \"Tokyo\"];\n</code></pre>"},{"location":"quick-ref/dart/collections/#sets","title":"Sets","text":"<pre><code>// A set in Dart is an unordered collection of unique items.\nvar halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\n\n// to create an empty set\nvar names = &lt;String&gt;{};\nSet&lt;String&gt; names = {}; // This works, too.\n//var names = {}; // Creates a map, not a set.\n</code></pre>"},{"location":"quick-ref/dart/collections/#maps","title":"Maps","text":"<pre><code>// a map is an object that associates keys and values\nvar person = Map&lt;String, String&gt;();\n// To initialize the map, do this:\n\nperson['lastName'] = 'Tesla';\n\nprint(person); //Print: {firstName: Nicola, lastName: Tesla}\nprint(person['lastName']); //Print: Tesla\n\n\nvar nobleGases = {\n  // Key: Value\n  2: 'helium',\n  10: 'neon',\n  18: 'argon',\n};\n</code></pre>"},{"location":"quick-ref/dart/control-flows-conditionals/","title":"Control flows : conditionals","text":""},{"location":"quick-ref/dart/control-flows-conditionals/#if-and-else-if","title":"if and else if","text":"<pre><code>if(age &lt; 18){\n    print(\"Teen\");\n} else if( age &gt; 18 &amp;&amp; age &lt;60){\n    print(\"Adult\");\n} else {\n    print(\"Old\");\n}\n</code></pre>"},{"location":"quick-ref/dart/control-flows-conditionals/#switch-case","title":"switch case","text":"<pre><code>enum Pet {dog, cat}\nPet myPet = Pet.dog;\nswitch(myPet){\n    case Pet.dog:\n        print('My Pet is Dog.');\n        break;\n    case Pet.cat:\n        print('My Pet is Cat.');\n        break;\n    default:\n        print('I don\\'t have a Pet');\n}\n// Prints: My Pet is Dog.\n</code></pre>"},{"location":"quick-ref/dart/control-flows-loops/","title":"Control flows : loops","text":""},{"location":"quick-ref/dart/control-flows-loops/#while-loop","title":"while loop","text":"<pre><code>while (!dreamsAchieved) {\n  workHard();\n}\n</code></pre> <p>while loop check condition before iteration of the loop</p>"},{"location":"quick-ref/dart/control-flows-loops/#do-while-loop","title":"do-while loop","text":"<pre><code>do {\n  workHard();\n} while (!dreamsAchieved);\n</code></pre> <p>do-while loop verifies the condition after the execution of the statements inside the loop</p>"},{"location":"quick-ref/dart/control-flows-loops/#for-loop","title":"for loop","text":"<pre><code>for(int i=0; i&lt; 10; i++){\n    print(i);\n}\n\nvar numbers = [1,2,3];\n// for-in loop for lists\nfor(var number in numbers){\n    print(number);\n}\n</code></pre>"},{"location":"quick-ref/dart/control-flows-loops/#for-in-loop","title":"for in loop","text":"<pre><code>  // Define a list of numbers\n  var numbers = [1, 2, 3, 4, 5];\n\n  // Use a for-in loop to iterate over the list\n  for (var number in numbers) {\n    print(number);\n  }\n\n  // Define a list of strings\n  var fruits = ['Apple', 'Banana', 'Cherry'];\n\n  // Use a for-in loop to iterate over the list\n  for (var fruit in fruits) {\n    print(fruit);\n  }\n</code></pre>"},{"location":"quick-ref/dart/exceptions/","title":"Exceptions","text":""},{"location":"quick-ref/dart/exceptions/#throw","title":"Throw","text":"<pre><code>// throws or raises and exception\nthrow IntegerDivisionByZeroException();\n\n// You can also throw arbitrary objects\nthrow \"Product out of stock!\";\n</code></pre>"},{"location":"quick-ref/dart/exceptions/#catch","title":"Catch","text":"<pre><code>try {\n    int c = 3/0;\n    print(c);\n} on IntegerDivisionByZeroException {\n    // A specific exception\n    print('Can not divide integer by 0.')\n} on Exception catch (e) {\n    // Anything else that is an exception\n    print('Unknown exception: $e');\n} catch (e) {\n    // No specified type, handles all\n    print('Something really unknown: $e');\n}\n</code></pre>"},{"location":"quick-ref/dart/exceptions/#finally","title":"Finally","text":"<pre><code>// To ensure that some code runs whether or not an exception is thrown\ntry {\n  cookFood();\n} catch (e) {\n  print('Error: $e'); // Handle the exception first.\n} finally {\n  cleanKitchen(); // Then clean up.\n}\n</code></pre>"},{"location":"quick-ref/dart/extensions/","title":"Extensions","text":""},{"location":"quick-ref/dart/extensions/#why-use-extensions","title":"Why use extensions?","text":"<pre><code>// Extensions allow you to add methods to existing\n// classes without modifying them.\n\n// Instead of defining a util class.\nclass StringUtil {\n  static bool isValidEmail(String str) {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(str);\n  }\n}\n\nprint(StringUtil.isValidEmail('someString')); //Print: false\n\n// We can define an extension which will be applied\n// on a certain type.\n\nextension StringExtensions on String {\n  bool get isValidEmail {\n    final emailRegExp = RegExp(r\"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+\");\n    return emailRegExp.hasMatch(this);\n  }\n}\n\nprint('test@example.com'.isValidEmail); //Print: true\nprint('SomeString'.isValidEmail); //Print: false\n</code></pre>"},{"location":"quick-ref/dart/extensions/#generic-extensions","title":"Generic Extensions","text":"<pre><code>// allows you to apply the same logic to a range of types.\nextension NumGenericExtensions&lt;T extends num&gt; on T {\n  T addTwo() =&gt; this + 2 as T;\n}\n\nprint(7.addTwo()); // Print: 9\n</code></pre>"},{"location":"quick-ref/dart/extensions/#dart-extensions-in-flutter","title":"Dart Extensions in Flutter","text":"<pre><code>extension ContextExtension on BuildContext {\n  double get screenHeight =&gt; MediaQuery.of(this).size.height;\n  double get screenWidth =&gt; MediaQuery.of(this).size.width;\n}\n\n// usage\n@override\nWidget build(BuildContext context) =&gt; MaterialApp(\n    home: Scaffold(\n      body: Container(\n        width: context.screenWidth * 0.5,\n        height: context.screenHeight * 0.3,\n        color: Colors.blue,\n        child: Text('Hello World!'),\n      ),\n    ),\n  );\n</code></pre>"},{"location":"quick-ref/dart/functions/","title":"Functions","text":""},{"location":"quick-ref/dart/functions/#syntax","title":"Syntax","text":"<pre><code>// functions in dart are objects and have a type\nint add(int a, int b){\n    return a+b;\n}\n\n// functions can be assigned to variables\nint sum = add(2,3); // returns: 5\n\n// can be passed as arguments to other functions\nint totalSum = add(2, add(2,3)); // returns : 7\n</code></pre>"},{"location":"quick-ref/dart/functions/#arrow-syntax","title":"Arrow Syntax (=&gt;)","text":"<pre><code>// functions that contain just one expression, you can use a shorthand syntax\nbool isFav(Product product) =&gt; favProductsList.contains(product);\n</code></pre>"},{"location":"quick-ref/dart/functions/#anonymous-lambda-functions","title":"Anonymous (lambda) functions","text":"<pre><code>// small one line functions that dont have name\nint add(a,b) =&gt; a+b;\n\n// lambda functions mostly passed as parameter to other functions\nconst list = ['apples', 'bananas', 'oranges'];\nlist.forEach(\n(item) =&gt; print('${list.indexOf(item)}: $item'));\n//Prints: 0: apples 1: bananas 2: oranges\n</code></pre>"},{"location":"quick-ref/dart/futures/","title":"Futures","text":""},{"location":"quick-ref/dart/futures/#async-await","title":"Async Await","text":"<pre><code>// functions which are asynchronous: they return after setting up a possibly time-consuming operation\n// The async and await keywords support asynchronous programming\n\nFuture&lt;String&gt; login() {\n String userName=\"Temidjoy\";\n return\n  Future.delayed(\n    Duration(seconds: 4), () =&gt; userName);\n}\n\n// Asynchronous\nmain() async {\n print('Authenticating please wait...');\n print(await login());\n}\n</code></pre>"},{"location":"quick-ref/dart/getting-started/","title":"Getting started","text":""},{"location":"quick-ref/dart/getting-started/#hello-world","title":"Hello World","text":"<pre><code>// top-level function where app execution starts\nvoid main(){\n    print(\"Hello World!\"); // Print to console\n}\n</code></pre> <p>Every app has a main() function</p>"},{"location":"quick-ref/dart/getting-started/#variables","title":"Variables","text":"<pre><code>int x = 2; // explicitly typed\nvar p = 5; // type inferred - Generic var with type inference\n\ndynamic z = 8; // variable can take on any type\nz = \"cool\"; // cool\n\n// if you never intend to change a variable use final or const. Something like this:\n\nfinal email = \"temid@gmail.com\"; // Same as var but cannot be reassigned\nfinal String email = \"temid@gmail.com\"; // you can't change the value\n\nconst qty = 5; // Compile-time constant\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#data-types","title":"Data Types","text":"<pre><code>int age = 20; // integers, range -2^63 to 2^63 - 1\ndouble height = 1.85; // floating-point numbers\n\n// You can also declare a variable as a num\nnum x = 1;  // x can have both int and double values\nx += 2.5;\nprint(x); //Print: 3.5\n\nString name = \"Nicola\";\n\nbool isFavourite = true;\nbool isLoaded = false;\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#string-interpolation","title":"String interpolation","text":"<pre><code>// can use single or double qoutes for String type\nvar firstName = 'Nicola';\nvar lastName = \"Tesla\";\n\n//can embed variables in string with $\nString fullName = \"$firstName $lastName\";\n\n// concatenate with +\nvar name = \"Albert \" + \"Einstein\";\n\nString upperCase = '${firstName.toUpperCase()}';\nprint(upperCase); //Print: NICOLA\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#comments","title":"Comments","text":"<pre><code>// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#multiline-string","title":"multiline String","text":"<pre><code>For multiline String we have to use ''' your text'''\nfor example\nprint('''My long string''');\n//this will show long string\n//this will help for only long strings\n</code></pre>"},{"location":"quick-ref/dart/getting-started/#imports","title":"Imports","text":"<pre><code>// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n</code></pre>"},{"location":"quick-ref/dart/implicit-interfaces/","title":"Implicit Interfaces","text":""},{"location":"quick-ref/dart/implicit-interfaces/#a-basic-interface","title":"A basic interface","text":"<pre><code>// A person. The implicit interface contains greet().\nclass Person {\n  // In the interface, but visible only in this library.\n  final String _name;\n\n  // Not in the interface, since this is a constructor.\n  Person(this._name);\n\n  // In the interface.\n  String greet(String who) =&gt; 'Hello, $who. I am $_name.';\n}\n\n// An implementation of the Person interface.\nclass Impostor implements Person {\n  String get _name =&gt; '';\n\n  String greet(String who) =&gt; 'Hi $who. Do you know who I am?';\n}\n\nString greetBob(Person person) =&gt; person.greet('Bob');\n\nvoid main() {\n  print(greetBob(Person('Kathy'))); // Hello, Bob. I am Kathy.\n  print(greetBob(Impostor())); // Hi Bob. Do you know who I am?\n}\n</code></pre>"},{"location":"quick-ref/dart/implicit-interfaces/#extending-a-class","title":"Extending a class","text":"<pre><code>class Phone {\n\n    void use(){\n        _call();\n        _sendMessage();\n    }\n}\n// Use extends to create a subclass\nclass SmartPhone extends Phone {\n    void use(){\n        // use super to refer to the superclass\n        super.use();\n        _takePhotos();\n        _playGames();\n    }\n}\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/dart/miscellaneous/#null-and-null-aware","title":"Null and Null aware","text":"<pre><code>int x; // The initial value of any object is null\n\n// ?? null aware operator\n\nx ??=6; // ??= assignment operator, which assigns a value of a variable only if that variable is currently null\nprint(x); //Print: 6\n\nx ??=3;\nprint(x); // Print: 6 - result is still 6\n\nprint(null ?? 10); // Prints: 10. Display the value on the left if it's not null else return the value on the right\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#ternary-operator","title":"Ternary Operator","text":"<pre><code>// condition ? exprIfTrue : exprIfFalse\nbool isAvailable;\n\nisAvailable ? orderproduct() : addToFavourite();\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#spread-operator","title":"Spread Operator (...)","text":"<pre><code>// to insert multiple values into a collection.\nvar list = [1, 2, 3];\nvar list2 = [0, ...list];\n\nprint(list2.length); //Print: 4\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#cascade-notation","title":"Cascade notation (..)","text":"<pre><code>// allows you to make a sequence of operations on the same object\n\n// rather than doing this\nvar user = User();\nuser.name = \"Nicola\";\nuser.email = \"nicola@g.c\";\nuser.age = 24;\n\n// you can do this\nvar user = User()\n  ..name = \"Nicola\"\n  ..email = \"nicola@g.c\"\n  ..age = 24;\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#conditional-property-access","title":"Conditional Property Access","text":"<pre><code>userObject?.userName\n\n//The code snippet above is equivalent to following:\n(userObject != null) ? userObject.userName : null\n\n//You can chain multiple uses of ?. together in a single expression\nuserObject?.userName?.toString()\n\n// The preceeding code returns null and never calls toString() if either userObject or userObject.userName is null\n</code></pre>"},{"location":"quick-ref/dart/miscellaneous/#enum-in-dart","title":"enum in dart","text":"<pre><code>defination: An enum (short for \"enumeration\") is a special data type that enables a variable to be a set of predefined constants. Enums are used to define variables that can only take one out of a small set of possible values. They help make code more readable and less error-prone by providing meaningful names to these sets of values.\n\n// Define the enum\nenum TrafficLight {\n  red,\n  yellow,\n  green\n}\n\n// A function that prints a message based on the traffic light state\nvoid printTrafficLightMessage(TrafficLight light) {\n  switch (light) {\n    case TrafficLight.red:\n      print('Stop!');\n      break;\n    case TrafficLight.yellow:\n      print('Get ready...');\n      break;\n    case TrafficLight.green:\n      print('Go!');\n      break;\n  }\n}\n\nvoid main() {\n  // Example usage of the enum\n  TrafficLight currentLight = TrafficLight.green;\n\n  // Print the message for the current traffic light state\n  printTrafficLightMessage(currentLight);\n}\n</code></pre>"},{"location":"quick-ref/dart/operators/","title":"Operators","text":""},{"location":"quick-ref/dart/operators/#arithmetic-operators","title":"Arithmetic Operators","text":"<pre><code>print(2 + 3); //Print: 5\nprint(2 - 3); //Print: -1\nprint(2 * 3); //Print: 6\nprint(5 / 2);  //Print: 2.5 - Result is a double\nprint(5 ~/ 2); //Print: 2 - Result is an int\nprint(5 % 2); //Print: 1 - Remainder\n\nint a = 1, b;\n// Increment\nb = ++a; // preIncrement - Increment a before b gets its value.\nb = a++; // postIncrement - Increment a AFTER b gets its value.\n\n//Decrement\nb = --a; // predecrement - Decrement a before b gets its value.\nb = a--; // postdecrement - Decrement a AFTER b gets its value.\n</code></pre>"},{"location":"quick-ref/dart/operators/#equality-and-relational-operators","title":"Equality and relational operators","text":"<pre><code>print(2 == 2);  //Print: true - Equal\nprint(2 != 3); //Print: true - Not  Equal\nprint(3 &gt; 2); //Print: true - Grater than\nprint(2 &lt; 3); //Print: true - Less than\nprint(3 &gt;= 3); //Print: true - Greater than or equal to\nprint(2 &lt;= 3); //Print: true - Less than or equal to\n</code></pre>"},{"location":"quick-ref/dart/operators/#logical-operators","title":"Logical operators","text":"<pre><code>// !expr inverts the expression (changes false to true, and vice versa)\n// || logical OR\n// &amp;&amp; logical AND\nbool isOutOfStock = false;\nint quantity = 3;\nif (!isOutOfStock &amp;&amp; (quantity == 2 || quantity == 3)) {\n  // ...Order the product...\n}\n</code></pre>"},{"location":"quick-ref/python/","title":"Python","text":"<p>Abstract</p> <p>A concise and practical Python cheat sheet covering key syntax, core concepts, and useful features for quick reference.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Built-in Data Types</li> <li>Advanced Data Types</li> <li>Strings</li> <li>F-Strings</li> <li>Lists</li> <li>Flow Control</li> <li>Loops</li> <li>Functions</li> <li>Modules</li> <li>File Handling</li> <li>Classes and Inheritance</li> <li>Type Hints</li> <li>Operators</li> <li>Miscellaneous</li> </ul>","tags":["script","interpret"]},{"location":"quick-ref/python/advanced-data-types/","title":"Advanced Data Types","text":""},{"location":"quick-ref/python/advanced-data-types/#heaps","title":"Heaps","text":"<pre><code>import heapq\n\nmyList = [9, 5, 4, 1, 3, 2]\nheapq.heapify(myList) # turn myList into a Min Heap\nprint(myList)    # =&gt; [1, 3, 2, 5, 9, 4]\nprint(myList[0]) # first value is always the smallest in the heap\n\nheapq.heappush(myList, 10) # insert 10\nx = heapq.heappop(myList)  # pop and return smallest item\nprint(x)                   # =&gt; 1\n</code></pre>"},{"location":"quick-ref/python/advanced-data-types/#negate-all-values-to-use-min-heap-as-max-heap","title":"Negate all values to use Min Heap as Max Heap","text":"<pre><code>myList = [9, 5, 4, 1, 3, 2]\nmyList = [-val for val in myList] # multiply by -1 to negate\nheapq.heapify(myList)\n\nx = heapq.heappop(myList)\nprint(-x) # =&gt; 9 (making sure to multiply by -1 again)\n</code></pre> <p>Heaps are binary trees for which every parent node has a value less than or equal to any of its children. Useful for accessing min/max value quickly. Time complexity: O(n) for heapify, O(log n) push and pop. See: Heapq</p>"},{"location":"quick-ref/python/advanced-data-types/#stacks-and-queues","title":"Stacks and Queues","text":"<pre><code>from collections import deque\n\nq = deque()          # empty\nq = deque([1, 2, 3]) # with values\n\nq.append(4)     # append to right side\nq.appendleft(0) # append to left side\nprint(q)    # =&gt; deque([0, 1, 2, 3, 4])\n\nx = q.pop() # remove &amp; return from right\ny = q.popleft() # remove &amp; return from left\nprint(x)    # =&gt; 4\nprint(y)    # =&gt; 0\nprint(q)    # =&gt; deque([1, 2, 3])\n\nq.rotate(1) # rotate 1 step to the right\nprint(q)    # =&gt; deque([3, 1, 2])\n</code></pre> <p>Deque is a double-ended queue with O(1) time for append/pop operations from both sides. Used as stacks and queues. See: Deque</p>"},{"location":"quick-ref/python/built-in-data-types/","title":"Built-in Data Types","text":""},{"location":"quick-ref/python/built-in-data-types/#strings","title":"Strings","text":"<pre><code>hello = \"Hello World\"\nhello = 'Hello World'\n\nmulti_string = \"\"\"Multiline Strings\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit \"\"\"\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#numbers","title":"Numbers","text":"<pre><code>x = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\n&gt;&gt;&gt; print(type(x))\n&lt;class 'int'&gt;\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#booleans","title":"Booleans","text":"<pre><code>my_bool = True\nmy_bool = False\n\nbool(0)     # =&gt; False\nbool(1)     # =&gt; True\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#lists","title":"Lists","text":"<pre><code>list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [True, False, False]\nlist3 = [1, 5, 7, 9, 3]\nlist4 = list((1, 5, 7, 9, 3))\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#tuple","title":"Tuple","text":"<pre><code>my_tuple = (1, 2, 3)\nmy_tuple = tuple((1, 2, 3))\n</code></pre> <p>Similar to List but immutable</p>"},{"location":"quick-ref/python/built-in-data-types/#set","title":"Set","text":"<pre><code>set1 = {\"a\", \"b\", \"c\"}\nset2 = set((\"a\", \"b\", \"c\"))\n</code></pre> <p>Set of unique items/objects</p>"},{"location":"quick-ref/python/built-in-data-types/#dictionary","title":"Dictionary","text":"<pre><code>&gt;&gt;&gt; empty_dict = {}\n&gt;&gt;&gt; a = {\"one\": 1, \"two\": 2, \"three\": 3}\n&gt;&gt;&gt; a[\"one\"]\n1\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three'])\n&gt;&gt;&gt; a.values()\ndict_values([1, 2, 3])\n&gt;&gt;&gt; a.update({\"four\": 4})\n&gt;&gt;&gt; a.keys()\ndict_keys(['one', 'two', 'three', 'four'])\n&gt;&gt;&gt; a['four']\n4\n</code></pre> <p>Key: Value pair, JSON like object</p>"},{"location":"quick-ref/python/built-in-data-types/#casting","title":"Casting","text":""},{"location":"quick-ref/python/built-in-data-types/#integers","title":"Integers","text":"<pre><code>x = int(1)   # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#floats","title":"Floats","text":"<pre><code>x = float(1)     # x will be 1.0\ny = float(2.8)   # y will be 2.8\nz = float(\"3\")   # z will be 3.0\nw = float(\"4.2\") # w will be 4.2\n</code></pre>"},{"location":"quick-ref/python/built-in-data-types/#strings_1","title":"Strings","text":"<pre><code>x = str(\"s1\") # x will be 's1'\ny = str(2)    # y will be '2'\nz = str(3.0)  # z will be '3.0'\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/","title":"Classes and Inheritance","text":""},{"location":"quick-ref/python/classes-and-inheritance/#defining","title":"Defining","text":"<pre><code>class MyNewClass:\n    pass\n\n# Class Instantiation\nmy = MyNewClass()\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#constructors","title":"Constructors","text":"<pre><code>class Animal:\n    def __init__(self, voice):\n        self.voice = voice\n\ncat = Animal('Meow')\nprint(cat.voice)    # =&gt; Meow\n\ndog = Animal('Woof')\nprint(dog.voice)    # =&gt; Woof\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#method","title":"Method","text":"<pre><code>class Dog:\n\n    # Method of the class\n    def bark(self):\n        print(\"Ham-Ham\")\n\ncharlie = Dog()\ncharlie.bark()   # =&gt; \"Ham-Ham\"\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#class-variables","title":"Class Variables","text":"<pre><code>class MyClass:\n    class_variable = \"A class variable!\"\n\n# =&gt; A class variable!\nprint(MyClass.class_variable)\n\nx = MyClass()\n\n# =&gt; A class variable!\nprint(x.class_variable)\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#super-function","title":"Super() Function","text":"<pre><code>class ParentClass:\n    def print_test(self):\n        print(\"Parent Method\")\n\nclass ChildClass(ParentClass):\n    def print_test(self):\n        print(\"Child Method\")\n        # Calls the parent's print_test()\n        super().print_test()\n</code></pre> <pre><code>&gt;&gt;&gt; child_instance = ChildClass()\n&gt;&gt;&gt; child_instance.print_test()\nChild Method\nParent Method\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#repr-method","title":"repr() method","text":"<pre><code>class Employee:\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return self.name\n\njohn = Employee('John')\nprint(john)  # =&gt; John\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#user-defined-exceptions","title":"User-defined exceptions","text":"<pre><code>class CustomError(Exception):\n    pass\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#polymorphism","title":"Polymorphism","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print('A')\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print('B')\n\nobj_A = ParentClass()\nobj_B = ChildClass()\n\nobj_A.print_self() # =&gt; A\nobj_B.print_self() # =&gt; B\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#overriding","title":"Overriding","text":"<pre><code>class ParentClass:\n    def print_self(self):\n        print(\"Parent\")\n\nclass ChildClass(ParentClass):\n    def print_self(self):\n        print(\"Child\")\n\nchild_instance = ChildClass()\nchild_instance.print_self() # =&gt; Child\n</code></pre>"},{"location":"quick-ref/python/classes-and-inheritance/#inheritance","title":"Inheritance","text":"<pre><code>class Animal:\n    def __init__(self, name, legs):\n        self.name = name\n        self.legs = legs\n\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\n\nYoki = Dog(\"Yoki\", 4)\nprint(Yoki.name) # =&gt; YOKI\nprint(Yoki.legs) # =&gt; 4\nYoki.sound()     # =&gt; Woof!\n</code></pre>"},{"location":"quick-ref/python/f-strings/","title":"F-Strings","text":""},{"location":"quick-ref/python/f-strings/#f-strings-usage","title":"f-Strings usage","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n\n&gt;&gt;&gt; f\"\"\"He said {\"I'm John\"}\"\"\"\n\"He said I'm John\"\n\n&gt;&gt;&gt; f'5 {\"{stars}\"}'\n'5 {stars}'\n&gt;&gt;&gt; f'5 {\"stars\"}'\n'{5} stars'\n\n&gt;&gt;&gt; name = 'Eric'\n&gt;&gt;&gt; age = 27\n&gt;&gt;&gt; f\"\"\"Hello!\n...     I'm {name}.\n...     I'm {age}.\"\"\"\n\"Hello!\\n    I'm Eric.\\n    I'm 27.\"\n</code></pre> <p>It is available since Python 3.6, also see: Formatted string literals</p>"},{"location":"quick-ref/python/f-strings/#f-strings-fill-align","title":"f-Strings Fill Align","text":"<pre><code>&gt;&gt;&gt; f'{\"text\":10}'     # [width]\n'text      '\n&gt;&gt;&gt; f'{\"test\":*&gt;10}'   # fill left\n'******test'\n&gt;&gt;&gt; f'{\"test\":*&lt;10}'   # fill right\n'test******'\n&gt;&gt;&gt; f'{\"test\":*^10}'   # fill center\n'***test***'\n&gt;&gt;&gt; f'{12345:0&gt;10}'    # fill with numbers\n'0000012345'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-type","title":"f-Strings Type","text":"<pre><code>&gt;&gt;&gt; f'{10:b}'        # binary type\n'1010'\n&gt;&gt;&gt; f'{10:o}'        # octal type\n'12'\n&gt;&gt;&gt; f'{200:x}'       # hexadecimal type\n'c8'\n&gt;&gt;&gt; f'{200:X}'\n'C8'\n&gt;&gt;&gt; f'{345600000000:e}' # scientific notation\n'3.456000e+11'\n&gt;&gt;&gt; f'{65:c}'       # character type\n'A'\n&gt;&gt;&gt; f'{10:#b}'      # [type] with notation (base)\n'0b1010'\n&gt;&gt;&gt; f'{10:#o}'\n'0o12'\n&gt;&gt;&gt; f'{10:#x}'\n'0xa'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-others","title":"F-Strings Others","text":"<pre><code>&gt;&gt;&gt; f'{-12345:0=10}'  # negative numbers\n'-000012345'\n&gt;&gt;&gt; f'{12345:010}'    # [0] shortcut (no align)\n'0000012345'\n&gt;&gt;&gt; f'{-12345:010}'\n'-000012345'\n&gt;&gt;&gt; import math       # [.precision]\n&gt;&gt;&gt; math.pi\n3.141592653589793\n&gt;&gt;&gt; f'{math.pi:.2f}'\n'3.14'\n&gt;&gt;&gt; f'{1000000:,.2f}' # [grouping_option]\n'1,000,000.00'\n&gt;&gt;&gt; f'{1000000:_.2f}'\n'1_000_000.00'\n&gt;&gt;&gt; f'{0.25:0%}'      # percentage\n'25.000000%'\n&gt;&gt;&gt; f'{0.25:.0%}'\n'25%'\n</code></pre>"},{"location":"quick-ref/python/f-strings/#f-strings-sign","title":"F-Strings Sign","text":"<pre><code>&gt;&gt;&gt; f'{12345:+}'      # [sign] (+/-)\n'+12345'\n&gt;&gt;&gt; f'{-12345:+}'\n'-12345'\n&gt;&gt;&gt; f'{-12345:+10}'\n'    -12345'\n&gt;&gt;&gt; f'{-12345:+010}'\n'-000012345'\n</code></pre>"},{"location":"quick-ref/python/file-handling/","title":"File Handling","text":""},{"location":"quick-ref/python/file-handling/#read-file","title":"Read file","text":""},{"location":"quick-ref/python/file-handling/#line-by-line","title":"Line by line","text":"<pre><code>with open(\"myfile.txt\") as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#with-line-number","title":"With line number","text":"<pre><code>file = open('myfile.txt', 'r')\nfor i, line in enumerate(file, start=1):\n    print(\"Number %s: %s\" % (i, line))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#string","title":"String","text":""},{"location":"quick-ref/python/file-handling/#write-a-string","title":"Write a string","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\n    file.write(str(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-a-string","title":"Read a string","text":"<pre><code>with open('myfile1.txt', \"r+\") as file:\n    contents = file.read()\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#object","title":"Object","text":""},{"location":"quick-ref/python/file-handling/#write-an-object","title":"Write an object","text":"<pre><code>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile2.txt\", \"w+\") as file:\n    file.write(json.dumps(contents))\n</code></pre>"},{"location":"quick-ref/python/file-handling/#read-an-object","title":"Read an object","text":"<pre><code>with open('myfile2.txt', \"r+\") as file:\n    contents = json.load(file)\nprint(contents)\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-a-file","title":"Delete a File","text":"<pre><code>import os\nos.remove(\"myfile.txt\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#check-and-delete","title":"Check and Delete","text":"<pre><code>import os\nif os.path.exists(\"myfile.txt\"):\n    os.remove(\"myfile.txt\")\nelse:\n    print(\"The file does not exist\")\n</code></pre>"},{"location":"quick-ref/python/file-handling/#delete-folder","title":"Delete Folder","text":"<pre><code>import os\nos.rmdir(\"myfolder\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/","title":"Flow control","text":""},{"location":"quick-ref/python/flow-control/#basic","title":"Basic","text":"<pre><code>num = 5\nif num &gt; 10:\n    print(\"num is totally bigger than 10.\")\nelif num &lt; 10:\n    print(\"num is smaller than 10.\")\nelse:\n    print(\"num is indeed 10.\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#one-line-ternary-operator","title":"One line (ternary operator)","text":"<pre><code>&gt;&gt;&gt; a = 330\n&gt;&gt;&gt; b = 200\n&gt;&gt;&gt; r = \"a\" if a &gt; b else \"b\"\n&gt;&gt;&gt; print(r)\na\n</code></pre>"},{"location":"quick-ref/python/flow-control/#else-if","title":"else if","text":"<pre><code>value = True\nif not value:\n    print(\"Value is False\")\nelif value is None:\n    print(\"Value is None\")\nelse:\n    print(\"Value is True\")\n</code></pre>"},{"location":"quick-ref/python/flow-control/#match-case","title":"match case","text":"<pre><code>x = 1\nmatch x:\n  case 0:\n    print(\"zero\")\n  case 1:\n    print(\"one\")\n  case _:\n    print(\"multiple\")\n</code></pre>"},{"location":"quick-ref/python/functions/","title":"Functions","text":""},{"location":"quick-ref/python/functions/#basic","title":"Basic","text":"<pre><code>def hello_world():\n    print('Hello, World!')\n</code></pre>"},{"location":"quick-ref/python/functions/#return","title":"Return","text":"<pre><code>def add(x, y):\n    print(\"x is %s, y is %s\" %(x, y))\n    return x + y\n\nadd(5, 6)    # =&gt; 11\n</code></pre>"},{"location":"quick-ref/python/functions/#positional-arguments","title":"Positional arguments","text":"<pre><code>def varargs(*args):\n    return args\n\nvarargs(1, 2, 3)  # =&gt; (1, 2, 3)\n</code></pre> <p>Type of \"args\" is tuple.</p>"},{"location":"quick-ref/python/functions/#keyword-arguments","title":"Keyword arguments","text":"<pre><code>def keyword_args(**kwargs):\n    return kwargs\n\n# =&gt; {\"big\": \"foot\", \"loch\": \"ness\"}\nkeyword_args(big=\"foot\", loch=\"ness\")\n</code></pre> <p>Type of \"kwargs\" is dict.</p>"},{"location":"quick-ref/python/functions/#returning-multiple","title":"Returning multiple","text":"<pre><code>def swap(x, y):\n    return y, x\n\nx = 1\ny = 2\nx, y = swap(x, y)  # =&gt; x = 2, y = 1\n</code></pre>"},{"location":"quick-ref/python/functions/#default-value","title":"Default Value","text":"<pre><code>def add(x, y=10):\n    return x + y\n\nadd(5)      # =&gt; 15\nadd(5, 20)  # =&gt; 25\n</code></pre>"},{"location":"quick-ref/python/functions/#anonymous-functions","title":"Anonymous functions","text":"<pre><code># =&gt; True\n(lambda x: x &gt; 2)(3)\n\n# =&gt; 5\n(lambda x, y: x ** 2 + y ** 2)(2, 1)\n</code></pre>"},{"location":"quick-ref/python/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/python/getting-started/#introduction","title":"Introduction","text":"<ul> <li>Python (python.org)</li> <li>Python Document (docs.python.org)</li> <li>Learn X in Y minutes (learnxinyminutes.com)</li> <li>Regex in python (cheatsheets.zip)</li> </ul>"},{"location":"quick-ref/python/getting-started/#hello-world","title":"Hello World","text":"<pre><code>&gt;&gt;&gt; print(\"Hello, World!\")\nHello, World!\n</code></pre> <p>The famous \"Hello World\" program in Python</p>"},{"location":"quick-ref/python/getting-started/#variables","title":"Variables","text":"<pre><code>age = 18      # age is of type int\nname = \"John\" # name is now of type str\nprint(name)\n</code></pre> <p>Python can't declare a variable without assignment.</p>"},{"location":"quick-ref/python/getting-started/#data-types","title":"Data Types","text":"<code>str</code> Text <code>int</code>, <code>float</code>, <code>complex</code> Numeric <code>list</code>, <code>tuple</code>, <code>range</code> Sequence <code>dict</code> Mapping <code>set</code>, <code>frozenset</code> Set <code>bool</code> Boolean <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code> Binary"},{"location":"quick-ref/python/getting-started/#slicing-string","title":"Slicing String","text":"<pre><code>&gt;&gt;&gt; msg = \"Hello, World!\"\n&gt;&gt;&gt; print(msg[2:5])\nllo\n</code></pre>"},{"location":"quick-ref/python/getting-started/#lists","title":"Lists","text":"<pre><code>mylist = []\nmylist.append(1)\nmylist.append(2)\nfor item in mylist:\n    print(item) # prints out 1,2\n</code></pre>"},{"location":"quick-ref/python/getting-started/#if-else","title":"If Else","text":"<pre><code>num = 200\nif num &gt; 0:\n    print(\"num is greater than 0\")\nelse:\n    print(\"num is not greater than 0\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#loops","title":"Loops","text":"<pre><code>for item in range(6):\n    if item == 3: break\n    print(item)\nelse:\n    print(\"Finally finished!\")\n</code></pre>"},{"location":"quick-ref/python/getting-started/#functions","title":"Functions","text":"<pre><code>&gt;&gt;&gt; def my_function():\n...     print(\"Hello from a function\")\n...\n&gt;&gt;&gt; my_function()\nHello from a function\n</code></pre>"},{"location":"quick-ref/python/getting-started/#file-handling","title":"File Handling","text":"<pre><code>with open(\"myfile.txt\", \"r\", encoding='utf8') as file:\n    for line in file:\n        print(line)\n</code></pre>"},{"location":"quick-ref/python/getting-started/#arithmetic","title":"Arithmetic","text":"<pre><code>result = 10 + 30 # =&gt; 40\nresult = 40 - 10 # =&gt; 30\nresult = 50 * 5  # =&gt; 250\nresult = 16 / 4  # =&gt; 4.0 (Float Division)\nresult = 16 // 4 # =&gt; 4 (Integer Division)\nresult = 25 % 2  # =&gt; 1\nresult = 5 ** 3  # =&gt; 125\n</code></pre> <p>The <code>/</code> means quotient of x and y, and the <code>//</code> means floored quotient of x and y, also see StackOverflow</p>"},{"location":"quick-ref/python/getting-started/#plus-equals","title":"Plus-Equals","text":"<pre><code>counter = 0\ncounter += 10           # =&gt; 10\ncounter = 0\ncounter = counter + 10  # =&gt; 10\n\nmessage = \"Part 1.\"\n\n# =&gt; Part 1.Part 2.\nmessage += \"Part 2.\"\n</code></pre>"},{"location":"quick-ref/python/getting-started/#f-strings-python-36","title":"f-Strings (Python 3.6+)","text":"<pre><code>&gt;&gt;&gt; website = 'cheatsheets.zip'\n&gt;&gt;&gt; f\"Hello, {website}\"\n\"Hello, cheatsheets.zip\"\n\n&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; f'{num} + 10 = {num + 10}'\n'10 + 10 = 20'\n</code></pre>"},{"location":"quick-ref/python/lists/","title":"Lists","text":""},{"location":"quick-ref/python/lists/#defining","title":"Defining","text":"<pre><code>&gt;&gt;&gt; li1 = []\n&gt;&gt;&gt; li1\n[]\n&gt;&gt;&gt; li2 = [4, 5, 6]\n&gt;&gt;&gt; li2\n[4, 5, 6]\n&gt;&gt;&gt; li3 = list((1, 2, 3))\n&gt;&gt;&gt; li3\n[1, 2, 3]\n&gt;&gt;&gt; li4 = list(range(1, 11))\n&gt;&gt;&gt; li4\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"quick-ref/python/lists/#generate","title":"Generate","text":"<pre><code>&gt;&gt;&gt; list(filter(lambda x : x % 2 == 1, range(1, 20)))\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n&gt;&gt;&gt; [x ** 2 for x in range (1, 11) if  x % 2 == 1]\n[1, 9, 25, 49, 81]\n\n&gt;&gt;&gt; [x for x in [3, 4, 5, 6, 7] if x &gt; 5]\n[6, 7]\n\n&gt;&gt;&gt; list(filter(lambda x: x &gt; 5, [3, 4, 5, 6, 7]))\n[6, 7]\n</code></pre>"},{"location":"quick-ref/python/lists/#append","title":"Append","text":"<pre><code>&gt;&gt;&gt; li = []\n&gt;&gt;&gt; li.append(1)\n&gt;&gt;&gt; li\n[1]\n&gt;&gt;&gt; li.append(2)\n&gt;&gt;&gt; li\n[1, 2]\n&gt;&gt;&gt; li.append(4)\n&gt;&gt;&gt; li\n[1, 2, 4]\n&gt;&gt;&gt; li.append(3)\n&gt;&gt;&gt; li\n[1, 2, 4, 3]\n</code></pre>"},{"location":"quick-ref/python/lists/#list-slicing","title":"List Slicing","text":"<p>Syntax of list slicing:</p> <pre><code>a_list[start:end]\na_list[start:end:step]\n</code></pre>"},{"location":"quick-ref/python/lists/#slicing","title":"Slicing","text":"<pre><code>&gt;&gt;&gt; a = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:5]\n['bacon', 'tomato', 'ham']\n&gt;&gt;&gt; a[-5:-2]\n['egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[1:4]\n['egg', 'bacon', 'tomato']\n</code></pre>"},{"location":"quick-ref/python/lists/#omitting-index","title":"Omitting index","text":"<pre><code>&gt;&gt;&gt; a[:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[0:4]\n['spam', 'egg', 'bacon', 'tomato']\n&gt;&gt;&gt; a[2:]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[2:len(a)]\n['bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[:]\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n</code></pre>"},{"location":"quick-ref/python/lists/#with-a-stride","title":"With a stride","text":"<pre><code>['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[0:6:2]\n['spam', 'bacon', 'ham']\n&gt;&gt;&gt; a[1:6:2]\n['egg', 'tomato', 'lobster']\n&gt;&gt;&gt; a[6:0:-2]\n['lobster', 'tomato', 'egg']\n&gt;&gt;&gt; a\n['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n&gt;&gt;&gt; a[::-1]\n['lobster', 'ham', 'tomato', 'bacon', 'egg', 'spam']\n</code></pre>"},{"location":"quick-ref/python/lists/#remove","title":"Remove","text":"<pre><code>&gt;&gt;&gt; li = ['bread', 'butter', 'milk']\n&gt;&gt;&gt; li.pop()\n'milk'\n&gt;&gt;&gt; li\n['bread', 'butter']\n&gt;&gt;&gt; del li[0]\n&gt;&gt;&gt; li\n['butter']\n</code></pre>"},{"location":"quick-ref/python/lists/#access","title":"Access","text":"<pre><code>&gt;&gt;&gt; li = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; li[0]\n'a'\n&gt;&gt;&gt; li[-1]\n'd'\n&gt;&gt;&gt; li[4]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre>"},{"location":"quick-ref/python/lists/#concatenating","title":"Concatenating","text":"<pre><code>&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd.extend([9, 11, 13])\n&gt;&gt;&gt; odd\n[1, 3, 5, 9, 11, 13]\n&gt;&gt;&gt; odd = [1, 3, 5]\n&gt;&gt;&gt; odd + [9, 11, 13]\n[1, 3, 5, 9, 11, 13]\n</code></pre>"},{"location":"quick-ref/python/lists/#sort-reverse","title":"Sort &amp; Reverse","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.sort()\n&gt;&gt;&gt; li\n[1, 2, 3, 3, 5]\n&gt;&gt;&gt; li.reverse()\n&gt;&gt;&gt; li\n[5, 3, 3, 2, 1]\n</code></pre>"},{"location":"quick-ref/python/lists/#count","title":"Count","text":"<pre><code>&gt;&gt;&gt; li = [3, 1, 3, 2, 5]\n&gt;&gt;&gt; li.count(3)\n2\n</code></pre>"},{"location":"quick-ref/python/lists/#repeating","title":"Repeating","text":"<pre><code>&gt;&gt;&gt; li = [\"re\"] * 3\n&gt;&gt;&gt; li\n['re', 're', 're']\n</code></pre>"},{"location":"quick-ref/python/loops/","title":"Loops","text":""},{"location":"quick-ref/python/loops/#basic","title":"Basic","text":"<pre><code>primes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)\n</code></pre> <p>Prints: 2 3 5 7</p>"},{"location":"quick-ref/python/loops/#with-index","title":"With index","text":"<pre><code>animals = [\"dog\", \"cat\", \"mouse\"]\n# enumerate() adds counter to an iterable\nfor i, value in enumerate(animals):\n    print(i, value)\n</code></pre> <p>Prints: 0 dog 1 cat 2 mouse</p>"},{"location":"quick-ref/python/loops/#while","title":"While","text":"<pre><code>x = 0\nwhile x &lt; 4:\n    print(x)\n    x += 1  # Shorthand for x = x + 1\n</code></pre> <p>Prints: 0 1 2 3</p>"},{"location":"quick-ref/python/loops/#break","title":"Break","text":"<pre><code>x = 0\nfor index in range(10):\n    x = index * 10\n    if index == 5:\n     break\n    print(x)\n</code></pre> <p>Prints: 0 10 20 30 40</p>"},{"location":"quick-ref/python/loops/#continue","title":"Continue","text":"<pre><code>for index in range(3, 8):\n    x = index * 10\n    if index == 5:\n     continue\n    print(x)\n</code></pre> <p>Prints: 30 40 60 70</p>"},{"location":"quick-ref/python/loops/#range","title":"Range","text":"<pre><code>for i in range(4):\n    print(i) # Prints: 0 1 2 3\n\nfor i in range(4, 8):\n    print(i) # Prints: 4 5 6 7\n\nfor i in range(4, 10, 2):\n    print(i) # Prints: 4 6 8\n</code></pre>"},{"location":"quick-ref/python/loops/#with-zip","title":"With zip()","text":"<pre><code>words = ['Mon', 'Tue', 'Wed']\nnums = [1, 2, 3]\n# Use zip to pack into a tuple list\nfor w, n in zip(words, nums):\n    print('%d:%s, ' %(n, w))\n</code></pre> <p>Prints: 1:Mon, 2:Tue, 3:Wed,</p>"},{"location":"quick-ref/python/loops/#forelse","title":"for/else","text":"<pre><code>nums = [60, 70, 30, 110, 90]\nfor n in nums:\n    if n &gt; 100:\n        print(\"%d is bigger than 100\" %n)\n        break\nelse:\n    print(\"Not found!\")\n</code></pre> <p>Also see: Python Tips</p>"},{"location":"quick-ref/python/miscellaneous/","title":"Miscellaneous","text":""},{"location":"quick-ref/python/miscellaneous/#comments","title":"Comments","text":"<pre><code># This is a single line comments.\n</code></pre> <pre><code>\"\"\" Multiline strings can be written\n    using three \"s, and are often used\n    as documentation.\n\"\"\"\n</code></pre> <pre><code>''' Multiline strings can be written\n    using three 's, and are often used\n    as documentation.\n'''\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#generators","title":"Generators","text":"<pre><code>def double_numbers(iterable):\n    for i in iterable:\n        yield i + i\n</code></pre> <p>Generators help you make lazy code.</p>"},{"location":"quick-ref/python/miscellaneous/#generator-to-list","title":"Generator to list","text":"<pre><code>values = (-x for x in [1,2,3,4,5])\ngen_to_list = list(values)\n\n# =&gt; [-1, -2, -3, -4, -5]\nprint(gen_to_list)\n</code></pre>"},{"location":"quick-ref/python/miscellaneous/#handle-exceptions","title":"Handle exceptions","text":"<pre><code>try:\n    # Use \"raise\" to raise an error\n    raise IndexError(\"This is an index error\")\nexcept IndexError as e:\n    pass                 # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\n    pass                 # Multiple exceptions can be handled together, if required.\nelse:                    # Optional clause to the try/except block. Must follow all except blocks\n    print(\"All good!\")   # Runs only if the code in try raises no exceptions\nfinally:                 # Execute under all circumstances\n    print(\"We can clean up resources here\")\n</code></pre>"},{"location":"quick-ref/python/modules/","title":"Modules","text":""},{"location":"quick-ref/python/modules/#import-modules","title":"Import modules","text":"<pre><code>import math\nprint(math.sqrt(16))  # =&gt; 4.0\n</code></pre>"},{"location":"quick-ref/python/modules/#from-a-module","title":"From a module","text":"<pre><code>from math import ceil, floor\nprint(ceil(3.7))   # =&gt; 4.0\nprint(floor(3.7))  # =&gt; 3.0\n</code></pre>"},{"location":"quick-ref/python/modules/#import-all","title":"Import all","text":"<pre><code>from math import *\n</code></pre>"},{"location":"quick-ref/python/modules/#shorten-module","title":"Shorten module","text":"<pre><code>import math as m\n\n# =&gt; True\nmath.sqrt(16) == m.sqrt(16)\n</code></pre>"},{"location":"quick-ref/python/modules/#functions-and-attributes","title":"Functions and attributes","text":"<pre><code>import math\ndir(math)\n</code></pre>"},{"location":"quick-ref/python/operators/","title":"Operators","text":""},{"location":"quick-ref/python/operators/#walrus","title":"Walrus","text":"<pre><code>values = [1, \"text\", True, \"\", 2]\ni = 0\n\n# It assigns a value to a variable and compares it in a boolean expression\nwhile (data := values[i]):\n\n    print(data, end=\",\")\n    i = i + 1\n\n# Expected result: 1, \"text\", True\n</code></pre>"},{"location":"quick-ref/python/strings/","title":"Strings","text":""},{"location":"quick-ref/python/strings/#array-like","title":"Array-like","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World\"\n&gt;&gt;&gt; print(hello[1])\ne\n&gt;&gt;&gt; print(hello[-1])\nd\n</code></pre> <p>Get the character at position 1 or last</p>"},{"location":"quick-ref/python/strings/#looping","title":"Looping","text":"<pre><code>&gt;&gt;&gt; for char in \"foo\":\n...     print(char)\nf\no\no\n</code></pre> <p>Loop through the letters in the word \"foo\"</p>"},{"location":"quick-ref/python/strings/#slicing-string","title":"Slicing string","text":"<pre><code> \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\n | m | y | b | a | c | o | n |\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n 0   1   2   3   4   5   6   7\n-7  -6  -5  -4  -3  -2  -1\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[2:5]\n'bac'\n&gt;&gt;&gt; s[0:2]\n'my'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[:2]\n'my'\n&gt;&gt;&gt; s[2:]\n'bacon'\n&gt;&gt;&gt; s[:2] + s[2:]\n'mybacon'\n&gt;&gt;&gt; s[:]\n'mybacon'\n</code></pre> <pre><code>&gt;&gt;&gt; s = 'mybacon'\n&gt;&gt;&gt; s[-5:-1]\n'baco'\n&gt;&gt;&gt; s[2:6]\n'baco'\n</code></pre>"},{"location":"quick-ref/python/strings/#with-a-stride","title":"With a stride","text":"<pre><code>&gt;&gt;&gt; s = '12345' * 5\n&gt;&gt;&gt; s\n'1234512345123451234512345'\n&gt;&gt;&gt; s[::5]\n'11111'\n&gt;&gt;&gt; s[4::5]\n'55555'\n&gt;&gt;&gt; s[::-5]\n'55555'\n&gt;&gt;&gt; s[::-1]\n'5432154321543215432154321'\n</code></pre>"},{"location":"quick-ref/python/strings/#string-length","title":"String Length","text":"<pre><code>&gt;&gt;&gt; hello = \"Hello, World!\"\n&gt;&gt;&gt; print(len(hello))\n13\n</code></pre> <p>The len() function returns the length of a string</p>"},{"location":"quick-ref/python/strings/#multiple-copies","title":"Multiple copies","text":"<pre><code>&gt;&gt;&gt; s = '===+'\n&gt;&gt;&gt; n = 8\n&gt;&gt;&gt; s * n\n'===+===+===+===+===+===+===+===+'\n</code></pre>"},{"location":"quick-ref/python/strings/#check-string","title":"Check String","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; s in 'I saw spamalot!'\nTrue\n&gt;&gt;&gt; s not in 'I saw The Holy Grail!'\nTrue\n</code></pre>"},{"location":"quick-ref/python/strings/#concatenates","title":"Concatenates","text":"<pre><code>&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; t = 'egg'\n&gt;&gt;&gt; s + t\n'spamegg'\n&gt;&gt;&gt; 'spam' 'egg'\n'spamegg'\n</code></pre>"},{"location":"quick-ref/python/strings/#formatting","title":"Formatting","text":"<pre><code>name = \"John\"\nprint(\"Hello, %s!\" % name)\n</code></pre> <pre><code>name = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\n</code></pre>"},{"location":"quick-ref/python/strings/#format-method","title":"format() Method","text":"<pre><code>txt1 = \"My name is {fname}, I'm {age}\".format(fname=\"John\", age=36)\ntxt2 = \"My name is {0}, I'm {1}\".format(\"John\", 36)\ntxt3 = \"My name is {}, I'm {}\".format(\"John\", 36)\n</code></pre>"},{"location":"quick-ref/python/strings/#input","title":"Input","text":"<pre><code>&gt;&gt;&gt; name = input(\"Enter your name: \")\nEnter your name: Tom\n&gt;&gt;&gt; name\n'Tom'\n</code></pre> <p>Get input data from console</p>"},{"location":"quick-ref/python/strings/#join","title":"Join","text":"<pre><code>&gt;&gt;&gt; \"#\".join([\"John\", \"Peter\", \"Vicky\"])\n'John#Peter#Vicky'\n</code></pre>"},{"location":"quick-ref/python/strings/#endswith","title":"Endswith","text":"<pre><code>&gt;&gt;&gt; \"Hello, world!\".endswith(\"!\")\nTrue\n</code></pre>"},{"location":"quick-ref/python/type-hints/","title":"Type Hints","text":"<p><code>Type hints</code> was introduced in <code>Python 3.5</code>, and it is a way to specify the type of a variable or an argument.</p>"},{"location":"quick-ref/python/type-hints/#variable-parameter","title":"Variable &amp; Parameter","text":"<pre><code>string: str = \"ha\"\ntimes: int = 3\n\n\n# wrong hit, but run correctly\nresult: str = 1 + 2\nprint(result)  # =&gt; 3\n\n\ndef say(name: str, start: str = \"Hi\"):\n    return start + \", \" + name\n\nprint(say(\"Python\"))  # =&gt; Hi, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type","title":"Built-in date type","text":"<pre><code>from typing import Dict, Tuple, List\n\nbill: Dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: Tuple[str] = (\"DONE\",)\nsucceeded: Tuple[int, str] = (1, \"SUCCESS\")\nstatuses: Tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: List[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#built-in-date-type-310","title":"Built-in date type (3.10+)","text":"<pre><code>bill: dict[str, float] = {\n    \"apple\": 3.14,\n    \"watermelon\": 15.92,\n    \"pineapple\": 6.53,\n}\ncompleted: tuple[str] = (\"DONE\",)\nsucceeded: tuple[int, str] = (1, \"SUCCESS\")\nstatuses: tuple[str, ...] = (\n    \"DONE\", \"SUCCESS\", \"FAILED\", \"ERROR\",\n)\ncodes: list[int] = (0, 1, -1, -2)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#positional-argument","title":"Positional argument","text":"<pre><code>def calc_summary(*args: int):\n    return sum(args)\n\nprint(calc_summary(3, 1, 4))  # =&gt; 8\n</code></pre> <p>Indicate all arguments' type is int.</p>"},{"location":"quick-ref/python/type-hints/#returned","title":"Returned","text":"<pre><code>def say_hello(name) -&gt; str:\n    return \"Hello, \" + name\n\nvar = \"Python\"\nprint(say_hello(var))  # =&gt; Hello, Python\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned","title":"Union returned","text":"<pre><code>from typing import Union\n\ndef resp200(meaningful) -&gt; Union[int, str]:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Means returned value type may be int or str.</p>"},{"location":"quick-ref/python/type-hints/#keyword-argument","title":"Keyword argument","text":"<pre><code>def calc_summary(**kwargs: int):\n    return sum(kwargs.values())\n\nprint(calc_summary(a=1, b=2))  # =&gt; 3\n</code></pre> <p>Indicate all parameters' value type is int.</p>"},{"location":"quick-ref/python/type-hints/#multiple-returns","title":"Multiple returns","text":"<pre><code>def resp200() -&gt; (int, str):\n    return 200, \"OK\"\n\nreturns = resp200()\nprint(returns)  # =&gt; (200, 'OK')\nprint(type(returns))  # tuple\n</code></pre>"},{"location":"quick-ref/python/type-hints/#union-returned-310","title":"Union returned (3.10+)","text":"<pre><code>def resp200(meaningful) -&gt; int | str:\n    return \"OK\" if meaningful else 200\n</code></pre> <p>Since Python 3.10</p>"},{"location":"quick-ref/python/type-hints/#property","title":"Property","text":"<pre><code>class Employee:\n    name: str\n    age: int\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.graduated: bool = False\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance","title":"Self instance","text":"<pre><code>class Employee:\n    name: str\n\n    def set_name(self, name) -&gt; \"Employee\":\n        self.name = name\n        return self\n\n    def copy(self) -&gt; 'Employee':\n        return type(self)(self.name)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#self-instance-311","title":"Self instance (3.11+)","text":"<pre><code>from typing import Self\n\nclass Employee:\n    name: str\n    age: int\n\n    def set_name(self: Self, name) -&gt; Self:\n        self.name = name\n        return self\n</code></pre>"},{"location":"quick-ref/python/type-hints/#type-generic","title":"Type &amp; Generic","text":"<pre><code>from typing import TypeVar, Type\n\nT = TypeVar(\"T\")\n\n# \"mapper\" is a type, like int, str, MyClass and so on.\n# \"default\" is an instance of type T, such as 314, \"string\", MyClass() and so on.\n# returned is an instance of type T too.\ndef converter(raw, mapper: Type[T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\nraw: str = input(\"Enter an integer: \")\nresult: int = converter(raw, mapper=int, default=0)\n</code></pre>"},{"location":"quick-ref/python/type-hints/#function","title":"Function","text":"<pre><code>from typing import TypeVar, Callable, Any\n\nT = TypeVar(\"T\")\n\ndef converter(raw, mapper: Callable[[Any], T], default: T) -&gt; T:\n    try:\n        return mapper(raw)\n    except:\n        return default\n\n# Callable[[Any], ReturnType] means a function declare like:\n# def func(arg: Any) -&gt; ReturnType:\n#     pass\n\n# Callable[[str, int], ReturnType] means a function declare like:\n# def func(string: str, times: int) -&gt; ReturnType:\n#     pass\n\n# Callable[..., ReturnType] means a function declare like:\n# def func(*args, **kwargs) -&gt; ReturnType:\n#     pass\n\ndef is_success(value) -&gt; bool:\n    return value in (0, \"OK\", True, \"success\")\n\nresp = dict(code=0, message=\"OK\", data=[])\nsuccessed: bool = converter(resp[\"message\"], mapper=is_success, default=False)\n</code></pre>"},{"location":"quick-ref/swift/","title":"Swift","text":"<p>Abstract</p> <p>This cheat sheet provides examples of using Swift that cover basic Swift knowledge, control flow etc.</p> <p>Contents:</p> <ul> <li>Getting Started</li> <li>Variables</li> <li>Conditions</li> <li>Cycle</li> <li>Arrays and Collections</li> <li>Dictionary</li> <li>Function</li> <li>Structure</li> <li>Class</li> <li>Enumerate</li> <li>Extensions</li> <li>Generics</li> <li>Also See</li> </ul>","tags":["Apple","iOS","iPadOS"]},{"location":"quick-ref/swift/also-see/","title":"Also See","text":"<ul> <li>Swift Documentation (Official) (swift.or)</li> <li>Swift Programming Language (Official) (swift.or)</li> <li>One-Stop Quick Reference for Swift Developers (swiftly.dev)</li> </ul>"},{"location":"quick-ref/swift/arrays-and-collections/","title":"Arrays and collections","text":""},{"location":"quick-ref/swift/arrays-and-collections/#array","title":"Array","text":"<pre><code>var scores = [Int]()\n// array is empty: []\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#count-property","title":"<code>.count</code> Property","text":"<pre><code>var grocery = [\"\ud83e\udd53\", \"\ud83e\udd5e\", \"\ud83c\udf6a\", \"\ud83e\udd5b\", \"\ud83c\udf4a\"]\nprint(grocery.count)\n// print: 5\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#index","title":"Index","text":"<p>The index refers to the item's position in the ordered list, and a single element is retrieved from the array using the subscript syntax <code>array[index]</code>.</p> <pre><code>var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nprint(vowels[0]) // prints: a\nprint(vowels[1]) // prints: e\nprint(vowels[2]) // print: i\nprint(vowels[3]) // prints: o\nprint(vowels[4]) // prints: u\n</code></pre> <p>Note: Swift arrays are zero-indexed, meaning the first element has index 0.</p>"},{"location":"quick-ref/swift/arrays-and-collections/#initialize-with-array-literal","title":"Initialize With Array Literal","text":"<pre><code>// use type inference:\nvar snowfall = [2.4, 3.6, 3.4, 1.8, 0.0]\n// explicit type:\nvar temp: [Int] = [33, 31, 30, 38, 44]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#initialize-with-default-value","title":"Initialize With Default Value","text":"<pre><code>var teams = [Int](repeating: 0, count: 3)\nprint(teams) // prints: [0, 0, 0]\n// or with Array type\nvar sizes = Array&lt;Int&gt;(repeating: 0, count: 3)\nprint(sizes) // prints: [0, 0, 0]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#append-method-and-operator","title":"<code>.append()</code> Method and <code>+=</code> Operator","text":"<pre><code>var gymBadges = [\"Boulder\", \"Cascade\"]\ngymBadges.append(\"Thunder\")\ngymBadges += [\"Rainbow\", \"Soul\"]\n// [\"Boulder\", \"Cascade\", \"Thunder\",\n// \"Rainbow\", \"Soul\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#insert-and-remove-methods","title":"<code>.insert()</code> and <code>.remove()</code> Methods","text":"<pre><code>var moon = [\"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\nmoon.insert(\"\ud83c\udf15\", at: 0)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\", \"\ud83c\udf11\"]\n\nmoon.remove(at: 4)\n// [\"\ud83c\udf15\", \"\ud83c\udf16\", \"\ud83c\udf17\", \"\ud83c\udf18\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#iterate-over-an-array","title":"Iterate Over an Array","text":"<pre><code>var employees = [\"Peter\", \"Denial\", \"Jame\"]\nfor person in employees {\n  print(person)\n}\n// print: Peter\n// print: Denial\n// print: Jam\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#collection-set","title":"Collection (Set)","text":"<pre><code>var paintingsInMOMA: Set = [\n  \"The Dream\",\n  \"The Starry Night\",\n  \"The False Mirror\"\n]\n</code></pre> <p>We can use a collection (<code>Set</code>) to store <code>unique</code> elements of the same data type</p>"},{"location":"quick-ref/swift/arrays-and-collections/#empty-collection-set","title":"Empty Collection (Set)","text":"<pre><code>var team = Set&lt;String&gt;()\n\nprint(team)\n// print: []\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#populate-the-collection","title":"Populate the Collection","text":"<pre><code>var vowels: Set = [\"a\", \"e\", \"i\", \"o\",\"u\"]\n</code></pre> <p>To create a set filled with values, use the <code>Set</code> keyword before the assignment operator.</p>"},{"location":"quick-ref/swift/arrays-and-collections/#insert","title":"<code>.insert()</code>","text":"<pre><code>var cookieJar: Set = [\n  \"Chocolate Chip\",\n  \"Oatmeal Raisin\"\n]\n// add a new element\ncookieJar.insert(\"Peanut Butter Chip\")\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#remove-and-removeall-methods","title":"<code>.remove()</code> and <code>.removeAll()</code> Methods","text":"<pre><code>var oddNumbers: Set = [1, 2, 3, 5]\n\n// remove existing element\noddNumbers.remove(2)\n// remove all elements\noddNumbers.removeAll()\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#contains","title":"<code>contains()</code>","text":"<pre><code>var names: Set = [\"Rosa\", \"Doug\", \"Waldo\"]\nprint(names.contains(\"Lola\")) // print: false\n\nif names.contains(\"Waldo\"){\n  print(\"There's Waldo!\")\n} else {\n  print(\"Where's Waldo?\")\n}\n// print: There's Waldo!\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#isempty-property","title":"<code>.isEmpty</code> Property","text":"<pre><code>var emptyList = [String]()\nprint(emptyList.isEmpty)     // print: true\n\nvar populatedList: [Int] = [1, 2, 3]\nprint(populatedList.isEmpty) // print: false\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#iterate-over-a-collection","title":"Iterate Over a Collection","text":"<pre><code>var recipe: Set = [\"Egg\", \"Flour\", \"Sugar\"]\n\nfor ingredient in recipe {\n  print (\"Include \\(ingredient) in the recipe\")\n}\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#isempty-property_1","title":"<code>.isEmpty</code> Property","text":"<pre><code>var emptySet = Set&lt;String&gt;()\nprint(emptySet.isEmpty)     // print: true\n\nvar populatedSet: Set = [1, 2, 3]\nprint(populatedSet.isEmpty) // print: false\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#count-property_1","title":"<code>.count</code> Property","text":"<pre><code>var band: Set = [\"Peter\", \"Denial\", \"Jame\"]\n\nprint(\"The band has \\(band.count) players.\")\n// print: Band has 4 players.\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#intersection-intersection","title":"<code>.intersection()</code> Intersection","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.intersection(setB)\nprint(setC) // print: [\"D\", \"C\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#union","title":"<code>.union()</code>","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.union(setB)\nprint(setC)\n// print: [\"B\", \"A\", \"D\", \"F\", \"C\", \"E\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#symmetricdifference-symmetric-difference","title":"<code>.symmetricDifference()</code> Symmetric Difference","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\", \"E\", \"F\"]\n\nvar setC = setA.symmetricDifference(setB)\nprint(setC)\n// print: [\"B\", \"E\", \"F\", \"A\"]\n</code></pre>"},{"location":"quick-ref/swift/arrays-and-collections/#subtracting-subtraction","title":"<code>.subtracting()</code> Subtraction","text":"<pre><code>var setA: Set = [\"A\", \"B\", \"C\", \"D\"]\nvar setB: Set = [\"C\", \"D\"]\n\nvar setC = setA.subtracting(setB)\nprint(setC)\n// print: [\"B\", \"A\"]\n</code></pre>"},{"location":"quick-ref/swift/class/","title":"Class","text":""},{"location":"quick-ref/swift/class/#reference-type-class","title":"reference type (class)","text":"<pre><code>class Player {\n  var name: String\n\n  init(name: String) {\n    self.name = name\n  }\n}\n\nvar player1 = Player(name: \"Tomoko\")\nvar player2 = player1\nplayer2.name = \"Isabella\"\n\nprint(player1.name) // Isabella\nprint(player2.name) // Isabella\n</code></pre>"},{"location":"quick-ref/swift/class/#instance-of-the-class","title":"instance of the class","text":"<pre><code>class Person {\n  var name = \"\"\n  var age = 0\n}\n\nvar sonny = Person()\n// sonny is now an instance of Person\n</code></pre>"},{"location":"quick-ref/swift/class/#init-method","title":"init() method","text":"<pre><code>class Fruit {\n  var hasSeeds = true\n  var color: String\n\n  init(color: String) {\n    self.color = color\n  }\n}\n</code></pre> <p>Using the Fruit class</p> <pre><code>let apple = Fruit(color: \"red\")\n</code></pre> <p>A class can be initialized using the <code>init()</code> method and the corresponding initialization properties. In the <code>init()</code> method, the <code>self</code> keyword is used to refer to the actual instance of the class assigning property values</p>"},{"location":"quick-ref/swift/class/#class-attributes","title":"Class Attributes","text":"<pre><code>var ferris = Student()\n\nferris.name = \"Ferris Bueller\"\nferris.year = 12\nferris.gpa = 3.81\nferris.honors = false\n</code></pre>"},{"location":"quick-ref/swift/class/#inherit","title":"Inherit","text":"<p>Suppose we have a BankAccount class:</p> <pre><code>class BankAccount {\n  var balance = 0.0\n  func deposit(amount: Double) {\n    balance += amount\n  }\n  func withdraw(amount: Double) {\n    balance -= amount\n  }\n}\n</code></pre> <p><code>SavingsAccount</code> extends <code>BankAccount</code> class</p> <pre><code>class SavingsAccount: BankAccount {\n  var interest = 0.0\n\n  func addInterest() {\n    let interest = balance *0.005\n    self.deposit(amount: interest)\n  }\n}\n</code></pre> <p>The new <code>SavingsAccount</code> class (subclass) automatically gets all the characteristics of the <code>BankAccount</code> class (superclass). Additionally, the <code>SavingsAccount</code> class defines an <code>.interest</code> property and an <code>.addInterest()</code> method.</p>"},{"location":"quick-ref/swift/class/#example","title":"Example","text":"<p>use data type</p> <pre><code>class Student {\n  var name: String\n  var year: Int\n  var gpa: Double\n  var honors: Bool\n}\n</code></pre> <p>Use default property values</p> <pre><code>class Student {\n  var name = \"\"\n  var gpa = 0.0\n  var honors = false\n}\n</code></pre>"},{"location":"quick-ref/swift/class/#this-is-an-example-of-a-struct-definition-and-a-class-definition","title":"This is an example of a struct definition and a class definition","text":"<pre><code>struct Resolution {\n  var width = 0\n  var height = 0\n}\nclass VideoMode {\n  var resolution = Resolution()\n  var interlaced = false\n  var frameRate = 0.0\n  var name: String?\n}\n</code></pre> <p>The <code>Resolution</code> structure definition and the <code>VideoMode</code> class definition only describe the appearance of <code>Resolution</code> or <code>VideoMode</code>, create an instance of the structure or class:</p> <pre><code>let resolution = Resolution(width: 1920)\nlet someVideoMode = VideoMode()\n</code></pre>"},{"location":"quick-ref/swift/conditions/","title":"Conditions","text":""},{"location":"quick-ref/swift/conditions/#if-statement","title":"<code>if</code> statement","text":"<pre><code>var halloween = true\nif halloween {\n  print(\"Trick or treat!\")\n}\n// print: Trick or treat!\nif 5 &gt; 3 {\n  print(\"5 is greater than 3\")\n} else {\n  print(\"5 is not more than 3\")\n}\n// output: \"5 is greater than 3\"\n</code></pre>"},{"location":"quick-ref/swift/conditions/#else-statement","title":"<code>else</code> statement","text":"<pre><code>var turbulence = false\n\nif turbulence {\n  print(\"Please sit down.\")\n} else {\n  print(\"You are free to move around.\")\n}\n// print: You are free to move around.\n</code></pre>"},{"location":"quick-ref/swift/conditions/#else-if-statement","title":"<code>else if</code> statement","text":"<pre><code>var weather = \"rainy\"\nif weather == \"sunny\" {\n  print(\"Get some sunscreen\")\n} else if weather == \"rainy\" {\n  print(\"Take an umbrella\")\n} else if weather == \"snowing\" {\n  print(\"Put on your snow boots\")\n} else {\n  print(\"Invalid weather\")\n}\n// print: take an umbrella\n</code></pre>"},{"location":"quick-ref/swift/conditions/#comparison-operators","title":"Comparison Operators","text":"<pre><code>5 &gt; 1      // true\n6 &lt; 10     // true\n2 &gt;= 3     // false\n3 &lt;= 5     // true\n\"A\" == \"a\" // false\n\"B\" != \"b\" // true\n</code></pre> <p>-<code>&lt;</code> less than  -<code>&gt;</code> greater than  -<code>&lt;=</code> less than or equal to  -<code>&gt;=</code> greater than or equal to  -<code>==</code> is equal to  -<code>!=</code> is not equal to</p>"},{"location":"quick-ref/swift/conditions/#range-operators","title":"Range Operators","text":"<pre><code>a...b      // numbers between a and b (including both a and b)\na..&lt;b      // numbers between a and b (including a but excluding b)\n...b      // numbers till b (including b)\n</code></pre> <p>-<code>a...b</code> Closed Range  -<code>a..&lt;b</code> Half-Open Range  -<code>...b</code> One-Sided Range</p>"},{"location":"quick-ref/swift/conditions/#ternary-conditional-operator","title":"Ternary Conditional Operator","text":"<pre><code>var driverLicense = true\n\ndriverLicense\n    ? print(\"driver seat\") : print(\"passenger seat\")\n// print: driver's seat\n</code></pre>"},{"location":"quick-ref/swift/conditions/#switch-statement","title":"<code>switch</code> statement","text":"<pre><code>var secondaryColor = \"green\"\n\nswitch secondaryColor {\n  case \"orange\":\n    print(\"A mixture of red and yellow\")\n  case \"purple\":\n    print(\"A mix of red and blue\")\n  default:\n    print(\"This may not be a secondary color\")\n}\n// print: mix of blue and yellow\n</code></pre>"},{"location":"quick-ref/swift/conditions/#interval-matching","title":"Interval Matching","text":"<pre><code>let year = 1905\nvar artPeriod: String\n\nswitch year {\n  case 1860...1885:\n    artPeriod = \"Impressionism\"\n  case 1886...1910:\n    artPeriod = \"Post-Impressionism\"\n  default:\n    artPeriod = \"Unknown\"\n}\n// print: post-impressionism\n</code></pre>"},{"location":"quick-ref/swift/conditions/#composite-case","title":"Composite Case","text":"<pre><code>let service = \"Seamless\"\n\nswitch service {\ncase \"Uber\", \"Lyft\":\n    print(\"travel\")\n  case \"DoorDash\", \"Seamless\", \"GrubHub\":\n    print(\"Restaurant delivery\")\n  case \"Instacart\", \"FreshDirect\":\n    print(\"Grocery Delivery\")\n  default:\n    print(\"Unknown service\")\n}\n// print: restaurant takeaway\n</code></pre>"},{"location":"quick-ref/swift/conditions/#where-clause","title":"<code>where</code> Clause","text":"<pre><code>let num = 7\n\nswitch num {\n  case let x where x % 2 == 0:\n    print(\"\\(num) is even\")\n  case let x where x % 2 == 1:\n    print(\"\\(num) odd number\")\n  default:\n    print(\"\\(num) is invalid\")\n}\n\n// print: 7 odd\n</code></pre>"},{"location":"quick-ref/swift/conditions/#logical-operators","title":"Logical Operators","text":"<pre><code>!true  // false\n!false //true\n</code></pre>"},{"location":"quick-ref/swift/conditions/#operators","title":"Operators &amp;&amp;","text":"<pre><code>true &amp;&amp; true   // true\ntrue &amp;&amp; false  // false\nfalse &amp;&amp; true  // false\nfalse &amp;&amp; false // false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#operators_1","title":"operators ||","text":"<pre><code>true || true   // true\ntrue || false  // true\nfalse || true  // true\nfalse || false // false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#combined-logical-operators","title":"Combined Logical Operators","text":"<pre><code>!false &amp;&amp; true || false // true\n</code></pre> <p><code>!false &amp;&amp; true</code> first evaluates and returns <code>true</code> Then, the expression, <code>true</code> || <code>false</code> evaluates and returns the final result <code>true</code></p> <pre><code>false || true &amp;&amp; false // false\n</code></pre> <p><code>true &amp;&amp; false</code> first evaluates to return <code>false</code> Then, the expression, <code>false</code> || <code>false</code> evaluates and returns the final result <code>false</code></p>"},{"location":"quick-ref/swift/conditions/#control-the-order-of-execution","title":"Control the order of execution","text":"<pre><code>// without parentheses:\ntrue || true &amp;&amp; false || false\n//----&gt; true\n\n// with brackets:\n(true || true) &amp;&amp; (false || false)\n//----&gt; false\n</code></pre>"},{"location":"quick-ref/swift/conditions/#simple-guards","title":"Simple guards","text":"<pre><code>func greet(name: String?) {\n  guard let unwrapped = name else {\n    print(\"Hello guest!\")\n    return\n  }\n  print(\"Hello \\(unwrapped)!\")\n}\ngreet(name: \"Asma\") // output: Hello Asma!\ngreet(name: nil)    // output: Hello guest!\n</code></pre>"},{"location":"quick-ref/swift/cycle/","title":"Cycle","text":""},{"location":"quick-ref/swift/cycle/#scope","title":"Scope","text":"<pre><code>let zeroToThree = 0...3\n//zeroToThree: 0, 1, 2, 3\n</code></pre>"},{"location":"quick-ref/swift/cycle/#stride-function","title":"Stride() Function","text":"<pre><code>for oddNum in stride(from: 1, to: 5, by: 2) {\n  print(oddNum)\n}\n// print: 1\n// print: 3\n</code></pre>"},{"location":"quick-ref/swift/cycle/#for-in-loop","title":"For-in Loop","text":"<pre><code>for char in \"hehe\" {\n  print(char)\n}\n// print: h\n// print: e\n// print: h\n// print: e\n</code></pre>"},{"location":"quick-ref/swift/cycle/#continue-keyword","title":"Continue keyword","text":"<pre><code>for num in 0...5 {\n  if num % 2 == 0 {\n    continue\n  }\n  print(num)\n}\n// print: 1\n// print: 3\n// print: 5\n</code></pre> <p>The <code>continue</code> keyword will force the loop to continue for the next iteration</p>"},{"location":"quick-ref/swift/cycle/#break-keyword","title":"Break Keyword","text":"<pre><code>for char in \"supercalifragilistic\" {\nif char == \"c\" {\n    break\n  }\n  print(char)\n}\n// print: s\n// print: u\n// print: p\n// print: e\n// print: r\n</code></pre>"},{"location":"quick-ref/swift/cycle/#use-underscores","title":"Use Underscores","text":"<pre><code>for _ in 1...3 {\n  print(\"Ole\")\n}\n// print: Ole\n// print: Ole\n// print: Ole\n</code></pre>"},{"location":"quick-ref/swift/cycle/#while-loop","title":"While Loop","text":"<pre><code>var counter = 1\nvar stopNum = Int.random(in: 1...10)\n\nwhile counter &lt; stopNum {\n  print(counter)\n  counter += 1\n}\n// loop to print until the stop condition is met\n</code></pre> <p>A <code>while</code> loop accepts a condition and keeps executing its body code while the provided condition is <code>true</code>. If the condition is never false, the loop will keep running and the program will get stuck in an <code>infinite loop</code></p>"},{"location":"quick-ref/swift/dictionary/","title":"Dictionary","text":""},{"location":"quick-ref/swift/dictionary/#base-dictionary","title":"Base Dictionary","text":"<pre><code>var dictionaryName = [\n  \"Key1\": \"Value1\",\n  \"Key2\": \"Value2\",\n  \"Key3\": \"Value3\"\n]\n</code></pre> <p>An <code>unordered</code> collection of pairs of data or key-value pairs</p>"},{"location":"quick-ref/swift/dictionary/#keys","title":"Keys","text":"<pre><code>var fruitStand = [\n  \"Coconuts\": 12,\n  \"Pineapples\": 12,\n  \"Papaya\": 12\n]\n</code></pre> <p>Each <code>key</code> is <code>unique</code> even if they all contain the same <code>value</code></p>"},{"location":"quick-ref/swift/dictionary/#type-consistency","title":"Type Consistency","text":"<pre><code>var numberOfSides = [\n  \"triangle\": 3,\n  \"square\": 4,\n  \"rectangle\": 4\n]\n</code></pre> <p>Contains only <code>String</code> keys and <code>Int</code> values</p>"},{"location":"quick-ref/swift/dictionary/#initialize-and-populate-the-dictionary","title":"Initialize and populate the dictionary","text":"<pre><code>var employeeID = [\n  \"Hamlet\": 1367,\n  \"Horatio\": 8261,\n  \"Ophelia\": 9318\n]\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#initialize-an-empty-dictionary","title":"Initialize an empty dictionary","text":"<pre><code>// initializer syntax:\nvar yearlyFishPopulation = [Int: Int]()\n\n// Empty dictionary literal syntax:\nvar yearlyBirdPopulation: [Int: Int] = [:]\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#add-to-dictionary","title":"add to dictionary","text":"<pre><code>var pronunciation = [\n  \"library\": \"lai\u00b7breh\u00b7ree\",\n  \"apple\": \"a\u00b7pl\"\n]\n// new key: \"programming\", new value: \"prow gra\"\npronunciation[\"programming\"] = \"prow\u00b7gra\"\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#delete-key-value-pair","title":"Delete key-value pair","text":"<pre><code>var bookShelf = [\n  \"Goodnight\": \"Margaret Wise Brown\",\n  \"The BFG\": \"Roald Dahl\",\n  \"Falling Up\": \"Shel Silverstein\",\n  \"No, David!\": \"David Shannon\"\n]\n// remove value by setting key to nil\nbookShelf[\"The BFG\"] = nil\n\n// remove value using .removeValue()\nbookShelf.removeValue(forKey: \"Goodnight\")\n\n// remove all values\nbookShelf.removeAll()\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#modify-the-key-value-pair","title":"Modify the key-value pair","text":"<pre><code>var change = [\n  \"Quarter\": 0.29,\n  \"Dime\": 0.15,\n  \"Nickel\": 0.05\n]\n\n// Change the value using subscript syntax\nchange[\"Quarter\"] = .25\n\n// Change the value using .updateValue()\nchange.updateValue(.10, forKey: \"Dime\")\n</code></pre> <p>To change the value of a key-value pair, use the <code>.updateValue()</code> method or the subscript syntax by appending brackets <code>[ ]</code> with the existing keys within to the name of the dictionary, then adding the assignment operator (<code>=</code>) followed by the modified value</p>"},{"location":"quick-ref/swift/dictionary/#isempty-property","title":".isEmpty property","text":"<pre><code>var bakery = [String:Int]()\n\n// check if the dictionary is empty\nprint(bakery.isEmpty) // prints true\nbakery[\"Cupcakes\"] = 12\n// check if the dictionary is empty\nprint(bakery.isEmpty) // print false\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#count-property","title":".count property","text":"<pre><code>var fruitStand = [\n  \"Apples\": 12,\n  \"Oranges\", 17\n]\nprint(fruitStand.count) // print: 2\n</code></pre>"},{"location":"quick-ref/swift/dictionary/#assigning-values-to-variables","title":"Assigning values to variables","text":"<pre><code>var hex = [\n  \"red\": \"#ff0000\",\n  \"yellow\": \"#ffff00\",\n  \"blue\": \"#0000ff\",\n]\n\nprint(\"Blue hexadecimal code \\(hex[\"blue\"])\")\n// print: blue hex code Optional(\"#0000ff\")\n\nif let redHex = hex[\"red\"] {\n  print(\"red hexadecimal code \\(redHex)\")\n}\n// print: red hex code #ff0000\n</code></pre> <p>Assigning the value of a key-value pair to a variable will return an optional value. To extract values, use the optional expansion</p>"},{"location":"quick-ref/swift/dictionary/#traversing-the-dictionary","title":"Traversing the dictionary","text":"<pre><code>var emojiMeaning = [\n  \"\ud83e\udd14\": \"Thinking Face\",\n  \"\ud83d\ude2a\": \"Sleepy Face\",\n  \"\ud83d\ude35\": \"Dizzy Face\"\n]\n// loop through keys and values\nfor (emoji, meaning) in emojiMeaning {\n  print(\"\\(emoji) is called '\\(meaning)Emoji'\")\n}\n// iterate through keys only\nfor emoji in emojiMeaning.keys {\n  print(emoji)\n}\n// iterate through values only\nfor meaning in emojiMeaning.values {\n  print(meaning)\n}\n</code></pre>"},{"location":"quick-ref/swift/enumerate/","title":"Enumerate","text":""},{"location":"quick-ref/swift/enumerate/#define-the-enumeration","title":"Define the enumeration","text":"<pre><code>enum Day {\n  case monday\n  case tuesday\n  case wednesday\n  case thursday\n  case friday\n  case saturday\n  case sunday\n}\n\nlet casualWorkday: Day = .friday\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#switch-statement","title":"Switch statement","text":"<pre><code>enum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet customerOrder: Dessert = .cake(flavor: \"Red Velvet\")\nswitch customerOrder {\n  case let .cake(flavor):\n    print(\"You ordered a \\(flavor) cake\")\n  case .brownie:\n    print(\"You ordered a chocolate cake\")\n}\n// prints: \"You ordered a red velvet cake\"\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#caseiterable","title":"CaseIterable","text":"<pre><code>enum Season: CaseIterable {\n  case winter\n  case spring\n  case summer\n  case falls\n}\n\nfor season in Season.allCases {\n  print(season)\n}\n</code></pre> <p>Add conformance to the <code>CaseIterable</code> protocol to access the <code>allCases</code> property, which returns an array of all cases of the enumeration</p>"},{"location":"quick-ref/swift/enumerate/#original-value","title":"Original value","text":"<pre><code>enum Beatle: String {\n  case john paul george ringo\n}\n\nprint(\"The Beatles are \\(Beatle.john.rawValue).\")\n// print: The Beatles are john.\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#related-values","title":"Related values","text":"<pre><code>enum Dessert {\n  case cake(flavor: String)\n  case vanillaIceCream(scoops: Int)\n  case brownie\n}\n\nlet order: Dessert = .cake(flavor: \"Red Velvet\")\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#instance-method","title":"instance method","text":"<pre><code>enum Traffic {\n  case light\n  case heavy\n\n  mutating func reportAccident() {\n    self = .heavy\n  }\n}\n\nvar currentTraffic: Traffic = .light\n\ncurrentTraffic.reportAccident()\n// currentTraffic is now .heavy\n</code></pre> <p>Just like classes and structs, enumerations can have instance methods. If an instance method mutates the value of the enum, it needs to be marked <code>mutating</code></p>"},{"location":"quick-ref/swift/enumerate/#initialize-from-primitive-value","title":"Initialize from primitive value","text":"<pre><code>enum Hello: String {\n  case english = \"Hello\"\n  case japanese = \"Hello!\"\n  case emoji = \"\ud83d\udc4b\"\n}\nlet hello1 = Hello(rawValue: \"Hello!\")\nlet hello2 = Hello(rawValue: \"\u041f\u0440\u0438\u0432\u0435\u0442\")\nprint(hello1) // Optional(Hello.japanese)\nprint(hello2) // nil\n</code></pre>"},{"location":"quick-ref/swift/enumerate/#computed-properties","title":"Computed properties","text":"<pre><code>enum ShirtSize: String {\n  case small = \"S\"\n  case medium = \"M\"\n  case large = \"L\"\n  case extraLarge = \"XL\"\n  var description: String {\n    return \"The size of this shirt is \\(self.rawValue)\"\n  }\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/","title":"Extensions","text":""},{"location":"quick-ref/swift/extensions/#what-are-extensions","title":"What are extensions?","text":"<p>Extensions is a way to add new add new functionality to existing classes, structures, enumerations, or protocol types. This includes adding new methods, properties, initializers, and more.</p>"},{"location":"quick-ref/swift/extensions/#why-use-extensions","title":"Why use extensions?","text":"<p>Extensions are particularly useful for organizing and modularizing our code without needing to modify the original type, especially when we don't have access to the original source code.</p>"},{"location":"quick-ref/swift/extensions/#extension-syntax","title":"Extension syntax","text":"<pre><code>extension SomeType {\n    // New functionalities to be added\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/#computed-properties","title":"Computed properties","text":"<pre><code>extension Int {\n    var isEven: Bool {\n        self % 2 == 0\n    }\n}\n\nprint(4.isEven) // Outputs: true\nprint(7.isEven) // Outputs: false\n</code></pre>"},{"location":"quick-ref/swift/extensions/#methods","title":"Methods","text":"<pre><code>extension String {\n    func reverse() -&gt; String {\n        String(self.reversed())\n    }\n}\n\nprint(\"abc\".reverse()) // Output: cba\n</code></pre>"},{"location":"quick-ref/swift/extensions/#mutating-methods","title":"Mutating methods","text":"<pre><code>extension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\n\nvar number = 5\nnumber.square()\nprint(number) // Output: 25\n</code></pre>"},{"location":"quick-ref/swift/extensions/#initializers","title":"Initializers","text":"<pre><code>extension Date {\n    init?(timestamp: Double) {\n        self.init(timeIntervalSince1970: timestamp)\n    }\n}\n\nlet timestamp = 1693982400.0 // Unix timestamp for 2023-09-06 06:40:00\nif let date = Date(timestamp: timestamp) {\n    print(date) // Output: 2023-09-06 06:40:00 +0000\n}\n</code></pre>"},{"location":"quick-ref/swift/extensions/#subscripts","title":"Subscripts","text":"<pre><code>extension String {\n    subscript(index: Int) -&gt; Character {\n        self[self.index(startIndex, offsetBy: index)]\n    }\n}\n\nprint(\"Swift\"[0]) // Output: S\nprint(\"Swift\"[1]) // Output: w\nprint(\"Swift\"[2]) // Output: i\nprint(\"Swift\"[3]) // Output: f\nprint(\"Swift\"[4]) // Output: t\n</code></pre>"},{"location":"quick-ref/swift/extensions/#protocol-extensions","title":"Protocol extensions","text":"<p>It works pretty much like abstract classes when regarding a functionality we want to be available in all the classes that implements some protocol (without having to inherit from a base common class).</p> <pre><code>// Define a protocol\nprotocol Describable {\n    func describe() -&gt; String\n}\n\n// Provide a default implementation using a protocol extension\nextension Describable {\n    func describe() -&gt; String {\n        \"This is a generic description\"\n    }\n}\n\n// Define a struct that conforms Describable protocol\nstruct Person: Describable {\n    var name: String\n    var age: Int\n\n    // Overriding the default implementation\n    func describe() -&gt; String {\n        \"My name is \\(name) and I am \\(age) years old.\"\n    }\n}\n\nstruct Employee: Describable {\n    var name: String\n    var age: Int\n\n    // Using the default implementation\n}\n\n// By just implementing the protocol the describe() method is available\n\nlet person = Person(name: \"Ivan\", age: 21)\nlet employee = Employee(name: \"Saul\", age: 25)\n\nprint(person.describe()) // Output: My name is Ivan and I am 21 years old.\nprint(employee.describe()) // Output: This is a generic description\n</code></pre>"},{"location":"quick-ref/swift/extensions/#constraints-for-extensions","title":"Constraints for extensions","text":"<p>This is especially useful when we want to add functionality to a type that conforms to a specific protocol or has certain conditions.</p> <pre><code>extension Array where Element: Numeric {\n    func sum() -&gt; Element {\n        reduce(0, +)\n    }\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(numbers.sum()) // Output: 15\n\nlet doubles = [1.5, 2.5, 3.5]\nprint(doubles.sum()) // Output: 7.5\n\n// This will not work because String is not Numeric\n// let strings = [\"a\", \"b\", \"c\"]\n// print(strings.sum()) // Error: Cannot invoke 'sum' with an array of strings\n</code></pre>"},{"location":"quick-ref/swift/extensions/#organizing-code-with-extensions","title":"Organizing code with extensions","text":"<p>Extensions are not limited to adding functionality; they are also handy for code organization. We can group related methods, properties or views in separate extensions.</p> <pre><code>import SwiftUI\n\nstruct HomeView: View {\n    var body: some View {\n        ScrollView {\n            header\n            // Add other views\n        }\n    }\n}\n\nextension HomeView {\n    private var header: some View {\n        Text(\"Header ...\")\n    }\n}\n\n#Preview {\n    HomeView()\n}\n</code></pre>"},{"location":"quick-ref/swift/function/","title":"Function","text":""},{"location":"quick-ref/swift/function/#basic-functions","title":"Basic functions","text":"<pre><code>func washCar() -&gt; Void {\n  print(\"Soap\")\n  print(\"Scrub\")\n  print(\"Rinse\")\n  print(\"Dry\")\n}\n</code></pre>"},{"location":"quick-ref/swift/function/#call-functions","title":"Call functions","text":"<pre><code>func greetLearner() {\n print(\"Welcome to CheatSheets.zip!\")\n}\n// function call:\ngreetLearner()\n// print: Welcome to CheatSheets.zip!\n</code></pre>"},{"location":"quick-ref/swift/function/#return-value","title":"return value","text":"<pre><code>let birthYear = 1994\nvar currentYear = 2020\n\nfunc findAge() -&gt; Int {\n  return currentYear-birthYear\n}\n\nprint(findAge()) // prints: 26\n</code></pre>"},{"location":"quick-ref/swift/function/#multiple-parameters","title":"Multiple parameters","text":"<pre><code>func convertFracToDec(numerator: Double, denominator: Double) -&gt; Double {\n  return numerator / denominator\n}\n\nlet decimal = convertFracToDec(numerator: 1.0, denominator: 2.0)\nprint(decimal) // prints: 0.5\n</code></pre>"},{"location":"quick-ref/swift/function/#omit-parameter-labels","title":"Omit parameter labels","text":"<pre><code>func findDiff(_ a: Int, b: Int) -&gt; Int {\n  return a -b\n}\n\nprint(findDiff(6, b: 4)) // prints: 2\n</code></pre>"},{"location":"quick-ref/swift/function/#return-multiple-values","title":"return multiple values","text":"<pre><code>func smartphoneModel() -&gt; (name: String, version: String, yearReleased: Int) {\n  return (\"iPhone\", \"8 Plus\", 2017)\n}\nlet phone = smartphoneModel()\n\nprint(phone.name)         // print: iPhone\nprint(phone.version)      // print: 8 Plus\nprint(phone.yearReleased) // print: 2017\n</code></pre>"},{"location":"quick-ref/swift/function/#parameters-arguments","title":"Parameters &amp; Arguments","text":"<pre><code>func findSquarePerimet(side: Int) -&gt; Int {\n  return side *4\n}\n\nlet perimeter = findSquarePerimet(side: 5)\nprint(perimeter) // print: 20\n\n// Parameter: side\n// Argument: 5\n</code></pre>"},{"location":"quick-ref/swift/function/#implicit-return","title":"Implicit return","text":"<pre><code>func nextTotalSolarEclipse() -&gt; String {\n  \"April 8th, 2024 \ud83c\udf0e\"\n}\n\nprint(nextTotalSolarEclipse())\n// print: April 8th, 2024 \ud83c\udf0e\n</code></pre>"},{"location":"quick-ref/swift/function/#default-parameters","title":"Default parameters","text":"<pre><code>func greet(person: String = \"guest\") {\n  print(\"Hello \\(person)\")\n}\ngreet() // Hello guest\ngreet(person: \"Aliya\") // Hello Aliya\n</code></pre>"},{"location":"quick-ref/swift/function/#input-and-output-parameters","title":"Input and output parameters","text":"<pre><code>var currentSeason = \"Winter\"\n\nfunc season(month: Int, name: inout String) {\n  switch month {\n    case 1...2:\n      name = \"Winter \u26c4\ufe0f\"\n    case 3...6:\n      name = \"Spring \ud83c\udf31\"\n    case 7...9:\n      name = \"Summer \u26f1\"\n    case 10...11:\n      name = \"Autumn \ud83c\udf42\"\n    default:\n      name = \"Unknown\"\n  }\n}\nseason(month: 4, name: &amp;currentSeason)\n\nprint(currentSeason) // Spring \ud83c\udf31\n</code></pre>"},{"location":"quick-ref/swift/function/#variable-parameter","title":"variable parameter","text":"<pre><code>func totalStudent(data: String...) -&gt; Int {\n  let numStudents = data.count\n  return numStudents\n}\n\nprint(totalStudent(data: \"Denial\", \"Peter\"))\n// print: 2\n</code></pre>"},{"location":"quick-ref/swift/function/#optional-parameters","title":"Optional parameters","text":"<pre><code>func getFirstInitial(from name: String?) -&gt; String? {\n  return name?.first\n}\n</code></pre> <p>Functions can accept optional types and return optional types. When a function cannot return a reasonable instance of the requested type, it should return <code>nil</code></p>"},{"location":"quick-ref/swift/generics/","title":"Generics","text":""},{"location":"quick-ref/swift/generics/#what-are-generics","title":"What are generics?","text":"<p>Generics in Swift are a feature that allows us to create functions, classes, structures, and protocols that can work with any data type.</p>"},{"location":"quick-ref/swift/generics/#why-use-generics","title":"Why use generics?","text":"<p>Generics enable us to write clear and concise code that works with any data type. By using placeholders (like <code>T</code>), this reduces the risk of introducing bugs.</p>"},{"location":"quick-ref/swift/generics/#type-parameters","title":"Type parameters","text":"<pre><code>func foo&lt;T, U&gt;(a: T, b: U) {\n  // ...\n}\n\nstruct Foo&lt;T, U&gt; {\n  var a: T\n  // ...\n}\n</code></pre> <p>The placeholders <code>T</code> is an example of a type parameter, are written inside angle brackets(such as <code>&lt;T&gt;</code>).</p>"},{"location":"quick-ref/swift/generics/#generic-data-structures","title":"Generic Data Structures","text":"<pre><code>struct Box&lt;T&gt; {\n    var value: T\n}\nlet intBox = Box(value: 10)\nlet stringBox = Box(value: \"Hello\")\n\nprint(intBox.value) // Output: 10\nprint(stringBox.value) // Output: \"Hello\"\n</code></pre>"},{"location":"quick-ref/swift/generics/#generic-functions","title":"Generic Functions","text":"<pre><code>func swapValues&lt;T&gt;(_ a: inout T, _ b: inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\nvar a = 10\nvar b = 20\nswapValues(&amp;a, &amp;b)\nprint(a) // Output: 20\nprint(b) // Output: 10\n\nvar c = \"Hello\"\nvar d = \"World\"\nswapValues(&amp;c, &amp;d)\nprint(c) // Output: \"World\"\nprint(d) // Output: \"Hello\"\n</code></pre>"},{"location":"quick-ref/swift/generics/#constraints-on-generics","title":"Constraints on Generics","text":"<pre><code>func sum&lt;T: Numeric&gt;(_ array: [T]) -&gt; T {\n    array.reduce(0, +)\n}\n\nprint(sum([1, 1.5, 2])) // Output: 4.5\n\n// This will not work because String is not Numeric\n// print(sum([\"a\", \"b\", \"c\"]))\n// Error: function 'sum' requires that 'String' conform to 'Numeric'\n</code></pre>"},{"location":"quick-ref/swift/generics/#associated-types","title":"Associated Types","text":"<pre><code>protocol Foo {\n    associatedtype T\n    func foo() -&gt; T\n}\n</code></pre> <p>Associated types are used in protocols to define a placeholder for a type that will be specified later. They act as a generic placeholder. The exact type isn't defined in the protocol itself; instead, it's determined when a class, struct, or enum conforms to the protocol.</p>"},{"location":"quick-ref/swift/generics/#generic-protocols","title":"Generic Protocols","text":"<pre><code>protocol Storage {\n    associatedtype Item\n    func store(item: Item)\n    func retrieve() -&gt; Item?\n}\n\nclass SimpleStorage&lt;T&gt;: Storage {\n    private var items: [T] = []\n\n    func store(item: T) {\n        items.append(item)\n    }\n\n    func retrieve() -&gt; T? {\n        return items.isEmpty ? nil : items.removeLast()\n    }\n}\n\nlet intStorage = SimpleStorage&lt;Int&gt;()\nintStorage.store(item: 42)\nprint(intStorage.retrieve() ?? \"Empty\")  // Output: 42\n</code></pre>"},{"location":"quick-ref/swift/generics/#generic-typealiases","title":"Generic Typealiases","text":"<p>Generic typealiases allow us to create a new name for an existing type (i.e., they would not introduce a new type).</p> <pre><code>typealias StringDictionary&lt;T&gt; = [String: T]\ntypealias IntFunction&lt;T&gt; = (Int) -&gt; Int\ntypealias Vector&lt;T&gt; = (T, T, T)\n</code></pre>"},{"location":"quick-ref/swift/getting-started/","title":"Getting Started","text":""},{"location":"quick-ref/swift/getting-started/#variable","title":"Variable","text":"<pre><code>var score = 0  // Variable\nlet pi = 3.14  // Constant\n\nvar greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n\nvar numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// prints \"9\"\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#type-annotations","title":"Type Annotations","text":"<pre><code>var greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\nvar price: Double = 8.99\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> Add</li> <li><code>-</code> Subtraction</li> <li><code>*</code> Multiplication</li> <li><code>/</code> Division</li> <li><code>%</code> Remainder</li> </ul> <pre><code>var x = 0\nx = 4 + 2 // x is now 6\nx = 4 - 2 // x is now 2\nx = 4 * 2 // x is now 8\nx = 4 / 2 // x is now 2\nx = 4 % 2 // x is now 0\n</code></pre> <ul> <li><code>+=</code> Adds and assigns sums</li> <li><code>-=</code> subtract and assign the difference</li> <li><code>*=</code> Multiplication and assignment</li> <li><code>/=</code> Divide and assign quotient</li> <li><code>%=</code> Divide and assign remainder</li> </ul>"},{"location":"quick-ref/swift/getting-started/#compound-assignment-operators","title":"Compound Assignment Operators","text":"<pre><code>var numberOfDogs = 100\nnumberOfDogs += 1\nprint(\"There are \\(numberOfDogs) Dalmatians!\")\n\n// print: There are 101 Dalmatians!\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#string-interpolation","title":"String Interpolation","text":"<pre><code>var apples = 6\nprint(\"I have \\(apples) apples!\")\n\n// print: I have 6 apples!\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#multi-line-string","title":"Multi-line String","text":"<pre><code>let myLongString = \"\"\"\nSwift?\nThis is my favorite language!\nYeah!\n\"\"\"\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#code-comments","title":"Code Comments","text":"<pre><code>// This line represents a comment in Swift.\n\n/*\nThis is all commented out.\nNone will run!\n*/\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#form-a-tuple","title":"Form a Tuple","text":"<pre><code>let player = (\"Maya\", 5, 150)\n\nprint(player) // (\"Maya\", 5, 150)\nprint(\"\\(player.0): level \\(player.1), \\(player.2) pts\") // Maya: level 5, 150 pts\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#decompose-tuple","title":"Decompose Tuple","text":"<pre><code>let player = (name: \"Maya\", level: 5)\nlet (currentName, curLevel) = player\nprint(\"\\(currentName): level \\(curLevel)\")\n// print: Maya: level 5\n</code></pre>"},{"location":"quick-ref/swift/getting-started/#special-comment-syntax","title":"Special Comment Syntax","text":""},{"location":"quick-ref/swift/getting-started/#mark","title":"MARK","text":"<pre><code>// MARK: -view settings\n</code></pre> <p><code>MARK</code> can be used to display comments in the column</p>"},{"location":"quick-ref/swift/getting-started/#todo","title":"TODO","text":"<pre><code>// TODO: update logic to accommodate data changes\n</code></pre> <p><code>TODO</code> is used to display reminders of things that need to be done</p>"},{"location":"quick-ref/swift/getting-started/#fixme","title":"FIXME","text":"<pre><code>// FIXME: Fix buggy behavior when making changes to existing entries\n</code></pre> <p><code>FIXME</code> is used to display reminders about things that need to be fixed</p>"},{"location":"quick-ref/swift/structure/","title":"Structure","text":""},{"location":"quick-ref/swift/structure/#structure-creation","title":"Structure Creation","text":"<pre><code>struct Building {\n  var address: String\n  var floors: Int\n  init(address: String, floors: Int) {\n    self.address = address\n    self.floors = floors\n  }\n}\n</code></pre> <p>Structs or structs are used to programmatically represent real-life objects in code. A structure is created using the <code>struct</code> keyword, followed by its name, followed by a body containing its properties and methods</p>"},{"location":"quick-ref/swift/structure/#default-property-values","title":"Default property values","text":"<pre><code>struct Car {\n  var numOfWheels = 4\n  var topSpeed = 80\n}\n\nvar reliantRobin = Car(numOfWheels: 3)\n\nprint(reliantRobin.numOfWheels) // prints: 3\nprint(reliantRobin.topSpeed)    // print: 80\n</code></pre>"},{"location":"quick-ref/swift/structure/#structural-instance-creation","title":"Structural instance creation","text":"<pre><code>struct Person {\n  var name: String\n  var age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\n// Person instance:\nvar morty = Person(name: \"Peter\", age: 14)\n</code></pre>"},{"location":"quick-ref/swift/structure/#init-method","title":"init() method","text":"<pre><code>struct TV {\n  var size: Int\n  var type: String\n\n  init(size: Int, type: String) {\n    self.size = size\n    self.type = type\n  }\n}\n</code></pre> <p>Using the <code>TV</code> class</p> <pre><code>var newTV = TV(size: 65, type: \"LED\")\n</code></pre>"},{"location":"quick-ref/swift/structure/#check-type","title":"Check type","text":"<pre><code>print(type(of: \"abc\")) // print: String\nprint(type(of: 123))   // print: 123\n</code></pre>"},{"location":"quick-ref/swift/structure/#mutation-method-mutating","title":"Mutation method (mutating)","text":"<pre><code>struct Menu {\n  var menuItems = [\"Fries\", \"Burgers\"]\n  mutating func addToMenu(dish: String) {\n    self.menuItems.append(dish)\n  }\n}\n</code></pre> <p>Using the <code>Menu</code> class</p> <pre><code>var dinerMenu = Menu()\ndinerMenu.addToMenu(dish: \"Toast\")\nprint(dinerMenu.menuItems)\n// prints: [\"Fries\", \"Burgers\", \"Toast\"]\n</code></pre>"},{"location":"quick-ref/swift/structure/#structural-methods","title":"Structural methods","text":"<pre><code>struct Dog {\n  func bark() {\n    print(\"Woof\")\n  }\n}\nlet fido = Dog()\nfido.bark() // prints: Woof\n</code></pre>"},{"location":"quick-ref/swift/variables/","title":"Variables","text":""},{"location":"quick-ref/swift/variables/#variable-declaration","title":"Variable declaration","text":"<p>Variables are declared with <code>var</code>:</p> <pre><code>var greeting = \"Hello\"\nvar numberOfToys = 8\nvar isMorning = true\n</code></pre> <p>For clarity, variable declarations can contain type annotations:</p> <pre><code>var greeting: String = \"Hello\"\nvar numberOfToys: Int = 8\nvar isMorning: Bool = true\n</code></pre> <p>Variables are mutable. Their values be changed:</p> <pre><code>var numberOfToys: Int = 8\nnumberOfToys += 1\n\nprint(numberOfToys)\n// print \"9\"\n</code></pre>"},{"location":"quick-ref/swift/variables/#constants","title":"Constants","text":"<p>Constants are declared with <code>let</code>:</p> <pre><code>let greeting = \"Hello\"\nlet numberOfToys = 8\nlet isMorning = true\n</code></pre> <p>For clarity, constant declarations can contain type annotations:</p> <pre><code>let greeting: String = \"Hello\"\nlet numberOfToys: Int = 8\nlet isMorning: Bool = true\n</code></pre> <p>Constants are immutable. Their values be changed:</p> <pre><code>let numberOfToys: Int = 8\nnumberOfToys += 1\n// Error: numberOfToys is immutable\n</code></pre>"},{"location":"quick-ref/swift/variables/#computed-variables-get-and-set","title":"Computed Variables (get and set)","text":"<pre><code>import Foundation\n\nlet df = DateFormatter()\ndf.dateFormat = \"d MMMM yyyy\"\n\nguard var birth = df.date(from: \"5 June 1999\") else {\n    print(\"Date is not valid\")\n    return\n}\n\nvar age: Int {\n    Calendar.current\n        .dateComponents([.year],\n                        from: birth,\n                        to: Date()).year!\n}\n\nprint(age) // 23\nguard let birth2 = df.date(from: \"5 June 2002\") else {\n    print(\"Date is not valid\")\n    return\n}\nbirth = birth2\nprint(age) // 20\n</code></pre> <p>In the example below, distanceInFeet has a <code>getter</code> and a <code>setter</code>. Because of the <code>setter</code>, the <code>getter</code> requires the keyword <code>get</code>:</p> <pre><code>var distanceInMeters: Float = 100\n\nvar distanceInFeet: Float {\n  get {\n    distanceInMeters *3.28\n  }\n  set(newDistance) {\n    distanceInMeters = newDistance /3.28\n  }\n}\n\nprint(distanceInMeters) // 100.0\nprint(distanceInFeet)   // 328.0\n\ndistanceInFeet = 250\nprint(distanceInMeters) // 76.21951\nprint(distanceInFeet)   // 250.0\n\ndistanceInMeters = 800\nprint(distanceInMeters) // 800.0\nprint(distanceInFeet)   // 2624.0\n</code></pre>"},{"location":"quick-ref/swift/variables/#willset","title":"willSet","text":"<pre><code>var distance = 5 {\n  willSet {\n    print(\"The distance will be set\")\n  }\n}\n\ndistance = 10 // print: distance will be set\n</code></pre> <p>The new value can be accessed in <code>willSet</code>:</p> <pre><code>var distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set \\(newDistance)\")\n  }\n}\n\ndistance = 10 // print: distance will be set to 10\n</code></pre> <p><code>willSet</code> can be used to execute some code before setting the variable value</p>"},{"location":"quick-ref/swift/variables/#didset","title":"didSet","text":"<pre><code>var distance = 5 {\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10 // print: distance will be set to 10\n              // print: its old value is: 5\n</code></pre>"},{"location":"quick-ref/swift/variables/#willset-and-didset","title":"willSet and didSet","text":"<pre><code>var distance = 5 {\n  willSet(newDistance) {\n    print(\"The distance will be set to \\(newDistance)\")\n  }\n  didSet {\n    print(\"The distance is set to \\(distance)\")\n    print(\"Its old value is: \\(oldValue)\")\n  }\n}\ndistance = 10\n</code></pre>"}]}
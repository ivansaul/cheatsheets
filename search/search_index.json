{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheatsheets para Desenvolvedores","text":"<p><code>Cheat-Sheets</code> Seu guia de refer\u00eancia essencial para desenvolvedores que desejam aprender <code>Python</code>, <code>Rust</code>, <code>Swift</code>, <code>JavaScript</code>, <code>Kotlin</code>, <code>Go</code>, <code>Git</code> e muito mais!  </p> <p> </p>"},{"location":"#clean-code","title":"Clean Code","text":"<ul> <li>  Python</li> </ul>"},{"location":"#contribuir","title":"Contribuir","text":"<p>Estamos sempre buscando expandir e melhorar os Cheatsheets! Se voc\u00ea tem um guia de refer\u00eancia para compartilhar ou encontrou algo que pode ser aprimorado, sinta-se \u00e0 vontade para enviar um pull request. Vamos construir juntos um recurso valioso para desenvolvedores.  </p> <p>Se tiver d\u00favidas ou sugest\u00f5es, sinta-se \u00e0 vontade para abrir uma issue. Para manter a consist\u00eancia, siga as diretrizes de contribui\u00e7\u00e3o ao criar ou editar um cheat sheet.  </p>"},{"location":"#agradecimentos","title":"Agradecimentos","text":"<p>Este projeto \u00e9 baseado no Fechin/reference. Nosso principal objetivo \u00e9 melhorar a organiza\u00e7\u00e3o, aumentar a legibilidade e introduzir novos recursos para torn\u00e1-lo mais acess\u00edvel para todos.  </p>"},{"location":"#licenca","title":"Licen\u00e7a","text":"<p>Este projeto est\u00e1 licenciado sob a GNU General Public License v3.0.</p>"},{"location":"clean-code/","title":"Clean Code","text":"<ul> <li>  Python</li> </ul>"},{"location":"clean-code/python/","title":"Python","text":"<p>Abstract</p> <p>Um guia pr\u00e1tico e conciso de Python focado em princ\u00edpios de Clean Code, cobrindo boas pr\u00e1ticas, legibilidade e manuten\u00e7\u00e3o para escrever c\u00f3digo Python de alta qualidade.</p> <p>Contents:</p> <ul> <li>Introdu\u00e7\u00e3o</li> <li>Vari\u00e1veis</li> <li>Fun\u00e7\u00f5es</li> <li>Classes</li> <li>N\u00e3o se repita</li> </ul> <p>Credits</p> <p>Este conte\u00fado foi adaptado de fredsonchaves07/clean-code-python</p>","tags":["script","interpret","python","clean-code","python-clean-code"]},{"location":"clean-code/python/classes/","title":"Classes","text":""},{"location":"clean-code/python/classes/#principio-da-responsabilidade-unica-srp","title":"Princ\u00edpio da Responsabilidade \u00danica (SRP)","text":"<p>Robert C. Martin escreve:  </p> <p>Uma classe deve ter apenas um motivo para mudar.  </p> <p>Os \"motivos para mudar\" s\u00e3o, essencialmente, as responsabilidades gerenciadas por uma classe ou fun\u00e7\u00e3o.  </p> <p>No exemplo a seguir, criamos um elemento HTML que representa um coment\u00e1rio com a vers\u00e3o do documento:  </p> <p>Ruim </p> <pre><code>from importlib import metadata\n\n\nclass VersionCommentElement:\n     \"\"\"Um elemento que renderiza um coment\u00e1rio HTML com o n\u00famero da vers\u00e3o do programa.\"\"\"\n\n     def get_version(self) -&gt; str:\n          \"\"\"Obter a vers\u00e3o do pacote\"\"\"\n          return metadata.version(\"pip\")\n\n     def render(self) -&gt; None:\n          print(f'&lt;!-- Vers\u00e3o: {self.get_version()} --&gt;')\n\n\nVersionCommentElement().render()\n</code></pre> <p>Esta classe tem duas responsabilidades:  </p> <ul> <li>Recuperar o n\u00famero da vers\u00e3o do pacote Python  </li> <li>Renderizar-se como um elemento HTML  </li> </ul> <p>Qualquer altera\u00e7\u00e3o em uma dessas responsabilidades pode afetar a outra.  </p> <p>Podemos reescrever a classe e separar essas responsabilidades:  </p> <p>Bom </p> <pre><code>from importlib import metadata\n\n\ndef get_version(pkg_name: str) -&gt; str:\n     \"\"\"Recuperar a vers\u00e3o de um determinado pacote\"\"\"\n     return metadata.version(pkg_name)\n\n\nclass VersionCommentElement:\n     \"\"\"Um elemento que renderiza um coment\u00e1rio HTML com o n\u00famero da vers\u00e3o do programa.\"\"\"\n\n     def __init__(self, version: str):\n          self.version = version\n\n     def render(self) -&gt; None:\n          print(f'&lt;!-- Vers\u00e3o: {self.version} --&gt;')\n\n\nVersionCommentElement(get_version(\"pip\")).render()\n</code></pre> <p>O resultado \u00e9 que a classe agora s\u00f3 precisa se preocupar em renderizar a si mesma. Ela recebe o texto da vers\u00e3o durante a instancia\u00e7\u00e3o, e esse texto \u00e9 gerado por uma fun\u00e7\u00e3o separada, <code>get_version()</code>. Alterar uma n\u00e3o afeta a outra, desde que o contrato entre elas permane\u00e7a o mesmo, ou seja, a fun\u00e7\u00e3o fornece uma string e o m\u00e9todo <code>__init__</code> da classe aceita uma string.  </p> <p>Como b\u00f4nus adicional, <code>get_version()</code> agora pode ser reutilizada em outros lugares.  </p>"},{"location":"clean-code/python/classes/#principio-abertofechado-ocp","title":"Princ\u00edpio Aberto/Fechado (OCP)","text":"<p>\"Incorpore novos recursos estendendo o sistema, n\u00e3o modificando-o.\" Uncle Bob.  </p> <p>Objetos devem estar abertos para extens\u00e3o, mas fechados para modifica\u00e7\u00e3o. Deve ser poss\u00edvel aumentar a funcionalidade de um objeto (por exemplo, uma classe) sem modificar seus contratos internos. Isso pode ser alcan\u00e7ado ao projetar o objeto para ser estendido de maneira clara.  </p> <p>No exemplo a seguir, tentamos implementar um framework web simples que lida com requisi\u00e7\u00f5es HTTP e retorna respostas. A classe <code>View</code> possui um \u00fanico m\u00e9todo <code>.get()</code>, que ser\u00e1 chamado quando o servidor HTTP receber uma requisi\u00e7\u00e3o GET de um cliente.  </p> <p><code>View</code> \u00e9 intencionalmente simples e retorna respostas <code>text/plain</code>. No entanto, gostar\u00edamos de retornar respostas HTML baseadas em um arquivo de modelo, ent\u00e3o criamos uma subclasse chamada <code>TemplateView</code>.  </p> <p>Ruim </p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"Uma resposta HTTP\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"Uma vis\u00e3o simples que retorna respostas em texto puro\"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Lidar com uma requisi\u00e7\u00e3o GET e retornar uma mensagem na resposta\"\"\"\n          return Response(\n               status=200,\n               content_type='text/plain',\n               body=\"Bem-vindo ao meu site\"\n          )\n\n\nclass TemplateView(View):\n     \"\"\"Uma vis\u00e3o que retorna respostas HTML baseadas em um arquivo de modelo.\"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Lidar com uma requisi\u00e7\u00e3o GET e retornar um documento HTML na resposta\"\"\"\n          with open(\"index.html\") as fd:\n               return Response(\n                    status=200,\n                    content_type='text/html',\n                    body=fd.read()\n               )\n</code></pre> <p>A classe <code>TemplateView</code> modificou o comportamento interno de sua classe pai para permitir uma funcionalidade mais avan\u00e7ada. Ao fazer isso, agora depende de <code>View</code> n\u00e3o alterar a implementa\u00e7\u00e3o do m\u00e9todo <code>.get()</code>, que precisa permanecer inalterado. N\u00e3o podemos, por exemplo, adicionar verifica\u00e7\u00f5es adicionais a todas as classes derivadas de <code>View</code>, pois o comportamento foi sobrescrito em pelo menos um subtipo, o que exigiria sua atualiza\u00e7\u00e3o.  </p> <p>Vamos redesenhar nossas classes para corrigir esse problema e permitir que <code>View</code> seja estendida (n\u00e3o modificada) de maneira mais limpa:  </p> <p>Bom </p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"Uma resposta HTTP\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"Uma vis\u00e3o simples que retorna respostas em texto puro\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Renderizar o corpo da mensagem da resposta\"\"\"\n          return \"Bem-vindo ao meu site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Lidar com uma requisi\u00e7\u00e3o GET e retornar uma mensagem na resposta\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateView(View):\n     \"\"\"Uma vis\u00e3o que retorna respostas HTML baseadas em um arquivo de modelo.\"\"\"\n\n     content_type = \"text/html\"\n     template_file = \"index.html\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Renderizar o corpo da mensagem como HTML\"\"\"\n          with open(self.template_file) as fd:\n               return fd.read()\n</code></pre> <p>Observe que precisamos sobrescrever apenas o m\u00e9todo <code>render_body()</code>, que tem uma responsabilidade bem definida e permite que subtipos o sobrescrevam. Ele foi projetado para ser estendido.  </p> <p>Outra boa abordagem para combinar os benef\u00edcios da heran\u00e7a e da composi\u00e7\u00e3o de objetos \u00e9 usar Mixins.  </p> <p>Mixins s\u00e3o classes minimalistas projetadas para serem usadas exclusivamente em conjunto com outras classes relacionadas. Elas s\u00e3o \"misturadas\" \u00e0 classe-alvo por meio de heran\u00e7a m\u00faltipla para modificar seu comportamento.  </p> <p>Algumas regras:  </p> <ul> <li>Mixins devem sempre herdar de <code>object</code>.  </li> <li>Mixins sempre v\u00eam antes da classe-alvo,   ex.: <code>class Foo(MixinA, MixinB, TargetClass): ...</code> </li> </ul> <p>Tamb\u00e9m bom </p> <pre><code>from dataclasses import dataclass, field\nfrom typing import Protocol\n\n\n@dataclass\nclass Response:\n     \"\"\"Uma resposta HTTP\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n     headers: dict = field(default_factory=dict)\n\n\nclass View:\n     \"\"\"Uma vis\u00e3o simples que retorna respostas em texto puro\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Renderizar o corpo da mensagem da resposta\"\"\"\n          return \"Bem-vindo ao meu site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Lidar com uma requisi\u00e7\u00e3o GET e retornar uma mensagem na resposta\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateRenderMixin:\n     \"\"\"Mixin para vis\u00f5es que renderizam documentos HTML usando um arquivo de modelo.\n\n     N\u00e3o deve ser usada sozinha!\n     \"\"\"\n     template_file: str = \"\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Renderizar o corpo da mensagem como HTML\"\"\"\n          if not self.template_file:\n               raise ValueError(\"O caminho para um arquivo de modelo deve ser fornecido.\")\n\n          with open(self.template_file) as fd:\n               return fd.read()\n\n\nclass ContentLengthMixin:\n     \"\"\"Mixin que adiciona um cabe\u00e7alho Content-Length na resposta.\n\n     N\u00e3o deve ser usada sozinha!\n     \"\"\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Modificar a resposta para incluir o novo cabe\u00e7alho\"\"\"\n          response = super().get(request)  # type: ignore\n          response.headers['Content-Length'] = len(response.body)\n          return response\n\n\nclass TemplateView(TemplateRenderMixin, ContentLengthMixin, View):\n     \"\"\"Uma vis\u00e3o que retorna respostas HTML baseadas em um arquivo de modelo.\"\"\"\n\n     content_type = \"text/html\"\n     template_file = \"index.html\"\n</code></pre> <p>Mixins tornam a composi\u00e7\u00e3o de objetos mais f\u00e1cil, encapsulando funcionalidades reutiliz\u00e1veis em classes com uma \u00fanica responsabilidade, permitindo um desacoplamento limpo.</p> <p>Aqu\u00ed tienes la traducci\u00f3n al portugu\u00e9s:  </p>"},{"location":"clean-code/python/classes/#principio-da-substituicao-de-liskov-lsp","title":"Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov (LSP)","text":"<p>\u201cFun\u00e7\u00f5es que usam ponteiros ou refer\u00eancias para classes base devem ser capazes de usar objetos de classes derivadas sem saber disso\u201d, Uncle Bob.</p> <p>Este princ\u00edpio leva o nome de Barbara Liskov, que colaborou com a cientista da computa\u00e7\u00e3o Jeannette Wing no artigo seminal \"A behavioral notion of subtyping\" (1994). Um dos conceitos centrais do artigo \u00e9 que \"um subtipo (deve) preservar o comportamento dos m\u00e9todos do supertipo, bem como todas as propriedades invariantes e hist\u00f3ricas do supertipo\".</p> <p>Em ess\u00eancia, uma fun\u00e7\u00e3o que aceita um supertipo tamb\u00e9m deve aceitar todos os seus subtipos sem necessidade de modifica\u00e7\u00e3o.</p> <p>Voc\u00ea consegue identificar o problema no seguinte c\u00f3digo?</p> <p>Ruim</p> <pre><code>from dataclasses import dataclass\n\n\n@dataclass\nclass Response:\n     \"\"\"Uma resposta HTTP\"\"\"\n\n     status: int\n     content_type: str\n     body: str\n\n\nclass View:\n     \"\"\"Uma view simples que retorna respostas em texto puro\"\"\"\n\n     content_type = \"text/plain\"\n\n     def render_body(self) -&gt; str:\n          \"\"\"Renderiza o corpo da mensagem da resposta\"\"\"\n          return \"Bem-vindo ao meu site\"\n\n     def get(self, request) -&gt; Response:\n          \"\"\"Lida com uma requisi\u00e7\u00e3o GET e retorna uma mensagem na resposta\"\"\"\n          return Response(\n               status=200,\n               content_type=self.content_type,\n               body=self.render_body()\n          )\n\n\nclass TemplateView(View):\n     \"\"\"Uma view que retorna respostas HTML baseadas em um arquivo de template.\"\"\"\n\n     content_type = \"text/html\"\n\n     def get(self, request, template_file: str) -&gt; Response:  # type: ignore\n          \"\"\"Renderiza o corpo da mensagem como HTML\"\"\"\n          with open(template_file) as fd:\n               return Response(\n                    status=200,\n                    content_type=self.content_type,\n                    body=fd.read()\n               )\n\n\ndef render(view: View, request) -&gt; Response:\n     \"\"\"Renderiza uma View\"\"\"\n     return view.get(request)\n</code></pre> <p>A expectativa \u00e9 que a fun\u00e7\u00e3o <code>render()</code> consiga trabalhar com <code>View</code> e seu subtipo <code>TemplateView</code>, mas este \u00faltimo quebrou a compatibilidade ao modificar a assinatura do m\u00e9todo <code>.get()</code>. Isso resultar\u00e1 em uma exce\u00e7\u00e3o <code>TypeError</code> quando usado com <code>TemplateView</code>.</p> <p>Se quisermos que a fun\u00e7\u00e3o <code>render()</code> funcione com qualquer subtipo de <code>View</code>, devemos garantir que seu protocolo p\u00fablico n\u00e3o seja quebrado. Mas como saber qual \u00e9 esse protocolo? Ferramentas de tipagem, como mypy, gerar\u00e3o um erro ao detectar problemas como esse:</p> <pre><code>error: Signature of \"get\" incompatible with supertype \"View\"\n&lt;string&gt;:36: note:      Superclasse:\n&lt;string&gt;:36: note:          def get(self, request: Any) -&gt; Response\n&lt;string&gt;:36: note:      Subclasse:\n&lt;string&gt;:36: note:          def get(self, request: Any, template_file: str) -&gt; Response\n</code></pre>"},{"location":"clean-code/python/classes/#principio-da-segregacao-de-interface-isp","title":"Princ\u00edpio da Segrega\u00e7\u00e3o de Interface (ISP)","text":"<p>\u201cMantenha interfaces pequenas para que os usu\u00e1rios n\u00e3o acabem dependendo de coisas que n\u00e3o precisam.\u201d, Uncle Bob.</p> <p>V\u00e1rios idiomas de programa\u00e7\u00e3o orientada a objetos, como Java e Go, possuem o conceito de interfaces. Uma interface define os m\u00e9todos e propriedades p\u00fablicas de um objeto sem implement\u00e1-los. Elas s\u00e3o \u00fateis quando n\u00e3o queremos acoplar a assinatura de uma fun\u00e7\u00e3o a um objeto concreto, mas sim dizer: \"N\u00e3o me importo com qual objeto voc\u00ea me d\u00e1, desde que ele tenha certos m\u00e9todos e atributos que eu espero usar\".</p> <p>O Python n\u00e3o tem interfaces. Em vez disso, temos Classes Base Abstratas (ABCs), que s\u00e3o um pouco diferentes, mas podem servir ao mesmo prop\u00f3sito.</p> <p>Bom</p> <pre><code>from abc import ABCMeta, abstractmethod\n\n\n# Define a Classe Abstrata para um objeto gen\u00e9rico Greeter\nclass Greeter(metaclass=ABCMeta):\n     \"\"\"Um objeto que pode executar uma a\u00e7\u00e3o de sauda\u00e7\u00e3o.\"\"\"\n\n     @staticmethod\n     @abstractmethod\n     def greet(name: str) -&gt; None:\n          \"\"\"Exibe uma sauda\u00e7\u00e3o para o usu\u00e1rio com o nome fornecido\"\"\"\n\n\nclass FriendlyActor(Greeter):\n     \"\"\"Um ator que cumprimenta o usu\u00e1rio com uma sauda\u00e7\u00e3o amig\u00e1vel\"\"\"\n\n     @staticmethod\n     def greet(name: str) -&gt; None:\n          \"\"\"Cumprimenta uma pessoa pelo nome\"\"\"\n          print(f\"Ol\u00e1 {name}!\")\n\n\ndef welcome_user(user_name: str, actor: Greeter):\n     \"\"\"D\u00e1 boas-vindas a um usu\u00e1rio com um nome espec\u00edfico usando o ator fornecido\"\"\"\n     actor.greet(user_name)\n\n\nwelcome_user(\"Barbara\", FriendlyActor())\n</code></pre> <p>Agora imagine o seguinte cen\u00e1rio: temos v\u00e1rios documentos PDF que criamos e queremos disponibilizar para os visitantes do nosso site. Estamos usando um framework web em Python e poder\u00edamos projetar uma classe para gerenciar esses documentos. Ent\u00e3o, criamos uma classe base abstrata abrangente para nosso documento.</p> <p>Erro</p> <pre><code>import abc\n\n\nclass Persistable(metaclass=abc.ABCMeta):\n     \"\"\"Serializa um arquivo para dados e vice-versa\"\"\"\n\n     @property\n     @abc.abstractmethod\n     def data(self) -&gt; bytes:\n          \"\"\"Os dados brutos do arquivo\"\"\"\n\n     @classmethod\n     @abc.abstractmethod\n     def load(cls, name: str):\n          \"\"\"Carrega o arquivo do disco\"\"\"\n\n     @abc.abstractmethod\n     def save(self) -&gt; None:\n          \"\"\"Salva o arquivo no disco\"\"\"\n\n\nclass PDFDocument(Persistable):\n     \"\"\"Um documento PDF\"\"\"\n\n     @property\n     def data(self) -&gt; bytes:\n          \"\"\"Os bytes brutos do documento PDF\"\"\"\n          ...  # C\u00f3digo omitido\n\n     @classmethod\n     def load(cls, name: str):\n          \"\"\"Carrega o arquivo do sistema de arquivos local\"\"\"\n          ...  # C\u00f3digo omitido\n\n\ndef view(request):\n     \"\"\"Uma view que lida com uma requisi\u00e7\u00e3o GET para um documento\"\"\"\n     requested_name = request.qs['name']\n     return PDFDocument.load(requested_name).data\n</code></pre> <p>Por\u00e9m, n\u00e3o podemos instanciar <code>PDFDocument</code> sem implementar <code>.save()</code>, o que gera um erro:</p> <pre><code>Can't instantiate abstract class PDFDocument with abstract method save.\n</code></pre> <p>O problema \u00e9 que criamos uma interface que tem recursos que n\u00e3o precisamos agora. A solu\u00e7\u00e3o \u00e9 decompor a interface em interfaces menores e compost\u00e1veis.</p> <p>Bom</p> <pre><code>import abc\n\n\nclass DataCarrier(metaclass=abc.ABCMeta):\n     \"\"\"Carrega um conjunto de dados\"\"\"\n\n     @property\n     def data(self):\n          ...\n\n\nclass Loadable(DataCarrier):\n     \"\"\"Pode carregar dados do armazenamento pelo nome\"\"\"\n\n     @classmethod\n     @abc.abstractmethod\n     def load(cls, name: str):\n          ...\n\n\nclass Saveable(DataCarrier):\n     \"\"\"Pode salvar dados no armazenamento\"\"\"\n\n     @abc.abstractmethod\n     def save(self) -&gt; None:\n          ...\n\n\nclass PDFDocument(Loadable):\n     \"\"\"Um documento PDF\"\"\"\n\n     @property\n     def data(self) -&gt; bytes:\n          ...  # C\u00f3digo omitido\n\n     @classmethod\n     def load(cls, name: str) -&gt; None:\n          ...  # C\u00f3digo omitido\n\n\ndef view(request):\n     \"\"\"Uma view que lida com uma requisi\u00e7\u00e3o GET para um documento\"\"\"\n     requested_name = request.qs['name']\n     return PDFDocument.load(requested_name).data\n</code></pre>"},{"location":"clean-code/python/classes/#principio-da-inversao-de-dependencia-dip","title":"Princ\u00edpio da Invers\u00e3o de Depend\u00eancia (DIP)","text":"<p>\u201cDependa de abstra\u00e7\u00f5es, n\u00e3o de detalhes concretos.\u201d Uncle Bob.</p> <p>Imagine que queremos escrever uma view web que retorna uma resposta HTTP transmitindo linhas de um arquivo CSV gerado dinamicamente. Queremos usar o escritor CSV da biblioteca padr\u00e3o.</p> <p>Ruim</p> <pre><code>import csv\nfrom io import StringIO\n\n\nclass StreamingHttpResponse:\n     \"\"\"Uma resposta HTTP em streaming\"\"\"\n     ...  # C\u00f3digo omitido\n\n\ndef some_view(request):\n     rows = (\n          ['Primeira linha', 'Foo', 'Bar', 'Baz'],\n          ['Segunda linha', 'A', 'B', 'C', '\"Teste\"', \"Aqui est\u00e1 uma cita\u00e7\u00e3o\"]\n     )\n\n     def stream():\n          buffer_ = StringIO()\n          writer = csv.writer(buffer_, delimiter=';', quotechar='\"')\n          for row in rows:\n               writer.writerow(row)\n               buffer_.seek(0)\n               data = buffer_.read()\n               buffer_.seek(0)\n               buffer_.truncate()\n               yield data\n\n     response = StreamingHttpResponse(stream(), content_type='text/csv')\n     response['Content-Disposition'] = 'attachment; filename=\"arquivo.csv\"'\n\n     return response\n</code></pre> <p>Essa implementa\u00e7\u00e3o \u00e9 trabalhosa. Uma melhor abordagem \u00e9 usar um objeto que implemente <code>.write()</code> para retornar os dados imediatamente.</p> <p>Este exemplo foi retirado de uma contribui\u00e7\u00e3o feita para a documenta\u00e7\u00e3o do Django por este autor.</p>"},{"location":"clean-code/python/dry/","title":"Don't repeat yourself (DRY)","text":"<p>Try to observe the DRY principle.</p> <p>Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there's more than one place to alter something if you need to change some logic.</p> <p>Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there's only one place to update!</p> <p>Often you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.</p> <p>Getting the abstraction right is critical. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don't repeat yourself, otherwise you'll find yourself updating multiple places any time you want to change one thing.</p> <p>Bad:</p> <pre><code>from typing import List, Dict\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Developer:\n    def __init__(self, experience: float, github_link: str) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; str:\n        return self._github_link\n\n\n@dataclass\nclass Manager:\n    def __init__(self, experience: float, github_link: str) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; str:\n        return self._github_link\n\n\ndef get_developer_list(developers: List[Developer]) -&gt; List[Dict]:\n    developers_list = []\n    for developer in developers:\n        developers_list.append({\n            'experience': developer.experience,\n            'github_link': developer.github_link\n        })\n    return developers_list\n\n\ndef get_manager_list(managers: List[Manager]) -&gt; List[Dict]:\n    managers_list = []\n    for manager in managers:\n        managers_list.append({\n            'experience': manager.experience,\n            'github_link': manager.github_link\n        })\n    return managers_list\n\n\n## create list objects of developers\ncompany_developers = [\n    Developer(experience=2.5, github_link='https://github.com/1'),\n    Developer(experience=1.5, github_link='https://github.com/2')\n]\ncompany_developers_list = get_developer_list(developers=company_developers)\n\n## create list objects of managers\ncompany_managers = [\n    Manager(experience=4.5, github_link='https://github.com/3'),\n    Manager(experience=5.7, github_link='https://github.com/4')\n]\ncompany_managers_list = get_manager_list(managers=company_managers)\n</code></pre> <p>Good:</p> <pre><code>from typing import List, Dict\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Employee:\n    def __init__(self, experience: float, github_link: str) -&gt; None:\n        self._experience = experience\n        self._github_link = github_link\n\n    @property\n    def experience(self) -&gt; float:\n        return self._experience\n\n    @property\n    def github_link(self) -&gt; str:\n        return self._github_link\n\n\ndef get_employee_list(employees: List[Employee]) -&gt; List[Dict]:\n    employees_list = []\n    for employee in employees:\n        employees_list.append({\n            'experience': employee.experience,\n            'github_link': employee.github_link\n        })\n    return employees_list\n\n\n## create list objects of developers\ncompany_developers = [\n    Employee(experience=2.5, github_link='https://github.com/1'),\n    Employee(experience=1.5, github_link='https://github.com/2')\n]\ncompany_developers_list = get_employee_list(employees=company_developers)\n\n## create list objects of managers\ncompany_managers = [\n    Employee(experience=4.5, github_link='https://github.com/3'),\n    Employee(experience=5.7, github_link='https://github.com/4')\n]\ncompany_managers_list = get_employee_list(employees=company_managers)\n</code></pre>"},{"location":"clean-code/python/functions/","title":"Fun\u00e7\u00f5es","text":""},{"location":"clean-code/python/functions/#argumentos-de-funcoes-2-ou-menos-idealmente","title":"Argumentos de fun\u00e7\u00f5es (2 ou menos, idealmente)","text":"<p>Limitar a quantidade de parametros de uma fun\u00e7\u00e3o \u00e9 incrivelmente importantante porque isso torna sua fun\u00e7\u00e3o f\u00e1cil de testar. Ter mais de tr\u00eas de leva em uma explos\u00e3o onde voc\u00ea tem que testar v\u00e1rios casos diferentes, com argumentos separados.</p> <p>Um ou dois argumentos \u00e9 o caso ideal, e tr\u00eas deve ser evitado se poss\u00edvel. Algo al\u00e9m disso deve ser deixado de lado. Usualmente, se voc\u00ea tem mais de dois argumentos, suas fun\u00e7\u00f5es est\u00e3o tentando fazer coisas demais. Nos casos que n\u00e3o est\u00e3o, na maior parte do tempo um objeto ir\u00e1 ser o suficiente como argumento.</p> <p>Ruim:</p> <pre><code>def create_menu(title, body, button_text, cancellable):\n    pass\n</code></pre> <p>Java-esque:</p> <pre><code>class Menu:\n    def __init__(self, config: dict):\n        self.title = config[\"title\"]\n        self.body = config[\"body\"]\n        # ...\n\nmenu = Menu(\n    {\n        \"title\": \"My Menu\",\n        \"body\": \"Something about my menu\",\n        \"button_text\": \"OK\",\n        \"cancellable\": False\n    }\n)\n</code></pre> <p>Muito bom</p> <pre><code>from typing import Text\n\n\nclass MenuConfig:\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: Text\n    body: Text\n    button_text: Text\n    cancellable: bool = False\n\n\ndef create_menu(config: MenuConfig) -&gt; None:\n    title = config.title\n    body = config.body\n    # ...\n\n\nconfig = MenuConfig()\nconfig.title = \"My delicious menu\"\nconfig.body = \"A description of the various items on the menu\"\nconfig.button_text = \"Order now!\"\n# O atributo de inst\u00e2ncia substitui o atributo de classe padr\u00e3o.\nconfig.cancellable = True\n\ncreate_menu(config)\n</code></pre> <p>Chique</p> <pre><code>from typing import NamedTuple\n\n\nclass MenuConfig(NamedTuple):\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: str\n    body: str\n    button_text: str\n    cancellable: bool = False\n\n\ndef create_menu(config: MenuConfig):\n    title, body, button_text, cancellable = config\n    # ...\n\n\ncreate_menu(\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\"\n    )\n)\n</code></pre> <p>Ainda mais chique</p> <pre><code>from typing import Text\nfrom dataclasses import astuple, dataclass\n\n\n@dataclass\nclass MenuConfig:\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: Text\n    body: Text\n    button_text: Text\n    cancellable: bool = False\n\ndef create_menu(config: MenuConfig):\n    title, body, button_text, cancellable = astuple(config)\n    # ...\n\n\ncreate_menu(\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\"\n    )\n)\n</code></pre> <p>Ainda mais chique, vers\u00f5es Python3.8+</p> <pre><code>from typing import TypedDict, Text\n\n\nclass MenuConfig(TypedDict):\n    \"\"\"A configuration for the Menu.\n\n    Attributes:\n        title: The title of the Menu.\n        body: The body of the Menu.\n        button_text: The text for the button label.\n        cancellable: Can it be cancelled?\n    \"\"\"\n    title: Text\n    body: Text\n    button_text: Text\n    cancellable: bool\n\n\ndef create_menu(config: MenuConfig):\n    title = config[\"title\"]\n    # ...\n\n\ncreate_menu(\n    # Voc\u00ea precisa informar todos os par\u00e2metros\n    MenuConfig(\n        title=\"My delicious menu\",\n        body=\"A description of the various items on the menu\",\n        button_text=\"Order now!\",\n        cancellable=True\n    )\n)\n</code></pre>"},{"location":"clean-code/python/functions/#funcoes-devem-fazer-somente-uma-coisa","title":"Fun\u00e7\u00f5es devem fazer somente uma coisa","text":"<p>Esta \u00e9, de longe, a regra mais importante da engenharia de software. Quando as fun\u00e7\u00f5es fazem mais de uma coisa, elas s\u00e3o mais dif\u00edceis de compor, testar e pensar sobre. Quando voc\u00ea consegue isolar a fun\u00e7\u00e3o para apenas uma a\u00e7\u00e3o, elas podem ser refatoradas sem muita dificuldade e seu c\u00f3digo ser\u00e1 f\u00e1cilmente lido. Se voc\u00ea n\u00e3o tirar mais nada deste guia al\u00e9m disso, voc\u00ea estar\u00e1 \u00e0 frente de muitos programadores.</p> <p>Ruim:</p> <pre><code>from typing import List\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client) -&gt; None:\n    pass\n\n\ndef email_clients(clients: List[Client]) -&gt; None:\n    \"\"\"Filter active clients and send them an email.\n    \"\"\"\n    for client in clients:\n        if client.active:\n            email(client)\n</code></pre> <p>Bom:</p> <pre><code>from typing import List\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client) -&gt; None:\n    pass\n\n\ndef get_active_clients(clients: List[Client]) -&gt; List[Client]:\n    \"\"\"Filter active clients.\n    \"\"\"\n    return [client for client in clients if client.active]\n\n\ndef email_clients(clients: List[Client]) -&gt; None:\n    \"\"\"Send an email to a given list of clients.\n    \"\"\"\n    for client in get_active_clients(clients):\n        email(client)\n</code></pre> <p>Voc\u00ea v\u00ea uma oportunidade para usar geradores agora?</p> <p>Melhor ainda</p> <pre><code>from typing import Generator, Iterator\n\n\nclass Client:\n    active: bool\n\n\ndef email(client: Client):\n    pass\n\n\ndef active_clients(clients: Iterator[Client]) -&gt; Generator[Client, None, None]:\n    \"\"\"Only active clients\"\"\"\n    return (client for client in clients if client.active)\n\n\ndef email_client(clients: Iterator[Client]) -&gt; None:\n    \"\"\"Send an email to a given list of clients.\n    \"\"\"\n    for client in active_clients(clients):\n        email(client)\n</code></pre>"},{"location":"clean-code/python/functions/#nomes-das-funcoes-devem-dizer-o-que-elas-fazem","title":"Nomes das fun\u00e7\u00f5es devem dizer o que elas fazem","text":"<p>Ruim:</p> <pre><code>class Email:\n    def handle(self) -&gt; None:\n        pass\n\nmessage = Email()\n# O que isso quer dizer?\nmessage.handle()\n</code></pre> <p>Bom:</p> <pre><code>class Email:\n    def send(self) -&gt; None:\n        \"\"\"Send this message\"\"\"\n\nmessage = Email()\nmessage.send()\n</code></pre>"},{"location":"clean-code/python/functions/#funcoes-devem-estar-em-apenas-um-nivel-de-abstracao","title":"Fun\u00e7\u00f5es devem estar em apenas um n\u00edvel de abstra\u00e7\u00e3o","text":"<p>Quando voc\u00ea tem mais de um n\u00edvel de abstra\u00e7\u00e3o poss\u00edvelmente sua fun\u00e7\u00e3o est\u00e1 fazendo coisa demais. Dividir suas fun\u00e7\u00f5es desencadeia em c\u00f3digo reus\u00e1vel e f\u00e1cil de testar.</p> <p>Ruim:</p> <pre><code># type: ignore\n\ndef parse_better_js_alternative(code: str) -&gt; None:\n    regexes = [\n        # ...\n    ]\n\n    statements = code.split('\\n')\n    tokens = []\n    for regex in regexes:\n        for statement in statements:\n            pass\n\n    ast = []\n    for token in tokens:\n        pass\n\n    for node in ast:\n        pass\n</code></pre> <p>Bom:</p> <pre><code>from typing import Tuple, List, Text, Dict\n\n\nREGEXES: Tuple = (\n   # ...\n)\n\n\ndef parse_better_js_alternative(code: Text) -&gt; None:\n    tokens: List = tokenize(code)\n    syntax_tree: List = parse(tokens)\n\n    for node in syntax_tree:\n        pass\n\n\ndef tokenize(code: Text) -&gt; List:\n    statements = code.split()\n    tokens: List[Dict] = []\n    for regex in REGEXES:\n        for statement in statements:\n            pass\n\n    return tokens\n\n\ndef parse(tokens: List) -&gt; List:\n    syntax_tree: List[Dict] = []\n    for token in tokens:\n        pass\n\n    return syntax_tree\n</code></pre>"},{"location":"clean-code/python/functions/#nao-use-sinalizadores-como-parametros-de-funcao","title":"N\u00e3o use sinalizadores como par\u00e2metros de fun\u00e7\u00e3o","text":"<p>Os sinalizadores informam ao usu\u00e1rio que esta fun\u00e7\u00e3o faz mais de uma coisa. Fun\u00e7\u00f5es deve fazer uma coisa. Divida suas fun\u00e7\u00f5es se elas estiverem seguindo um c\u00f3digo diferente caminhos baseados em verdadeiro ou falso.</p> <p>Ruim:</p> <pre><code>from typing import Text\nfrom tempfile import gettempdir\nfrom pathlib import Path\n\n\ndef create_file(name: Text, temp: bool) -&gt; None:\n    if temp:\n        (Path(gettempdir()) / name).touch()\n    else:\n        Path(name).touch()\n</code></pre> <p>Bom:</p> <pre><code>from typing import Text\nfrom tempfile import gettempdir\nfrom pathlib import Path\n\n\ndef create_file(name: Text) -&gt; None:\n    Path(name).touch()\n\n\ndef create_temp_file(name: Text) -&gt; None:\n    (Path(gettempdir()) / name).touch()\n</code></pre>"},{"location":"clean-code/python/functions/#evite-efeitos-colaterais","title":"Evite efeitos colaterais","text":"<p>Uma fun\u00e7\u00e3o produz um efeito colateral se fizer qualquer coisa al\u00e9m de assumir um valor ao inv\u00e9s de retornar outro valor ou valores. Por exemplo, um efeito colateral pode ser a escrita a um arquivo, modificando alguma vari\u00e1vel global ou transferindo acidentalmente todo o seu dinheiro para um estranho.</p> <p>No entanto, voc\u00ea precisa ter efeitos colaterais em um programa de vez em quando - por exemplo, como no exemplo anterior, voc\u00ea pode precisar gravar em um arquivo. Nestes casos, voc\u00ea deve centralizar e indicar onde voc\u00ea est\u00e1 incorporando efeitos colaterais. N\u00e3o tem v\u00e1rias fun\u00e7\u00f5es e classes que gravam em um arquivo espec\u00edfico - em vez disso, t\u00eam um (e apenas um) servi\u00e7o que o faz.</p> <p>O ponto principal \u00e9 evitar armadilhas comuns, como o compartilhamento de estado entre objetos sem qualquer estrutura, usando tipos de dados mut\u00e1veis \u200b\u200bque podem ser gravados por qualquer coisa ou usando uma inst\u00e2ncia de uma classe, e n\u00e3o centralizando onde ocorrem seus efeitos colaterais. Se voc\u00ea puder fazer isso, ficar\u00e1 mais feliz do que a grande maioria dos outros programadores.</p> <p>Ruim:</p> <pre><code># type: ignore\n\n# Este \u00e9 um nome de n\u00edvel de m\u00f3dulo..\n# \u00c9 uma boa pr\u00e1tica defini-los como valores imut\u00e1veis, como uma string.\n# No entanto...\nfullname = \"Ryan McDermott\"\n\ndef split_into_first_and_last_name() -&gt; None:\n    # O uso da palavra-chave global aqui est\u00e1 mudando o significado da\n    # seguinte linha. Esta fun\u00e7\u00e3o agora est\u00e1 alterando o n\u00edvel do m\u00f3dulo\n    # estado e introduzindo um efeito colateral!\n    global fullname\n    fullname = fullname.split()\n\nsplit_into_first_and_last_name()\n\n# MyPy ir\u00e1 detectar o problema,  'Incompatible types in\n# assignment: (expression has type \"List[str]\", variable has type \"str\")'\nprint(fullname)  # [\"Ryan\", \"McDermott\"]\n\n# OK. Funcionou da primeira vez, mas o que acontecer\u00e1 se chamarmos de\n# funcionar de novo?\n</code></pre> <p>Bom:</p> <pre><code>from typing import List, AnyStr\n\n\ndef split_into_first_and_last_name(name: AnyStr) -&gt; List[AnyStr]:\n    return name.split()\n\nfullname = \"Ryan McDermott\"\nname, surname = split_into_first_and_last_name(fullname)\n\nprint(name, surname)  # =&gt; Ryan McDermott\n</code></pre> <p>Muito bom</p> <pre><code>from typing import Text\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Person:\n    name: Text\n\n    @property\n    def name_as_first_and_last(self) -&gt; list:\n        return self.name.split()\n\n\n# A raz\u00e3o pela qual criamos inst\u00e2ncias de classes \u00e9 para gerenciar o estado!\nperson = Person(\"Ryan McDermott\")\nprint(person.name)  # =&gt; \"Ryan McDermott\"\nprint(person.name_as_first_and_last)  # =&gt; [\"Ryan\", \"McDermott\"]\n</code></pre>"},{"location":"clean-code/python/introduction/","title":"Introdu\u00e7\u00e3o","text":"<p>Principios da engenharia de software, do livro de Robert C. Martin C\u00f3digo Limpo, adaptados para Python. Isto n\u00e3o \u00e9 um style guide. \u00c9 um guia para desenvolver software leg\u00edvel, reutilizavel e refator\u00e1vel em Python.</p> <p>Nem todos principios contidos aqui tem de ser seguidos estritamente, e muito menos ir\u00e3o ser universalmente aprovados. Estes s\u00e3o apenas guias e nada mais, mas que foram codificados durante muito anos por experi\u00eancias coletivas dos autores de C\u00f3digo Limpo.</p> <p>Inspriado em clean-code-javascript</p> <p>Vers\u00e3o Python3.7+</p>"},{"location":"clean-code/python/variables/","title":"Vari\u00e1veis","text":""},{"location":"clean-code/python/variables/#use-nomes-significantes-e-pronunciaveis-em-suas-variaveis","title":"Use nomes significantes e pronunci\u00e1veis em suas vari\u00e1veis","text":"<p>Ruim:</p> <pre><code>import datetime\n\n\nymdstr = datetime.date.today().strftime(\"%y-%m-%d\")\n</code></pre> <p>Bom:</p> <pre><code>import datetime\n\n\ncurrent_date: str = datetime.date.today().strftime(\"%y-%m-%d\")\n</code></pre>"},{"location":"clean-code/python/variables/#use-o-mesmo-vocabulario-para-o-mesmo-tipo-de-variavel","title":"Use o mesmo vocabul\u00e1rio para o mesmo tipo de vari\u00e1vel","text":"<p>Ruim: Usamos tr\u00eas nomes diferentes para a mesma entidade:</p> <pre><code>def get_user_info(): pass\ndef get_client_data(): pass\ndef get_customer_record(): pass\n</code></pre> <p>Bom: Se a entidade for a mesma, voc\u00ea deve ser consistente ao se referir a ela em suas fun\u00e7\u00f5es:</p> <pre><code>def get_user_info(): pass\ndef get_user_data(): pass\ndef get_user_record(): pass\n</code></pre> <p>Melhor ainda: Python \u00e9 (tamb\u00e9m) uma linguagem de programa\u00e7\u00e3o orientada a objetos. Se fizer sentido, empacote as fun\u00e7\u00f5es junto com a implementa\u00e7\u00e3o concreta da entidade em seu c\u00f3digo, como atributos de inst\u00e2ncia, m\u00e9todos ou m\u00e9todos de propriedade:</p> <pre><code>from typing import Union, Dict, Text\n\n\nclass Record:\n    pass\n\n\nclass User:\n    info : str\n\n    @property\n    def data(self) -&gt; Dict[Text, Text]:\n        return {}\n\n    def get_record(self) -&gt; Union[Record, None]:\n        return Record()\n</code></pre>"},{"location":"clean-code/python/variables/#use-nomes-faceis-de-pesquisar","title":"Use nomes f\u00e1ceis de pesquisar","text":"<p>N\u00f3s vamos ler mais c\u00f3digo do que escrever, por isso \u00e9 importante que o c\u00f3digo que escrevemos seja leg\u00edvel e f\u00e1cil de achar. Ao n\u00e3o nomear vari\u00e1veis, prejudicamos nossos leitores. Torne seus nomes f\u00e1ceis de procurar.</p> <p>Ruim:</p> <pre><code>import time\n\n\n# Para que \u00e9 o n\u00famero 86400?\ntime.sleep(86400)\n</code></pre> <p>Bom:</p> <pre><code>import time\n\n\n# Declare-os no namespace global do m\u00f3dulo.\nSECONDS_IN_A_DAY = 60 * 60 * 24\ntime.sleep(SECONDS_IN_A_DAY)\n</code></pre>"},{"location":"clean-code/python/variables/#use-variaveis-explicativas","title":"Use vari\u00e1veis explicativas","text":"<p>Ruim:</p> <pre><code>import re\n\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$\"\n\nmatches = re.match(city_zip_code_regex, address)\nif matches:\n    print(f\"{matches[1]}: {matches[2]}\")\n</code></pre> <p>Nada mal: \u00c9 melhor, mas ainda dependemos muito do regex.</p> <pre><code>import re\n\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$\"\nmatches = re.match(city_zip_code_regex, address)\n\nif matches:\n    city, zip_code = matches.groups()\n    print(f\"{city}: {zip_code}\")\n</code></pre> <p>Bom: Diminua a depend\u00eancia de regex nomeando as vari\u00e1veis em subgrupo</p> <pre><code>import re\n\n\naddress = \"One Infinite Loop, Cupertino 95014\"\ncity_zip_code_regex = r\"^[^,\\\\]+[,\\\\\\s]+(?P&lt;city&gt;.+?)\\s*(?P&lt;zip_code&gt;\\d{5})?$\"\n\nmatches = re.match(city_zip_code_regex, address)\nif matches:\n    print(f\"{matches['city']}, {matches['zip_code']}\")\n</code></pre>"},{"location":"clean-code/python/variables/#evite-mapear-mentalmente","title":"Evite mapear mentalmente","text":"<p>N\u00e3o force o leitor do seu c\u00f3digo a traduzir o que a vari\u00e1vel significa. Explicito \u00e9 melhor que implito.</p> <p>Ruim:</p> <pre><code>seq = (\"Austin\", \"New York\", \"San Francisco\")\n\nfor item in seq:\n    #do_stuff()\n    #do_some_other_stuff()\n\n    # Espere, `item` de novo?\n    print(item)\n</code></pre> <p>Bom:</p> <pre><code>locations = (\"Austin\", \"New York\", \"San Francisco\")\n\nfor location in locations:\n    #do_stuff()\n    #do_some_other_stuff()\n    # ...\n    print(location)\n</code></pre>"},{"location":"clean-code/python/variables/#nao-adicione-contextos-desnecessarios","title":"N\u00e3o adicione contextos desnecess\u00e1rios","text":"<p>Se o nome da sua classe/objeto expressa algo, n\u00e3o repita isso no nome da vari\u00e1vel.</p> <p>Ruim:</p> <pre><code>class Car:\n    car_make: str\n    car_model: str\n    car_color: str\n</code></pre> <p>Bom:</p> <pre><code>class Car:\n    make: str\n    model: str\n    color: str\n</code></pre>"},{"location":"clean-code/python/variables/#use-argumentos-padroes-ao-inves-de-encadear-condicionais","title":"Use argumentos padr\u00f5es ao inv\u00e9s de encadear condicionais","text":"<p>Muito ruim</p> <p>Porque escrever:</p> <pre><code>import hashlib\n\n\ndef create_micro_brewery(name):\n    name = \"Hipster Brew Co.\" if name is None else name\n    slug = hashlib.sha1(name.encode()).hexdigest()\n    # etc.\n</code></pre> <p>... quando voc\u00ea pode especificar um argumento padr\u00e3o em vez disso? Isso tamb\u00e9m deixa claro que voc\u00ea est\u00e1 esperando uma string como argumento.</p> <p>Bom:</p> <pre><code>from typing import Text\nimport hashlib\n\n\ndef create_micro_brewery(name: Text = \"Hipster Brew Co.\"):\n    slug = hashlib.sha1(name.encode()).hexdigest()\n    # etc.\n</code></pre>"},{"location":"community/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to this project. Your support is essential to improving and expanding it. We appreciate your interest and value your contributions.</p> <p>We're always looking to expand and improve Cheatsheets! If you have a cheat sheet to share or see something that could be improved, feel free to submit a pull request. Let's build a valuable resource for developers together.</p>"},{"location":"community/contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are several ways you can contribute to this project:</p> <ul> <li>Reporting a bug</li> <li>Suggesting a feature</li> <li>Improving documentation</li> <li>Sharing your knowledge</li> <li>Giving feedback</li> <li>Contributing to translations</li> <li>and more...</li> </ul>"},{"location":"community/contributing/#contribution-requirements","title":"Contribution Requirements","text":"<p>To get started with development, please follow these steps:</p> <p>1. Fork the repository.</p> <p>2. Clone your forked repository.</p> <p>3. Install the project dependencies.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>4. Start the development server.</p> <pre><code>mkdocs serve -f src/en/mkdocs.yml\n</code></pre> <p>Once running, visit http://127.0.0.1:8000 to preview your changes.</p>"},{"location":"community/contributing/#adding-a-new-cheat-sheet","title":"Adding a New Cheat Sheet","text":"<p>Each cheat sheet should be placed inside either the <code>quick-ref</code> or <code>clean-code</code> directory. If you're adding a new cheat sheet for Python, for example, create a <code>python</code> folder inside <code>quick-ref</code>:</p> <pre><code>\u251c\u2500\u2500 quick-ref\n    \u251c\u2500\u2500 python\n        \u251c\u2500\u2500 .toc.md\n        \u251c\u2500\u2500 index.md \n        \u251c\u2500\u2500 getting-started.md\n        \u251c\u2500\u2500 ...\n</code></pre> <p>The <code>index.md</code> file is the landing page for the cheatsheet. It should contain a table of contents for the cheatsheet.</p> index.md<pre><code>---\ntitle: Python\nicon: appicons/python # (1)!\ndescription: A concise and practical ...\n\ntags:\n  - script\n  - interpret\ncategories:\n  - programming\n---\n</code></pre> <ol> <li>The <code>icon</code> field should be the name of the icon file in the <code>material/overrides/.icons/appicons</code> directory. For example, if the icon file is <code>python.svg</code>, the <code>icon</code> field should be <code>appicons/python</code>.</li> </ol> <p>Required Fields</p> <p>Only the <code>title</code>, <code>icon</code>, and <code>description</code> are required. The <code>tags</code>, <code>cover</code>, and <code>categories</code> fields are optional.</p> <p>The <code>.toc.md</code> file is used to generate the navigation menu for the cheat sheet.</p> <pre><code>- [Python](index.md) # (1)!\n- [Getting Started](getting-started.md) # (2)!\n...\n</code></pre> <ol> <li>The <code>[Python](index.md)</code> link should point to the <code>index.md</code> file in the <code>python</code> directory.</li> <li>The <code>[Getting Started](getting-started.md)</code> link should point to the <code>getting-started.md</code> file in the <code>python</code> directory.</li> </ol> <p>The <code>getting-started.md</code> file is the first page of the cheat sheet. It should contain a brief introduction to the topic and a table of contents for the rest of the cheat sheet.</p> <p>Additional Markdowns files (<code>getting-started.md</code>, etc.) containing the content of the cheat sheet.</p>"},{"location":"community/contributing/#contributing-to-translations","title":"Contributing to Translations","text":"<p>We welcome contributions to the documentation in other languages. If you'd like to contribute to translations, please follow these steps:</p> <p>1. Duplicate the <code>src/en/</code> folder and rename it using a supported language code. Each language directory contains the following files:</p> <pre><code>\u251c\u2500\u2500 docs\n    \u251c\u2500\u2500 quick-ref\n        \u251c\u2500\u2500 index.md\n        \u251c\u2500\u2500 python\n            \u251c\u2500\u2500 index.md\n            \u251c\u2500\u2500 getting-started.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre> <p>2. Edit the <code>mkdocs.yml</code> file in the language directory to set the <code>language</code> field.</p> <p>For example, if you want to translate the cheat sheet to Portuguese Brazil, you should set the <code>language</code> field to <code>pt-BR</code>.</p> src/pt-BR/mkdocs.yml<pre><code>INHERIT: ../../mkdocs.yml\n\n# Project information\nsite_dir: ../../site\nsite_description: Share quick ... # (1)!\nedit_uri: edit/master/src/en/docs/ # (2)!\n\n# Configuration\ntheme:\n  name: material\n  language: en  # (3)!\n</code></pre> <ol> <li>Translate the <code>site_description</code> field to your language.</li> <li>Edit the <code>edit_uri</code> field to point to the correct language (e.g., <code>edit/master/src/pt-BR/docs/</code>).</li> <li>Set the <code>language</code> field (e.g., <code>language: pt-BR</code>).</li> </ol> <p>3. Add the new language to the <code>languages</code> field in the main <code>mkdocs.yml</code> file that is located in the root directory.</p> mkdocs.yml<pre><code>extra:\n  alternate:\n    - name: English\n      link: https://ivansaul.github.io/cheatsheets\n      lang: en\n    - name: Portuguese (BR) # (1)!\n      link: https://ivansaul.github.io/cheatsheets/pt-BR/ # (2)!\n      lang: pt-BR # (3)!\n</code></pre> <ol> <li>This field will be used to display the language name in the language selector.</li> <li>This field will be used to redirect users to the correct language version of the cheat sheet.</li> <li>This field will be used to set the <code>language</code> field in the <code>mkdocs.yml</code> file in the language directory.</li> </ol> <p>4. Start the development server.</p> <pre><code>mkdocs serve -f src/pt-BR/mkdocs.yml\n</code></pre> <p>5.  Add new jobs to the <code>deploy.yml</code> workflow file to build the documentation for the new language.</p> .github/workflows/deploy.yml<pre><code>- name: Build English Documentation\n    run: mkdocs build -f src/en/mkdocs.yml\n\n- name: Build Portuguese (BR) Documentation\n    run: mkdocs build -f src/pt-BR/mkdocs.yml\n</code></pre> <p>Build and Deploy Workflow</p> <p>The new jobs should be added after the <code>Build English Documentation</code> job.</p> <p>6. Once your translation is complete, commit your changes and submit a pull request.</p>"}]}